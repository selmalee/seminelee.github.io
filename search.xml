<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JavaScript Promise API]]></title>
      <url>http://seminelee.github.io/2016/08/28/promise1/</url>
      <content type="html"><![CDATA[<p>本文译自<a href="https://davidwalsh.name/promises" target="_blank" rel="external">https://davidwalsh.name/promises</a></p>
<p>虽然同步代码更容易跟踪和调试，但是异步的性能和灵活性通常更好。为什么在你可以立刻发起多个请求，然后在每个都准备好了的时候处理它们时，要停下来等呢？Promises正在成为JavaScript世界的一个重要组成部分，有许多新的API正在与Promise理念来实施。下面让我们来看看promise及其API是如何使用的！</p>
<a id="more"></a>
<h2 id="在自然环境下的Promises"><a href="#在自然环境下的Promises" class="headerlink" title="在自然环境下的Promises"></a><strong>在自然环境下的Promises</strong></h2><p>XMLHttpRequest API是异步的，但<em>不</em>使用Promises API。然而，现在有一些原生API使用promises：</p>
<ul>
<li><a href="https://davidwalsh.name/javascript-battery-api" target="_blank" rel="external">Battery API</a></li>
<li><a href="https://davidwalsh.name/fetch" target="_blank" rel="external">fetch API</a>(用来代替XHR)</li>
<li>ServiceWorker API (还没有该API文章)</li>
</ul>
<p>Promises只会变得更加普遍，它很重要，所有的前端开发人员都应该熟悉它。另外值得一提的是，Node.js的是Promises的另一个平台（显然，Promises是一个核心的语言功能）。</p>
<p><em>测试promises比你想象的更简单，因为<code>setTimeout</code>可以作为你的异步”任务”！</em></p>
<h2 id="Promise的基本用法"><a href="#Promise的基本用法" class="headerlink" title="Promise的基本用法"></a><strong>Promise的基本用法</strong></h2><p><code>new Promise()</code>构造函数应该只用于传统异步任务，如<code>setTimeout</code>或<code>XMLHttpRequest</code>的用法。即，用关键字<code>new</code>创建一个新的Promise对象，该promise对象提供<code>resolve</code>和<code>reject</code>两个回调函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">	<span class="comment">// Do an async task async task and then...</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="comment">/* good condition */</span>) &#123;</div><div class="line">		resolve(<span class="string">'Succes!'</span>;)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		reject(<span class="string">'Failure!'</span>);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">/* do something with the result */</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">/* error :( */</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这取决于开发者异步任务执行的结果，在回调函数中手动调用<code>resolve</code>或<code>reject</code>。一个典型的例子是，转换XMLHttpRequest成基于promise的任务：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// From Jake Archibald's Promises and Back:</span></div><div class="line"><span class="comment">// http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promisifying-xmlhttprequest</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">	<span class="comment">// Return a new promise.</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">		<span class="comment">// Do the usual XHR stuff</span></div><div class="line">		<span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">		req.open(<span class="string">'GET'</span>, url);</div><div class="line"></div><div class="line">		req.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="comment">// This is called even on 404 etc</span></div><div class="line">			<span class="comment">// so check the status</span></div><div class="line">			<span class="keyword">if</span> (req.status == <span class="number">200</span>) &#123;</div><div class="line">				<span class="comment">// Resolve the promise with the response text</span></div><div class="line">				resolve(req.response);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// Otherwise reject with the status text</span></div><div class="line">				<span class="comment">// which will hopefully be meaningful error</span></div><div class="line">				reject(<span class="built_in">Error</span>(req.statusText));</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">// Handle network errors</span></div><div class="line">		req.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			reject(<span class="built_in">Error</span>(<span class="string">"Network Error"</span>));</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">// Make the request</span></div><div class="line">		req.send();</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Use it!</span></div><div class="line">get(<span class="string">'story.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"success!"</span>, response);</div><div class="line">&#125;, fucntion(error) &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Failed!"</span>, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>有时候,你并不<em>需要</em>在promise内执行一个异步任务————但是，如果可能执行一个异步任务，返回一个promise对象将是最好的做法，这样，你只需要给定结果处理函数就可以了。在这种情况下，不需要使用关键字<code>new</code>你只需要简单地调用<code>Promise.resolve()</code>或<code>Promise.reject()</code>就可以了。 例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userCache = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDetail</span>(<span class="params">username</span>) </span>&#123;</div><div class="line">	<span class="comment">// In both cases, cached or not, a promise will be returned</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> (userCache[username]) &#123;</div><div class="line">		<span class="comment">// Return a promise without the "new" keyword</span></div><div class="line">		<span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(userCache[username]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Use the fetch API to get the information</span></div><div class="line">	<span class="comment">// fetch return a promise</span></div><div class="line">	<span class="keyword">return</span> fetch(<span class="string">'users/'</span> + username + <span class="string">'.json'</span>)</div><div class="line">		.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">			userCache[username] = result;</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;)</div><div class="line">		.catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not find user: '</span> + username);</div><div class="line">		&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为总是返回一个promise，你可以在它的返回值上随时使用<code>then</code>和<code>catch</code>方法！</p>
<p>##then##<br>所有promise实例有一个<code>then</code>方法，用来处理执行结果。第一个<code>then</code>方法回调接收<code>resolve()</code>调用的结果作为参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">	<span class="comment">// A mock async acton using setTimeout</span></div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		resolve(<span class="number">10</span>);</div><div class="line">	&#125;, <span class="number">3000</span>);</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(result);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// From the console</span></div><div class="line"><span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<p>当promise的resolve触发，<code>then</code>回调函数被触发。你也可以使用链式的<code>then</code>回调方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		resolve(<span class="number">10</span>);</div><div class="line">	&#125;, <span class="number">3000</span>)</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'first then: '</span>, num);</div><div class="line">	<span class="keyword">return</span> num * <span class="number">2</span>;</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'second then: '</span>, num);</div><div class="line">	<span class="keyword">return</span> num * <span class="number">2</span>;</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'last then: '</span>, num);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// From the console</span></div><div class="line"><span class="comment">// first then: 10</span></div><div class="line"><span class="comment">// second then: 20</span></div><div class="line"><span class="comment">//last then: 40</span></div></pre></td></tr></table></figure></p>
<p>每个<code>then</code>接收之前的<code>then</code>返回值的结果。</p>
<p>如果一个promise的resolve已经触发，但之后<code>then</code>再次被调用，回调将立即触发。如果promise被拒绝，你被拒绝后调用<code>then</code>的话，回调不会被调用。</p>
<h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a><strong>catch</strong></h2><p>当<code>promise</code>被拒绝时，<code>catch</code>回调函数就会被执行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">	<span class="comment">// A mock async action using setTimeout</span></div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		reject(<span class="string">'Done!'</span>);</div><div class="line">	&#125;, <span class="number">3000</span>);</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'done'</span>, e);</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'catch: '</span>, e);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// Frome the console:</span></div><div class="line"><span class="comment">// 'catch: Done!'</span></div></pre></td></tr></table></figure></p>
<p>传入<code>reject</code>方法的参数由你决定。一般来说是传入一个<code>Error</code> 对象`：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reject(<span class="built_in">Error</span>(<span class="string">'Data could not be found'</span>));</div></pre></td></tr></table></figure></p>
<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>想想JavaScript加载器的情形：有些时候你触发多个异步交互，但只希望在他们都完成后才作出响应————这就是<code>Promise.all</code>的用处所在。<code>Promise.all</code>方法接受一个promise数组，一旦他们的resolve都触发之后就执行一个回调函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.all([promise1, promise2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">	<span class="comment">// Both promises resolved</span></div><div class="line">&#125;)</div><div class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">	<span class="comment">// One or more promises was rejected</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>使用<code>Promise.all</code>的最佳示例是（通过<code>fetch</code>）同时发起多个 AJAX请求时:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request1 = fetch(<span class="string">'/user.json'</span>);</div><div class="line"><span class="keyword">var</span> request2 = fetch(<span class="string">'./articles.json'</span>);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all([request1, request2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">	<span class="comment">// Both promises done!</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>你可以结合API像<code>fetch</code>和Battery API，因为它们都返回promises：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.all([fetch(<span class="string">'./users.json'</span>), navigator.getBattery()])</div><div class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">		<span class="comment">// Both promises done!</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure></p>
<p>处理拒绝(rejection)当然是复杂的。如果任何promise被reject，<code>catch</code>将会被第一个拒绝(rejection)所触发。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> req1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">	<span class="comment">// A mock async action using setTimeout</span></div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		resolve(<span class="string">'First!'</span>);</div><div class="line">	&#125;, <span class="number">4000</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> req2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">	<span class="comment">// A mock async action using setTimeout</span></div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		reject(<span class="string">'Second!'</span>);</div><div class="line">	&#125;, <span class="number">3000</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">Promise</span>.all([req1, req2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Then: '</span>, results);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Catch: '</span>, err);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// From the console:</span></div><div class="line"><span class="comment">// Catch: Second!</span></div></pre></td></tr></table></figure></p>
<p>随着越来越多API支持promises，<code>Promise.all</code>将会变得十分有用。</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p><code>Promise.race</code>是一个有趣的函数————一旦数组中任何一个Promise被解决或者拒绝，<code>Promise.race</code>就会触发，而不会等待所有的promise对象被解决或者拒绝。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> req1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">	<span class="comment">// A mock async action using setTimeout</span></div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		resolve(<span class="string">'First!'</span>);</div><div class="line">	&#125;, <span class="number">4000</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> req2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">	<span class="comment">// A mock async action using setTimeout</span></div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		reject(<span class="string">'Second!'</span>);</div><div class="line">	&#125;, <span class="number">3000</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">Promise</span>.race([req1, req2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Then: '</span>, results);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">one, two</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Catch: '</span>, err);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// From the console:</span></div><div class="line"><span class="comment">// Then: Second!</span></div></pre></td></tr></table></figure></p>
<p>用例可发起一个请求到主站资源和备用资源（以防主站和备用之一不可用）。</p>
<h2 id="熟悉Promise"><a href="#熟悉Promise" class="headerlink" title="熟悉Promise"></a>熟悉Promise</h2><p>Promise在过去的几年里（或者在过去10年，如果你是一个Dojo Toolkit的用户）一直是热议的话题，他们已经从JavaScript框架的一部分变成一个JavaScript语言的主要部分。很有可能，你将看到大多数的新的JavaScript API都将基于promise实现…</p>
<p>……这是一个伟大的事情！开发人员能够避免回调地狱，而且异步交互可以像任何其他变量那样来传递。Promise还需要一段时间来普及，现在是学习他们的时候了！</p>
<blockquote>
<p><strong>结束语</strong><br>我觉得翻译带给我的好处是<br>让我不停思考、认认真真地看第一手资料，而且可以慢慢看得懂其他前沿文章。<br>想了解我更多的作品，请点击菜单<a href="https://seminelee.github.io/works/">关于</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SafeFrames v1.1]]></title>
      <url>http://seminelee.github.io/2016/08/24/safeframe1/</url>
      <content type="html"><![CDATA[<h1 id="iab-Interactive-Advertising-Bureau"><a href="#iab-Interactive-Advertising-Bureau" class="headerlink" title="iab.(Interactive Advertising Bureau)"></a><strong>iab.(Interactive Advertising Bureau)</strong></h1><h3 id="安全框架"><a href="#安全框架" class="headerlink" title="安全框架"></a><strong>安全框架</strong></h3><h3 id="版本1-1-草案"><a href="#版本1-1-草案" class="headerlink" title="版本1.1 草案"></a>版本1.1 草案</h3><h4 id="2014年8月发布"><a href="#2014年8月发布" class="headerlink" title="2014年8月发布"></a>2014年8月发布</h4><hr>
<p><strong>这个文档是IAB广告技术委员会开发的</strong></p>
<p>SafeFrame规范是由来自21个IAB成员公司的志愿者组成的工作小组开发的。</p>
<a id="more"></a>
<p>SafeFrame工作小组的领导者是：</p>
<ul>
<li>肖恩·斯奈德，雅虎公司（Sean Snider, Yahoo!）</li>
<li>普拉巴卡尔·戈亚尔，微软公司（Prabhakar Goyal, Microsoft）</li>
</ul>
<p>为这个文档作出贡献的IAB成员公司有：</p>
<ul>
<li>Adobe Systems Inc.</li>
<li>AOL &amp; ADTECH</li>
<li>Auditude</li>
<li>C3 Metrics</li>
<li>CBS Interactive</li>
<li>Disney Interactive Media Group</li>
<li>Dotomi</li>
<li>Editorial Projects in Education</li>
<li>FDG</li>
<li>FreeWheel</li>
<li>Google</li>
<li>HealthiNation</li>
<li>Media Rating Council - MRC</li>
<li>Microsoft</li>
<li>NBC Universal Digital Media</li>
<li>Network Advertising Initiative - NAI</li>
<li>OpenX Limited</li>
<li>Time Inc.</li>
<li>Turner Broadcasting System, Inc./CNN.com</li>
<li>Undertone</li>
<li>Yahoo!</li>
</ul>
<p><strong>IAB中这项倡议的带领者是克里斯·梅希亚（Chris Mejia）和凯蒂·斯特劳德（Katie Stroud ）</strong></p>
<p>对本文档进行评论请联系adtechnology@iab.net。请一定要提及这个文件的版本号（你可以在此页的右下角找到，v1.1）。</p>
<p>知识产权事项：参与SafeFrame1.0工作小组的公司在生产SafeFrame1.0版的过程中没有作出专利的说明。SafeFrame的未来版本将在即将发布的IAB知识产权政策的主持下进行生产。</p>
<p>SafeFrame倡议的更多细则和资源可以在<a href="http://www.iab.net/safeframe上被找到" target="_blank" rel="external">http://www.iab.net/safeframe上被找到</a></p>
<p><strong>关于IAB广告技术委员会</strong></p>
<p>广告技术委员会由超过70个在广告技术有主要的业务的IAB成员公司组成。它与IAB广告经营理事会合作，为数字广告行业制定重要技术标准和实践最佳做法。一群精选的主要成员企业也参与到广告技术领导委员会里，建议IAB的管理层和董事会顶级广告技术优先。</p>
<p>广告技术委员会的使命是开发那些将降低成本，开拓新的市场机会，并确保数字广告行业的长期增长的技术规范和要求，并促进其被采用。</p>
<p>要查看委员会成员公司的完整列表，请移步到：<br><a href="http://www.iab.net/advertising_technology_council" target="_blank" rel="external">http://www.iab.net/advertising_technology_council</a></p>
<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>　执行摘要<br>　目标受众<br>　规格更新</p>
<p><strong>1. 概况</strong><br>　　1.1　SafeFrames组件<br>　　　1.1.1　网站(The Host)<br>　　　1.1.2　外部方(The External Party)<br>　　　1.1.3　接口<br>　　　1.1.4　二级域名(The Secondary Host Domain)<br>　　1.2　优点<br>　　　1.2.1　外部方和网站之间的透明度<br>　　　1.2.2　统一规范的API<br>　　　1.2.3　“沙盒”(Sandboxing)外部内容<br>　　　1.2.4　网站定制&amp;控制<br>　　1.3　SafeFrames和广告可见展视<br>　　　1.3.1　支持3MS广告可见度<br>　　　1.3.2　可见度特性对外部方可选<br>　　1.4　SafeFrames和视频插播广告<br>　　1.5　SafeFrames和移动端<br>　　1.6　报告SafeFrame的数据<br>　　1.7　区别于其他规范<br>　　　1.7.1　IAB友好的iframe<br>　　　1.7.2　跨源资源共享（CORS）<br>　　1.8　超出范围的项(Out of Scope)<br>　　1.9　操作注意事项<br><strong>2. 网站实现</strong><br>　　2.1　SafeFrames是如何运作的<br>　　　2.1.1　传递模式A：网站转换外部内容<br>　　　2.1.2　传递模式B：外部内容直接传递<br>　　　2.1.3　渲染SafeFrame<br>　　　2.1.4　通过API进行页内通讯<br>　　2.2　要求<br>　　　2.2.1　JavaScript的host库和API<br>　　　2.2.2　二级域名<br>　　　2.2.3　资源公约<br>　　　2.2.4　SafeFrame的URI公约<br>　　2.3　实现注意事项<br>　　2.4　SafeFrame的渲染细则<br>　　2.5　通信机制的细则<br><strong>3. SafeFrame标签</strong><br>　　3.1　SafeFrame标签结构&amp;要求<br>　　　3.1.1　SCRIPT标签<br>　　　3.1.2　使用JavaScript处理数据标签<br>　　　　3.1.2.1　例子：一次性处理所有标签<br>　　　　3.1.2.2　例子：在数据标签之前先定义SafeFrame host库<br>　　　　3.1.2.3　例子：有兄弟标签的SafeFrame数据标签自动引导(Auto-Bootstrapping)<br><strong>4. 网站API实施细则</strong><br>　　4.1　命名空间 <code>$sf.host</code><br>　　4.2　命名空间 <code>$sf.host.conf</code><br>　　4.3　命名空间 <code>$sf.info</code><br>　　4.4　类 <code>$sf.host.Config</code><br>　　4.5　类 <code>$sf.host.PosConfig</code><br>　　4.6　类 <code>$sf.host.Position</code><br>　　4.7　类 <code>$sf.host.PosMeta</code><br>　　4.8　函数 <code>$sf.host.boot</code><br>　　4.9　函数 <code>$sf.host.status</code><br>　　4.10　函数 <code>$sf.host.nuke</code><br>　　4.11　函数 <code>$sf.host.get</code><br>　　4.12　函数 <code>$sf.host.render</code><br><strong>5. 外部方API实现</strong><br>　　5.1　命名空间 <code>$sf.ext</code><br>　　5.2　函数 <code>$sf.ext.register</code><br>　　5.3　函数 <code>$sf.ext.supports</code><br>　　5.4　函数 <code>$sf.ext.geom</code><br>　　5.5　函数 <code>$sf.ext.expand</code><br>　　5.6　函数 <code>$sf.ext.collapse</code><br>　　5.7　函数 <code>$sf.ext.status</code><br>　　5.8　函数 <code>$sf.ext.meta</code><br>　　5.9　函数 <code>$sf.ext.cookie</code><br>　　5.10　函数 <code>$sf.ext.inViewPercentage</code><br>　　5.11　函数 <code>$sf.ext.winHasFocus</code></p>
<hr>
<h3 id="执行摘要"><a href="#执行摘要" class="headerlink" title="执行摘要"></a>执行摘要</h3><p>SafeFrame1.0技术是一种支持API的iframe，它开辟了发布页面内容和包含iframe的外部内容比如广告之间沟通的线路。因为这条沟通线路，不同于标准的iframe，投放到SafeFrame的内容能够收集数据和有丰富的互动，如广告扩张。</p>
<p>为了避免有破坏性的广告行为和网页内嵌投放广告的潜在安全风险，发布商可以选择投放广告内容到iframe。</p>
<p>iframe是一种发布商网页中的微型HTML页面。使用这种iframe，广告内容在iframe的边缘内被隔离，无法访问任何关于页面被哪里提供的信息。如果无法访问页面内容，iframe内的广告内容就不能扩展，不能与网站访客动态地互动，不能收集任何必需的判断广告效果的数据。</p>
<p>这种方法保护了发布商，但同时也限制了广告的能力，并因为限制于iframes而降低了媒体库的价值。</p>
<p>而SafeFrame的支持API的iframe以一种受控和透明的方式，开辟了网页代码和广告内容之间的通信线路。这种通信允许丰富的互动，同时保护发布商的页面以防未知的变化，避免了损坏页面完整性的可能。</p>
<p>SafeFrame用于数字广告的一些主要优势包括：</p>
<ul>
<li><p><strong>保护用户</strong><br>虽然SafeFrame与投放到它的iframe的广告内容共享信息，发布商可以选择分享的内容而保护一些敏感的消费信息，如个人电子邮件地址，密码，甚至银行信息。</p>
</li>
<li><p><strong>发布商控制</strong><br>发布商代码和广告代码之间的隔离，让发布商能够保持对页面布局和限制广告接口干扰的控制，同时还允许丰富的互动和有限的数据收集。使用的SafeFrame API，发布商还有能力决定哪些网站信息（如果有的话）可以被广告商和供应商看到。</p>
</li>
<li><p><strong>发布商效率</strong><br>随着SafeFrame的实施，出版商可以允许来自投放到一个iframe的广告的丰富互动，同时保持控制，防止广告代码干扰页面代码的运行。启用SafeFrame的丰富媒体库可以提高潜在收益，同时保持运营成本在控制范围内。</p>
</li>
<li><p><strong>标准化的广告布局</strong><br>广告技术提供商可以规范自己的富媒体广告代码，以便它可以在任何依附SafeFrame API协议的发布商网络上运行，同时降低运营成本。</p>
</li>
<li><p><strong>支持广告可见度与其他行业计划</strong><br>SafeFrame1.0提供机制，支持3MS发展下的可见展视以及DAA的AdChoices和其他隐私的举措。事实上，SafeFrame提供了更高的隐私控制，这是以往的标准iFrame做不到的。此外，通过SafeFrames实现的透明通信建立了可以支持其他行业举措的基础。</p>
</li>
</ul>
<p>当一些发布商已经在自己的网页上实现了这种技术，而且广告开发人员和技术供应商已经作出必要的修改（如果有要修改的话）以支持投放广告到发布商实现SafeFrames时，SafeFrames提供的这些好处就能完全实现了。</p>
<p>SafeFrame的工作小组已经建立了一个开源的参考实例，以鼓励在市场上被迅速采用。但是，在发布商过渡到SafeFrame1.0的过程中，广告开发者和技术供应商要很耐心。</p>
<h3 id="目标受众"><a href="#目标受众" class="headerlink" title="目标受众"></a>目标受众</h3><p>本规范中的技术细则主要适用于想实现SafeFrames的网站所有者，和将使用SafeFrame协议的富媒体广告的广告开发者。具体来说，网站和广告内容开发人员可以使用本文件中的规范，去制定SafeFrame协议，实现网站内容和任何外部投放的广告或其他内容之间的通信。</p>
<p>Web技术的厂商也应该熟悉SafeFrame的规范，来决定他们是否需要进行任何修改，以支持在市场上的SafeFrame技术。</p>
<p>此外，SafeFrame不仅限于在数字广告中使用，它也可以被任何客户端/服务器关系使用。</p>
<h3 id="规格更新"><a href="#规格更新" class="headerlink" title="规格更新"></a>规格更新</h3><table>
<thead>
<tr>
<th style="text-align:left">版本号</th>
<th style="text-align:left">日期</th>
<th style="text-align:left">概要</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1.0</td>
<td style="text-align:left">3/18/2013</td>
<td style="text-align:left">Original</td>
</tr>
<tr>
<td style="text-align:left">1.0.1</td>
<td style="text-align:left">4/16/2013</td>
<td style="text-align:left">Minor name corrections</td>
</tr>
<tr>
<td style="text-align:left">1.1</td>
<td style="text-align:left">3/14/2014</td>
<td style="text-align:left">Support for communicating whether top browser window is “in focus” (changes in 5.1 and added 5.11)</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="1-概况"><a href="#1-概况" class="headerlink" title="1. 概况"></a>1. 概况</h2><p>SafeFrame说明了一个创建一个包含投放到网页的HTML内容的容器的框架，并建立了一个使网页和提供的内容之间沟通的API。有了SafeFrame1.0，指定的对象和函数被用于操纵和与创建的SafeFrame容器互动，并允许丰富的互动。SafeFrames的主要用途是用SCRIPT标签或者其他标记封装外部HTML内容，同时保护主页面，以防那些会意想不到地无意或故意影响到网站的内容。</p>
<p>作为一种对于投放到iframe的内容的解决方案，SafeFrame为广告内容提供了广告可见度和功能性，这是以往的标准的iframe做不到的。</p>
<h3 id="1-1-SafeFrames组件"><a href="#1-1-SafeFrames组件" class="headerlink" title="1.1 SafeFrames组件"></a>1.1 SafeFrames组件</h3><p>SafeFrame管理两方之间的互动：主网站和外部方。主网站拥有一个域名，在其中显示外部方提供的内容比如广告。此外，SafeFrame与一个二级域名进行交互。外部方内容投放到这个域名，并从那里通过受控的SafeFrame API功能与主网站进行交互。</p>
<h4 id="1-1-1-网站-The-Host"><a href="#1-1-1-网站-The-Host" class="headerlink" title="1.1.1 网站(The Host)"></a>1.1.1 网站(The Host)</h4><p>本文档中，主网站是一个网站拥有(site-owned)的（一个或多个的）域，在其上，显示内容给常见地通过Web浏览器的方式访问内容的终端用户。在网络广告中，主网站是“发布商”的代名词，但在其他行业它可能有其他的名称。主网站实施SafeFrame框架，包括API和一系列用于SafeFrame的静态资源（JavaScript的™和HTML文件）。主网站还负责渲染投放到SafeFrame容器的外部内容。</p>
<h4 id="1-1-2-外部方-The-External-Party"><a href="#1-1-2-外部方-The-External-Party" class="headerlink" title="1.1.2 外部方(The External Party)"></a>1.1.2 外部方(The External Party)</h4><p>本文档中，外部方是一个来源于主域名之外的内容提供者。它提供内容，或者重定向到内容的数据。在网络广告中，外部方可能是广告服务器，广告转换，广告网络或任何推动广告到主网站的技术组织。</p>
<p>在许多情况下，外部内容提供商可能完全不需要修改内容代码，但是当内容需要以某种方式与主网站进行交互如内容扩展的时候，外部方就需要用一个JavaScript格式的标签把SafeFrame API的细节包括在内。</p>
<blockquote>
<p><strong>通用实施注意事项</strong><br>如果外部内容需要与它投放的主网站进行互动，SafeFrame1.0所提供的容器管理技术只需要对外部内容修改代码。例如，任何扩展或浮动的行为都需要修改一些代码，并且必须在JavaScript中进行。而限制于SafeFrame容器里的任何丰富的交互不需要修改。</p>
</blockquote>
<h4 id="1-1-3-API"><a href="#1-1-3-API" class="headerlink" title="1.1.3 API"></a>1.1.3 API</h4><p>SafeFrame的规范了一个提供主网站和外部内容之间的通信协议的API。使用该API，主机网站可以在必要时给外部内容提供信息，外部内容可以向网站请求服务（即扩展）。</p>
<p>随着实施和行业应用，我们希望其他行业规范和举措将扩展SafeFrame API的功能。例如，为了支持由3MS举措正在开发的广告可见展视，当前的规范提供了构建模块。而且，该规范也许会扩展，以支持DAA的广告选择方案。</p>
<h4 id="1-1-4-二级域名-The-Secondary-Host-Domain"><a href="#1-1-4-二级域名-The-Secondary-Host-Domain" class="headerlink" title="1.1.4 二级域名(The Secondary Host Domain)"></a>1.1.4 二级域名(The Secondary Host Domain)</h4><p>SafeFrame在一个由主网站提供的二级域名中运作。这个二级域名最好建立在内容分发网络（CDN）上，以提高性能和可用性。这个二级域名作为主网站与外部方之间的不可知的加工场。外部方需要了解网站域(the Host domain)的信息可以通过请求访问到，这些信息是通过使用SafeFrame API提供的。</p>
<h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><p>SafeFrame给拥有者和主网站(the host site)或者外部内容的运营商提供益处。</p>
<h4 id="1-2-1-外部方和网站之间的透明度"><a href="#1-2-1-外部方和网站之间的透明度" class="headerlink" title="1.2.1 外部方和网站之间的透明度"></a>1.2.1 外部方和网站之间的透明度</h4><p>SafeFrame提供网站和外部内容之间共享信息的机制。可以被共享的信息的一些可能性包括：网站指定的元数据，SafeFrame容器的几何位置，以及SafeFrame容器是否在视图里等等。</p>
<h3 id="1-2-2-统一规范的API"><a href="#1-2-2-统一规范的API" class="headerlink" title="1.2.2 统一规范的API"></a>1.2.2 统一规范的API</h3><p>随着行业应用，让所有广告商和其他外部内容提供商可以与网站进行通信的公共API，是让两者之间的互动更清晰的基础。</p>
<h3 id="1-2-3-“沙盒”外部内容"><a href="#1-2-3-“沙盒”外部内容" class="headerlink" title="1.2.3 “沙盒”外部内容"></a>1.2.3 “沙盒”外部内容</h3><p>SafeFrame把内容渲染到一个实现第三方内容和网站内容之间的明确划分的容器。这个障碍形成了一个“沙盒”，它可以自动给网站一些安全感，并提供以下功能：</p>
<ul>
<li><p><strong>基础安全</strong><br>实质上，SafeFrame是一个有API的iframe，该API实现网站和外部内容之间通信，并与iframe一样提供相同的基础安全。虽然API开启了双方的通信，但网站会控制什么样的信息（如果有的话）能被访问或共享以及分享给谁。</p>
</li>
<li><p><strong>稳定性</strong><br>就标准的内部框架来说，SafeFrame里网站和外部内容之间的明确划分，降低了在渲染内容时发生错误，以及对网站的JavaScript和HTML代码内容干扰的机会。由于外部内容是由它自己的HTML文档，自己的一套CSS规则，以及自己的JavaScript渲染的，它不能直接交互或覆盖网站的JavaScript，HTML，或者CSS。<br>另外，外部内容不会在不适当的位置渲染。例如，不成熟地传递，外部内容可以在网站页面内的任何地方渲染自己，覆盖网站的内容和功能，或在网站内容之下呈现和超出视图。<br>由于双方之间的代码干扰被包含在SafeFrame里，使用SafeFrame API，双方现在可以以可控和透明的方式进行交互。</p>
</li>
<li><p><strong>性能测量</strong><br>明确的界定让网站可以衡量外部内容需要多长时间来加载，这对渲染到iframe的内容来说已经是可能的了。但是在外部内容与网页代码内嵌投放的情况下，不能测量外部内容的加载时间，因为它不被包含和可以在网页内多个地方呈现。随着SafeFrame的API让其交互能力成为可能，一个可行的办法是，一旦被内嵌投放到一个SafeFrame，就移动外部内容。</p>
</li>
<li><p><strong>两全其美：富媒体和数据收集</strong><br>网站所有者面临着是否允许富媒体在他们的网站上内嵌到网页代码，允许无限制地访问页面数据，或者供应内容到iframe的决策，这将阻止大多数的富媒体互动和限制大部分或所有的数据收集。<br>供应内容到SafeFrame让富媒体交互和受控制的数据采集两全其美。这实现了iframe投放的内容的新功能，并提供一个可行的方案，即投放丰富的内容到一个交互式的SafeFrame而不是内嵌到网页。</p>
</li>
</ul>
<h4 id="1-2-4-网站定制-amp-控制"><a href="#1-2-4-网站定制-amp-控制" class="headerlink" title="1.2.4 网站定制&amp;控制"></a>1.2.4 网站定制&amp;控制</h4><p>网站可以定制SafeFrame API，添加控制哪些功能和丰富的交互是允许的功能。网站也可以呈现新的内容，或在任何时候卸载内容。</p>
<h3 id="1-3-SafeFrames和广告可见展视"><a href="#1-3-SafeFrames和广告可见展视" class="headerlink" title="1.3 SafeFrames和广告可见展视"></a>1.3 SafeFrames和广告可见展视</h3><p>SafeFrame创建一个包围广告内容的容器，防止直接访问有关网站网页或应用程序的信息内容。但是，该内容可以请求信息和通过使用SafeFrame API发送和接收消息与网站交互。这些消息使网站能够与外部内容共享精选的信息，其中包括，让外部内容能够确定其是否在视图中的几何信息。</p>
<p>下图说明了SafeFrame的内容是如何可以显示在网页上的，并表明了SafeFrame内投放的广告内容有25％在视图中。<br><img src="http://119.29.142.213/static/201608/sf1.png" alt="图1-1"></p>
<p>使用SafeFrame的外部调用<code>$sf.ext.geom</code>，提供广告内容的外部方可以确定是SafeFrame相对于可视区域和总网站内容区域的位置。使用提供的尺寸，外部方可以确定有多少内容在视图中。</p>
<p>其他的SafeFrame调用让外部内容可以扩展，超越SafeFrame的界限。<code>$sf.ext.geom</code>调用也使外部方可以确定它能扩展多远以及扩展内容中有多少是在视图中。</p>
<p>下图的例子说明了SafeFrame的内容怎么在网页内扩展和有多少是在可视区域内的。<br><img src="http://119.29.142.213/static/201608/sf2.png" alt="图1-2"><br>想了解更多信息，请查阅章节0，它涵盖了详细的$sf.ext.geom调用。</p>
<h4 id="1-3-1-支持3MS广告可见度"><a href="#1-3-1-支持3MS广告可见度" class="headerlink" title="1.3.1 支持3MS广告可见度"></a>1.3.1 支持3MS广告可见度</h4><p>本SafeFrames规范用于与其它行业举措周围的广告能见度对齐和提高广告度量的质量，即使测量有意义（3MS，Making Measurements Make Sense）的倡议。自从SafeFrame1.0发布，广告能见度仍在测试，而且正式的推荐标准尚未建立。正如同行业中建立和采用SafeFrames和3MS能见度推荐标准，更新的SafeFrame可以更无缝地支持3MS的推荐标准。</p>
<p>在这之前，SafeFrame1.0提供几何值，让网站和外部方可以用于确定有多少内容在视图中。网站与外部各方应合作，并且为了声明一个”可见度”展视，就应该有多少内容在视图中达成协议。</p>
<h4 id="1-3-2-可见度特性对外部方可选"><a href="#1-3-2-可见度特性对外部方可选" class="headerlink" title="1.3.2 可见度特性对外部方可选"></a>1.3.2 可见度特性对外部方可选</h4><p>SafeFrames框架允许外部内容通过调用<code>$sf.ext.inVewPercentage</code>方法确定它是否在视图中。此特性，与所有的SafeFrame特性，对投放内容到网站的外部方是可选的。但是，无论何时外部方请求网站提供能见度数据，它都要提供。</p>
<h3 id="1-4-SafeFrames和视频插播广告"><a href="#1-4-SafeFrames和视频插播广告" class="headerlink" title="1.4 SafeFrames和视频插播广告"></a>1.4 SafeFrames和视频插播广告</h3><p>SafeFrame的不是为了插播视频广告而设计的，但在一个VAST标签投放的插播横幅广告可以投放到SafeFrames。IAB的视频套件将需要更新以完全支持SafeFrame渲染，但视频发布商已经可以使用SafeFrame来代替他们的视频网页上使用的任何内部框架。</p>
<p>任何指定为一个iframe资源的VAST横幅广告可以渲染在SafeFrame内。为了确保VAST插播横幅广告可以投放到SafeFrame，外部方必须指定创造性的资源作为一个iframe。任何包含在VAST插播横幅广告内容的SafeFrame协议可以被任何支持SafeFrame1.0的视频发布商使用。</p>
<p>一个SafeFrame内渲染VPAID（Video Player-Ad Interface Definition）内容的可能性存在，但是实施解决方案需要来自视频网站与外部方的修改。直到IAB VSuite被更新以更容易支持SafeFrame，使用SafeFrame渲染VPAID内容的技术操作必须由愿意执行解决方案的各方加以解决。</p>
<h3 id="1-5-SafeFrames和移动端"><a href="#1-5-SafeFrames和移动端" class="headerlink" title="1.5 SafeFrames和移动端"></a>1.5 SafeFrames和移动端</h3><p>在网页呈现的任何的SafeFrame内容也可以像网页一样在移动设备呈现。基于浏览器的Web应用，包括那些专为移动端设计的，也能充分地从SafeFrame实施中获益。然而，虽然SafeFrame可以在非浏览器应用程序中运作，如那些专门为移动设备（本地应用程序）开发的，但是SafeFrame1.0没有非浏览器支持的详细信息，这些信息将被考虑进未来的SafeFrame发布中。</p>
<h3 id="1-6-报告SafeFrame的数据"><a href="#1-6-报告SafeFrame的数据" class="headerlink" title="1.6 报告SafeFrame的数据"></a>1.6 报告SafeFrame的数据</h3><p>SafeFrame1.0为您提供可以在报表中使用的数据，但是使用SafeFrame报告数据的机制还没完成。报告系统必须配置为收集和以收件人期望的格式报告SafeFrame数据。</p>
<h3 id="1-7-区别于其他规范"><a href="#1-7-区别于其他规范" class="headerlink" title="1.7 区别于其他规范"></a>1.7 区别于其他规范</h3><p>IAB的SafeFrame解决其他IAB规范或指南没有解决的问题。下面的章节帮助从行业里其他解决不同的问题的规范中区分SafeFrame。</p>
<h4 id="1-7-1-IAB友好的iframe"><a href="#1-7-1-IAB友好的iframe" class="headerlink" title="1.7.1 IAB友好的iframe"></a>1.7.1 IAB友好的iframe</h4><p>IAB的SafeFrame规范跟IAB那些记录了”在异步广告环境中富媒体广告的最佳示例”的友好的iframe不同。</p>
<p>IAB的友好iframe的最佳示例是用来支持使用JavaScript调用的富媒体广告，不像AJAX那样使用动态编码框架。使用易用的iframe，来自广告服务器的内容像网站内容一样渲染到一个来源于同一服务器的frame。</p>
<p>虽然友好的iframe解决方案解决了跨平台的障碍，以支持某些富媒体格式，但是它没有把外部内容从网站内容中隔离。在易用的iframe里的富媒体内容像网站的一样，直接由同一个服务器提供。</p>
<p>相反地，SafeFrame实现了网站和外部内容之间的隔离，并且提供了一个API来让控制和透明相互作用成为可能，同时为网站提供安全性和稳定性控制的最小层。使用SafeFrame时，广告内容是由一个中性域提供，而不是与网站内容一样来自于相同的来源。只允许通过SafeFrame指南中指定的API访问该广告内容被最终渲染的网站域。</p>
<p>SafeFrame指南删除了许多与投放富媒体到来源于网站的iframe相关的安全风险。SafeFrame API也允许主机和广告内容之间更加透明，以及对丰富的互动有更多的控制和监控工具。该新增的控制也保证了富媒体的更好的渲染能力。</p>
<h4 id="1-7-2-跨源资源共享（CORS）"><a href="#1-7-2-跨源资源共享（CORS）" class="headerlink" title="1.7.2 跨源资源共享（CORS）"></a>1.7.2 跨源资源共享（CORS）</h4><p>跨源资源共享（CORS，Cross Origin Resource Sharing）是一种用于实现跨域的HTTP请求的机制。如果没有CORS，同源策略（the Same Origin Policy）就会阻止一个域的嵌入代码请求来自另一个域的潜在的破坏性的内容。对于良性的内容如图像存在例外。</p>
<p>不幸的是，同源策略阻止内容，比如富媒体广告，请求脚本文件以支持正确的渲染和互动。利用CORS，内容可以让浏览器对信任域进行跨域请求。虽然这个解决方案是有效的，但是它也赋予外部内容对网站的完全访问权限，使外部内容有权不需网站知晓就访问和更改网站内容。</p>
<p>CORS只能管理一个域名是否可以请求另一个;它不能管理这两个之间的相互作用。</p>
<p>另一种解决方案是把内容投放到iframe中。在此解决方案中，内容是在提供内容的外部服务器中进行处理。但有了这个解决方案，所有对网站的访问都被拒绝，禁止与外部内容的任何丰富的互动。</p>
<p>综上所述，CORS不能控制被请求的内容可以访问什么，而一个标准的iframe又禁止任何的访问。</p>
<p>同时使用iframe和API，SafeFrame实现了网站和外部提供的内容之间丰富的互动，同时允许控制对网站信息的访问。</p>
<h3 id="1-8-超出范围的项-Out-of-Scope"><a href="#1-8-超出范围的项-Out-of-Scope" class="headerlink" title="1.8 超出范围的项(Out of Scope)"></a>1.8 超出范围的项(Out of Scope)</h3><p>在本规范中，下列项是超出范围的：</p>
<ul>
<li><p><strong>读取/检索外部内容</strong><br>SafeFrame不指定如何检索外部内容。一旦检索，外部内容就作为一个字符串或URI和网站选择使用的任何元数据，被放入SafeFrame<code>$sf.host.Position</code>对象中。</p>
</li>
<li><p><strong>为了特定实现的附加功能</strong><br>对比起其他的创建，操纵和管理一个容器，SafeFrame没有定义任何对象，方法，或者其他属性。进一步的功能，例如额外的安全性，UI元素等可能会被加入到未来的版本中，但不会作为SafeFrame1.0的一部分。</p>
</li>
<li><p><strong>基于非浏览器的实现</strong><br>SafeFrame的这个版本仅限于JavaScript的格式，基于浏览器的实现。SafeFrame1.0可以在应用内发挥作用，如那些在移动设备（本机），但是对于非基于浏览器实现的细则未包括在SafeFrames的这个版本中。它支持基于浏览器的应用程序，移动设备和任何其他设备。</p>
</li>
</ul>
<h3 id="1-9-操作注意事项"><a href="#1-9-操作注意事项" class="headerlink" title="1.9 操作注意事项"></a>1.9 操作注意事项</h3><p>使用SafeFrames可能会改变某些熟悉操作。在实施SafeFrames之前，请考虑以下的一些操作效果，并确定你的技术和过程是否需要做出任何修改，以利用SafeFrame的优势。</p>
<p>以下的考虑情况旨在提供一个用于实现分析的起点。可能需要进一步的评估和测试，以确保顺利实施和过渡。</p>
<ul>
<li><p><strong>上下文展示广告</strong><br>以编程方式投放基于网页内容的广告的广告代码，访问网页数据，以识别它显示的内容类型，然后投放适合于内容的广告。使用SafeFrames，因为广告代码不能直接访问主机页面，网站API必须传递这个数据给广告代码。<br>该广告代码提供者应与网站页面所有者（发布者）洽谈，为了广告代码提供者投放上下文展示广告，应该传递哪些信息。<br>欲了解更多信息，请参阅第5.8节有关<code>$sf.ext.meta</code>功能的详细信息。</p>
</li>
<li><p><strong>访问网站URL</strong><br>当外部方内容使用iframe最初加载到一个网站站点时，HTTP头一般标识URL为网站站点，但不是很准确。由于SafeFrame是一个iframe，这种URL不准确的情况也发生在SafeFrame。为了获取准确的主机URL，在JavaScript中使用document.referrer属性，正如你在一个标准的iframe中会做的一样。</p>
</li>
<li><p><strong>设置Cookies</strong><br>使用SafeFrame，外部内容在SafeFrame域内被渲染，这与网站域不同。Cookies可以在这个二级域名中被设置和读取，但网站必须声明是否支持<code>$sf.ext.cookie</code>功能。此外，即使支持cookie的读写能力，网站控制何时及向谁共享Cookie数据。如果外部内容需要设置和直接在网站域读取cookie，这个访问必须与网站页面所有者进行谈判协商。</p>
</li>
<li><p><strong>第三方数据</strong><br>使用SafeFrames的API，从网站（host）域共享的任何数据是由网站提供的。在商业模式，一个第三方代表另一方从网站收集数据，在一个SafeFrame实施的第三方必须依赖由网站（第一方）提供的数据，而不是直接收集。<br>当第一方提供的数据可能会提高人们对数据完整性的关注，被共享的数据被用于正确呈现提供的内容。共享不正确的数据违背了主机的最高利益，因为这可能会导致不正确的渲染和互动，这与会干扰网站的页面内容。此外，实施SafeFrames的网站所有者可以被审核，以确保整个的SafeFrame API共享数据的完整性。</p>
</li>
<li><p><strong>支持未知尺寸的广告内容</strong><br>有些广告投放模式涉及，在不知道哪个广告会被投放和什么时候调用的详细信息的情况下，对于特定的一套标准的广告分配广告空间。在这些情况下，在调用该广告的时候，宽度和高度是是未知的。SafeFrame1.0不直接支持这种模式，但可以使用现有的SafeFrame功能与对“推送”扩展技术的支持相结合来支持。<br>如果主机声明对推送扩展技术的支持，通过使用<code>$sf.ext.expand</code>功能以扩展SafeFrame容器来提供可以调整为更大实际尺寸的原始尺寸，未知的尺寸的广告内容可以被接受。当在这种情况下扩张，但使用覆盖扩展方法是一种选择的时候，推送方法，如果支持的话，是最佳的方法。</p>
</li>
</ul>
<p>其他的技术和工艺，可能需要修改，以适应SafeFrame的操作。SafeFrame上线之前，请考虑运行一个深入的分析和进行产品测试。</p>
<h2 id="2-网站实施"><a href="#2-网站实施" class="headerlink" title="2. 网站实施"></a>2. 网站实施</h2><p>在一个基于SafeFrame实施的浏览器，API的网站端用JavaScript编写，并且必须提供所定义的在章到中列出的函数和命名空间列表。基于实现的浏览器的机制是使用一个iframe标签来创建外部内容的容器，伴随着额外的JavaScript代码，以促进功能和与外部内容的通信。</p>
<p>浏览器根据他们所支持的功能等级分级。A级浏览器是已知的，有能力的，现代的，和常见的。所有使用JavaScript激活A级浏览器应予支持。C-＆X级浏览器是较为少见，能力较差，和过时的。网站方可能在斟酌下决定支持这些浏览器。SafeFrame的主要依靠HTML5“postMessage”函数作为低级别的iframe和网站之间的通信手段。而postMessage函数提供了最佳的性能，其它机制可以用于促进两方之间的通信，特别是在C-＆X分级浏览器的情况中。</p>
<p>有关HTML5 PostMessage函数的更多信息，请访问：<br><a href="http://dev.w3.org/html5/postmsg/#posting-messages" target="_blank" rel="external">http://dev.w3.org/html5/postmsg/#posting-messages</a></p>
<h3 id="2-1-SafeFrames是如何运作的"><a href="#2-1-SafeFrames是如何运作的" class="headerlink" title="2.1 SafeFrames是如何运作的"></a>2.1 SafeFrames是如何运作的</h3><p>SafeFrame的目标是提供将内容从外部源（外部内容）传递到一个SafeFrame容器和渲染到网站站点上。外部内容可以通过以下两种方式之一传递：</p>
<p><strong>传递模式A：网站代码转换外部内容，并渲染在SafeFrame中</strong><br>当浏览器联系网站网络服务器，网站可以从自己的后台系统检索外部内容。在这种传递方式，网站可以使用由SafeFrame实例渲染的SafeFrame标签，转换外部内容到内联的JavaScript结构。</p>
<p><strong>传递模式B：外部内容被直接传递到SafeFrame</strong><br>网站可能没有机制去在自己的网络服务器上转换外部内容。在这种传送模式，它们仍然提供相同类型的内联JavaScript结构与SafeFrame标记，但是它们给内容提供一个URL，而不是直接放置外部内容到该结构。在这种情况下，使用SCRIPT标签和指定的URL把外部内容直接输送到SafeFrame容器中。</p>
<p>下面的章节详细描述了这两个过程。</p>
<h4 id="2-1-1-传递模式A：网站转换外部内容"><a href="#2-1-1-传递模式A：网站转换外部内容" class="headerlink" title="2.1.1 传递模式A：网站转换外部内容"></a>2.1.1 传递模式A：网站转换外部内容</h4><p>下图说明了使用传递模式A传递外部内容到SafeFrame容器的过程</p>
<p><img src="http://119.29.142.213/static/201608/sf3.png" alt="图2-1"></p>
<ol>
<li><strong>内容请求：</strong>当最终用户访问网站时，浏览器向网站服务器请求内容。</li>
<li><strong>外部内容请求：</strong>网站向外部服务器请求内容数据。</li>
<li><strong>外部方传递：</strong>外部方将HTML内容作为数据传递</li>
<li><strong>SafeFrame标签：</strong>网站网站转换外部内容数据以使用SafeFrame标签将其投放到SafeFrame容器</li>
<li><strong>内容隔离：</strong>网站内容与外部内容隔离</li>
<li><strong>内容传递：</strong>网站内容，伴随着包裹在一个SafeFrame容器的外部内容，被投放到浏览器。</li>
<li><strong>浏览器处理SafeFrame：</strong>浏览器使用来自被传递的网站内容的SafeFrame指令，来处理网站内容和外部内容之间的互动。</li>
</ol>
<h4 id="2-1-2-传递模式B：外部内容直接传递"><a href="#2-1-2-传递模式B：外部内容直接传递" class="headerlink" title="2.1.2 传递模式B：外部内容直接传递"></a>2.1.2 传递模式B：外部内容直接传递</h4><p>下图展示了使用传递模式B传递外部内容到SafeFrame容器的过程</p>
<p><img src="http://119.29.142.213/static/201608/sf4.png" alt="图2-2"></p>
<ol>
<li><strong>内容请求：</strong>当最终用户访问网站时，浏览器向网站服务器请求内容。</li>
<li><strong>网站内容传递：</strong>网站传递它的站点的HTML内容，伴随着SafeFrame的指令和指向外部内容的URL。</li>
<li><strong>浏览器处理SafeFrame：</strong>浏览器使用来自被传递的网站内容的SafeFrame指令，来处理网站内容和外部内容之间的互动。</li>
<li><strong>外部请求：</strong>浏览器使用网站提供的URL向外部服务器请求内容。</li>
<li><strong>外部内容请求：</strong>被请求的外部内容直接传递到SafeFrame iframe中。</li>
</ol>
<h4 id="2-1-3-渲染SafeFrame"><a href="#2-1-3-渲染SafeFrame" class="headerlink" title="2.1.3 渲染SafeFrame"></a>2.1.3 渲染SafeFrame</h4><p> 在部分2.1.1和2.1.2的图片分别说明传递模式A和传递模式B之间的差异。下面的图描述在一个高层次，浏览器如何使用网站服务器发送来的SafeFrame指令初始化SafeFrame API和在其中渲染外部内容。</p>
<p><img src="http://119.29.142.213/static/201608/sf5.png" alt="图2-3"></p>
<ol>
<li><strong>获取SafeFrame：</strong>浏览器从网站服务器接收指令后，浏览器从一个二级域名请求和接收SafeFrame。</li>
<li><strong>配置SafeFrame：</strong>浏览器初始化从host库访问的SafeFrame代码。使用SafeFrame类<code>$sf.host.Position</code>，确定传递模式，因为要么包括HTML外部内容（传递模式A）要么引用一个URL（传递模式B）。SafeFrame函数<code>$sf.host.render()</code>随后用于渲染iframe。</li>
<li><strong>创建IFRAME：</strong>：iframe随后在二级域名被创建。如果外部内容是使用传递模式A传递的，内容数据将与iframe被载入。</li>
<li><strong>加载iframe：</strong>iframe被加载（如果使用传递模式B传递，则伴随着外部内容）到host库。</li>
<li><strong>API初始化：</strong>SafeFrame API被初始化，而且如果使用传递模式A传递，则外部内容被渲染。</li>
<li><strong>外部内容请求（模式B）：</strong>如果外部内容使用传递模式B传递，则SafeFrame内提供的URL被用于向外部服务器请求内容。</li>
<li><strong>外部内容渲染（模式B）：</strong>在SafeFrame iframe中外部内容被传递和渲染。</li>
</ol>
<h4 id="2-1-4通过API进行页内通讯"><a href="#2-1-4通过API进行页内通讯" class="headerlink" title="2.1.4通过API进行页内通讯"></a>2.1.4通过API进行页内通讯</h4><p> 下图说明了网站与外部方内容之间的通信是怎么启动的。</p>
<p> <img src="http://119.29.142.213/static/201608/sf6.png" alt="图2-4"></p>
<ol>
<li><strong>接收外部内容（作为数据）：</strong>浏览器接收外部方数据，作为渲染在网站页面的内容。</li>
<li><strong>API初始化：</strong>使用SafeFrame的类<code>$sf.host.Position</code>，网页创建一个接收的外部数据的容器，然后配置的SafeFrame网站API。</li>
<li><strong>外部内容渲染：</strong>：外部方数据在SafeFrame中渲染为内容。</li>
<li><strong>通信：</strong>通讯：一旦外部内容被渲染，如果付诸实施，它可以使用SafeFrame外部API代码，以调用网站API。</li>
</ol>
<h3 id="2-2要求"><a href="#2-2要求" class="headerlink" title="2.2要求"></a>2.2要求</h3><p> 下面的章节描述实施SafeFrame的要求。</p>
<h4 id="2-2-1-JavaScript-host库和API"><a href="#2-2-1-JavaScript-host库和API" class="headerlink" title="2.2.1 JavaScript host库和API"></a>2.2.1 JavaScript host库和API</h4><p> JavaScript的host库和API是用来控制和渲染SafeFrame容器的。该库提供了命名空间，类和函数，这些将在第4章中进一步描述。</p>
<blockquote>
<p><strong>网站实施注意事项</strong><br>一个SafeFrame可能包括：一个网页视图（移动端），一个嵌入式浏览器，一个HTA（微软HTML应用程序），或原用户的Web浏览器。</p>
</blockquote>
<h4 id="2-2-2-二级域名"><a href="#2-2-2-二级域名" class="headerlink" title="2.2.2 二级域名"></a>2.2.2 二级域名</h4><p>通过创建一个比起网站页面具有不同的来源，主机名和域名的iframe，SafeFrame 网站 API创建，渲染并管理外部方HTML内容。这种二级域名创建了一个”跨域屏障”，防止外部方的HTML和JavaScript直接访问网站页面的任何东西。</p>
<p>Web浏览器遵循”同源”政策，即来自2个不同来源的代码不允许进行通信（有一些例外）。因此，网站<em>必须</em>有一个二级域名，从那里可以投放SafeFrame资源。使用CDN（内容分发网络）可以提供二级域名。</p>
<h4 id="2-2-3-资源公约"><a href="#2-2-3-资源公约" class="headerlink" title="2.2.3 资源公约"></a>2.2.3 资源公约</h4><p>对于网站，SafeFrame的定义2种类型的资源：基于渲染的文件和JavaScript文件。</p>
<p><strong>基本HTML文件（静态HTML文件）</strong></p>
<p>HTML文件是用来提供一个外部方HTML内容渲染成的基础级的HTML文档。在不支持HTML5报信的情况下，HTML文件还可以被用来充当代理，以促进在网站和外部方之间发送消息。</p>
<p>与SafeFrame一起使用的HTML文件必须遵循以下约定：</p>
<ul>
<li>浏览器和代理也必须能够公开缓存HTML文件</li>
<li>一个以上的HTML文件可以被用于渲染，以提供额外的功能。</li>
<li>所有的渲染HTML文件必须包括对外方API功能的支持，以渲染外部内容。</li>
<li>用于渲染的HTML文件必须首先包含SafeFrame外部方JavaScript库。</li>
</ul>
<p><strong>JavaScript文件</strong><br>网站的SafeFrame API用JavaScript实现，而且必须遵守以下公约：</p>
<ul>
<li>SafeFrame API JavaScript文件必须是静态的。</li>
<li>外部方API总是用JavaScript实现。</li>
<li>也必须允许浏览器和代理公开缓存所有提供的文件。</li>
</ul>
<h4 id="2-2-4-SafeFrame的URI公约"><a href="#2-2-4-SafeFrame的URI公约" class="headerlink" title="2.2.4 SafeFrame的URI公约"></a>2.2.4 SafeFrame的URI公约</h4><p>因为浏览器和代理必须能够缓存JavaScript和HTML资源文件，这些文件应该只因新版本的发行而改变，而且用于访问文件的URI不能包含查询字符串参数或任何会让浏览器或代理不缓存文件的东西。</p>
<p>版本一致性必须得到维护。例如，对于版本2-2-0的HTML资源不应该被提供给一个版本2-3-5的JavaScript实例。版本一致性必须得到维护。例如，对于版本2-2-0 HTML资源不应该被提供给一个JavaScript实现版本2-3-5的。（注：原规范中，这两句话重复了）</p>
<p>以下SafeFrame的访问网站资源的的URI格式，实现了静态URI的使用和资源范围内的相对路径。</p>
<p><img src="http://119.29.142.213/static/201608/sf7.png" alt="图2-5"></p>
<p>用于访问SafeFrame资源的URI的部分完全是由网站定义的，但必须按指定的顺序提供并按下面的细节描述：</p>
<ol>
<li>协议 (例如http, https等等) </li>
<li>二级域名（和端口，如果适用的话）</li>
<li>通向SafeFrame资源的根路径（允许多个目录，用/分隔）</li>
<li>SafeFrame的版本号，格式为“N-N-N”</li>
<li>小写的“html”表示HTML文件或小写的“JS”表示JavaScript文件（其他资源类型可能包含在未来发布的SafeFrame）</li>
<li>文件名称</li>
</ol>
<h3 id="2-3-实现注意事项"><a href="#2-3-实现注意事项" class="headerlink" title="2.3 实现注意事项"></a>2.3 实现注意事项</h3><p>下面的说明对于网站实现SafeFrame来说是重要的。</p>
<p><strong>SafeFrame和iframe嵌套</strong><br>SafeFrame容器总是在顶层HTML文档中呈现。一个SafeFrame的容器不能在另一个容器的SafeFrame内呈现。如果SafeFrame 网站 API创建的iframe是作为浏览器执行的网站顶层HTML的一部分呈现的话，它只能与外部HTML内容通信。SafeFrame的JavaScript代码必须能够检测不正确的嵌套。</p>
<p>鉴于以下不当嵌套的情况，SafeFrame的JavaScript代码应该采取下面对应的行动。</p>
<ol>
<li>SafeFrame网站的JavaScript代码加载到一个iframe：<br>a. SafeFrame网站的JavaScript的命名空间是无效的。<br>b. 一个且只有一个调用函数<code>$sf.host.boot</code>是允许的，这样类<code>$sf.host.Position</code>对象的内容就可以呈现了。<br>c. SafeFrame的JavaScript代码将不会遵守且不会处理配置调用（请参阅类<code>$sf.host.Config</code>和类<code>$sf.host.PosConfig</code>）。<br>d. SafeFrame的JavaScript代码将不会遵守且不会处理一个iframe中的SafeFrame标签中定义的元数据。</li>
<li>SafeFrame标签（见第3章）放置在iframe里面：<br>a. SafeFrame的JavaScript代码将解析和读取SafeFrame标签以检索内容。<br>b. SafeFrame的JavaScript代码将渲染内容<br>c. SafeFrame的JavaScript代码将不会遵守且不会处理配置调用（请参阅类<code>$sf.host.Config</code>和类<code>$sf.host.PosConfig</code>）。<br>d. SafeFrame的JavaScript代码将不会遵守且不会处理一个iframe中的SafeFrame标签中定义的元数据。<br>e. 如果提供的iframe是一个SafeFrame容器，那么内容伴随着自己的JavaScript代码被渲染，并可以访问外部方的SafeFrame API。</li>
</ol>
<p><strong>SafeFrame JavaScript库</strong><br>SafeFrame容器总是包含一个JavaScript库，它响应SafeFrame网站JavaScript库，并且总是包含在HTML渲染文件的第一个JavaScript文件。</p>
<p><strong>SafeFrame HTML管理</strong><br>SafeFrame管理所有它创建的HTML元素。无论是网站还是外部方都不应该试图操纵该SafeFrame创建和管理的HTML节点。这样做会意料不到地损坏接口。</p>
<p>SafeFrame可能会为它控制的HTML元素增加一个CSS类，但网站和外部方应避免为以下的CSS类名添加CSS规则或选择器：</p>
<ul>
<li><strong>sf_data: </strong>用于表示包含要渲染的数据的内嵌SafeFram元素</li>
<li><strong>sf_position: </strong>用于表示一个被渲染的SafeFrame容器的起始HTML元素树</li>
<li><strong>sf_lib: </strong>用于表示包含SafeFrame JavaScript代码的SCRIPT HTML元素。</li>
<li><strong>sf_el: </strong>一般用来表示由SafeFrame的JavaScript代码保持的其他HTML元素</li>
</ul>
<p><strong>递交内容到的SafeFrame网站API以渲染</strong><br>除了配置递送到SafeFrame容器的外部内容，网站应核实相关内容是以一个可以接受的形式给API去处理。网站页面接收外部内容作为原始的HTML或认为的作为一个SafeFrame必须获取和在其渲染的URL。</p>
<p>在这两种情况下，SafeFrame都使用JavaScript来处理信息。原始HTML内容可能需要在发送到SafeFrame之前进行编码。虽然不需要调整URL，外部方应知道一个JavaScript的响应对于渲染和添加内容到SafeFrame容器是必要的。</p>
<p>下面的实施注意事项提供更多的细节，且与第2.1节讨论的两个传递模式相对应。</p>
<ul>
<li><p><strong>原始的HTML作为JavaScript字符串（传递模式A）</strong><br>由于JavaScript处理某些字符和SCRIPT标签时不同于HTML，网站可能必须在发送给SafeFrame API处理之前，修改任何原始的HTML内容。<br>例如，下面的HTML字符串被当做JavaScript处理时，会产生一个语法错误：</p>
<figure class="highlight plain"><figcaption><span>type="text/javascript"> document.write('Hello "Dave"');</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>为了使上述HTML字符串在SafeFrame API中正常被处理，必须重写格式如下：</p>
<figure class="highlight plain"><figcaption><span>html = "<scr"+"ipt type="\"text\/javascript\""> </scr"+"ipt></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(&apos;Hello \&quot;Dave\&quot;&apos;); &lt;/scr&quot;+&quot;ipt&gt;&quot;;</div></pre></td></tr></table></figure>
<p>以上的JavaScript格式的HTML字符串可以在SafeFrame<code>$sf.host.Position</code>对象中正常运行。</p>
</li>
<li><p><strong>使用URL来获取第三方内容（传递模式B）</strong><br>主机可以提供一个URL到外部内容，而不是提供所述HTML内容本身。在此情况下，网站页面不能直接把外部内容渲染到的SafeFrame<code>$sf.host.Position</code>对象，给SafeFrame去获取和渲染在容器中的内容。<br>由于网页不能编码外部内容使其在SafeFrame中处理，从SafeFrame的请求得到的响应应该是JavaScript格式的。一旦生成SafeFrame容器，外部内容的URL响应的SCRIPT标签产生，并且可以传递附加内容。使用一个SCRIPT标签，所以从被提供的URL传递的内容可以在SafeFrame的容器内访问外部的API，而不是使用一个嵌套的iframe标签。</p>
<blockquote>
<p><strong>外部方实施注意事项</strong><br>虽然外部方HTML内容可能使用其他的iframe标签，因为“同源”政策，在额外的iframe标记内的任何内容被禁止访问API。有关更多信息，请参阅第3章的SafeFrame标签</p>
</blockquote>
</li>
</ul>
<h3 id="2-4-SafeFrame的渲染细节"><a href="#2-4-SafeFrame的渲染细节" class="headerlink" title="2.4 SafeFrame的渲染细节"></a>2.4 SafeFrame的渲染细节</h3><p>网站JavaScript库插入一个HTML iframe元素到网站页面。网站API控制渲染过程，以也控制外部内容在iframe中渲染。</p>
<p>iframe使用以下的指南被创建：</p>
<p><strong><code>src</code>属性</strong><br>iframe的”src”属性是指向一个静态的，公开缓存的HTML文件的URL。所提供的URL必须来自一个不同于作为典型的内容分发网络（CDN）的网站域。</p>
<p><strong><code>name</code>属性</strong><br>iframe的”name”属性必须包含数据的序列化字符串，包含这些的配置属性：一个特定的SafeFrame位置的配置，元数据和渲染的内容。</p>
<p>在name属性中使用数据字符串使单向的，同步的消息传递，使得HTML文件中的JavaScript代码可以：读取相应的<code>window.name</code>属性，反序列化数据的字符串，设置外部第三方内容的环境，最后渲染内容。</p>
<p>这种技术允许包含JavaScript的<code>document.write</code>命令的HTML <code>SCRIPT</code>标签能够正常工作。</p>
<p><strong><code>Width</code>和<code>Height</code>属性</strong><br>iframe的宽度和高度需要被设置为在<code>$sf.host.PosConfig</code>对象中的w和h字段中给出的相同的值。典型地，iframe的宽度和高度应与渲染的内容的已知宽度和高度匹配。</p>
<p><strong><code>SCRIPT</code>标签</strong><br>一个<code>SCRIPT</code>标签应创建在创建的iframe中的HTML文档中存在。这个<code>SCRIPT</code>标签是第一个，最初的在HTML文档中以数据形式读取以进行处理并渲染的JavaScript。一个访问JavaScirpt文件的相关的URL可以备用，只要版本保持一致性（欲知更多关于URL在SafeFrame中的公约，请查阅节2.2.4）。</p>
<p>此JavaScript文件必须执行以下操作（按顺序）：</p>
<ol>
<li>请检查HTML文档是直接在顶级HTML文档的（是它的一个孩子）。如果不是，应产出一个错误，并且没有任何内容被渲染。</li>
<li>读取和反序列化在<code>window.name</code>属性中传递的数据。</li>
<li>验证传递到<code>window.name</code>属性的数据，它通常是通过，确保反序列化对象包含所有必需的信息，包括GUID，来完成验证。如果验证失败，应产出一个错误，并且没有任何内容被渲染。</li>
<li>设置<code>window.name</code>属性为空字符串（””），使外部方不能在这上读取数据。</li>
<li>初始化发送跨域邮件到网站的SafeFrame的JavaScript的能力。</li>
<li>附加任何额外的标记和<code>name</code>属性中传递的元数据。</li>
<li>附加任何专有的逻辑，事件处理程序或其他细节到HTML文档（如<code>onload</code>事件）。</li>
<li>渲染外部内容。</li>
</ol>
<p>HTML文件应该包含以下内容：</p>
<ul>
<li>CSS规则：设置文档中的<code>BODY</code>元素的margin和padding为0px。</li>
<li>一个单一的，绝对定位的<code>DIV</code>元素，作为<code>BODY</code>元素的直系子结点，最初位于top 0，left 0。这个元素在外部第三方内容希望在给定方向扩展的情况下被使用，以便能够保持正确的对齐。</li>
<li>一个单一的，<code>SCRIPT</code>元素，放置在给定的<code>DIV</code>元素，其中包含上面第4节的逻辑。该<code>SCRIPT</code>可能来自外部源，或者可能定义成内联。<br>例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"> </span></div><div class="line">     BODY &#123; margin:0px; padding:0px &#125; </div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">body</span> <span class="attr">scroll</span>=<span class="string">"no"</span>&gt;</span> </div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sf_align"</span> <span class="attr">style</span>=<span class="string">"position:absolute;top:0px;left:0px;"</span> <span class="attr">class</span>=<span class="string">"sf_el"</span>&gt;</span> </div><div class="line">      		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/ext.js"</span> <span class="attr">class</span>=<span class="string">"sf_lib"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-5-通信机制的细节"><a href="#2-5-通信机制的细节" class="headerlink" title="2.5 通信机制的细节"></a>2.5 通信机制的细节</h3><p>为了促进一个的SafeFrame容器内的网站和外部方之间高性能，安全的通信，HTML5的”postMessage”函数是所使用的主要方法。此方法允许实施者，从一个HTML文档发送一个字符串到另一个来源于另一个地方的HTML文档，从而绕过“同源”政策。外部内容被阻止调用此相同的方法去意图欺骗网站API因为消息（发送的字符串）被验证成功而做些错误的或恶意的事情。</p>
<p>有关W3C同源策略的更多信息，请访问：<br><a href="http://en.wikipedia.org/wiki/Same_origin_policy" target="_blank" rel="external">http://en.wikipedia.org/wiki/Same_origin_policy</a></p>
<p>每当从容器收到信息，采取以下的步骤来确保它是被允许的：</p>
<ol>
<li><strong>二级域名/检查来源</strong><br>从外部HTML内容发来的一个消息的原始域，应该与用于创建SafeFrame容器的<code>$sf.host.Config</code>类的<code>renderFile</code>字段中传递的URL的域相吻合。如果起源不吻合，消息就会被忽略。</li>
<li>检查GUID<br>一个GUID被定义为，SafeFrame容器被渲染和应该与外部API传递的任何信息包含在一起的情况。当提供的GUID不存在或者未知时，则忽略该消息。</li>
<li>检查 HTML window对象的引用<br>外部方对象的window引用源应该指向一个当SafeFrame被渲染时创建的iframe窗口引用。如果对象的窗口参考不匹配，已经呈现的任何已知的SafeFrame容器，则忽略该消息。</li>
<li>处理序列消息<br>消息在先来的、先被发出的基础上被处理，而且应该总是尝试表示成功或失败的响应。</li>
</ol>
<h2 id="3-SafeFrame-标签"><a href="#3-SafeFrame-标签" class="headerlink" title="3. SafeFrame 标签"></a>3. SafeFrame 标签</h2><p>SafeFrame标签的高级别目标是封装外部内容数据，以便网站可以管理内容的渲染和控制。以下各节描述SafeFrame标签，如何构建它们，以及如何处理它们。</p>
<h3 id="3-1-SafeFrame-标签结构-amp-要求"><a href="#3-1-SafeFrame-标签结构-amp-要求" class="headerlink" title="3.1 SafeFrame 标签结构&amp;要求"></a>3.1 SafeFrame 标签结构&amp;要求</h3><p>一个SafeFrame的标签是标准化的一组HTML标签。它必须由下列元素构成：</p>
<ul>
<li>与主机配置内联提供的，包含外部内容的元数据的<code>SCRIPT</code>标签。</li>
<li>在<code>SCRIPT</code>标签中处理数据标签的JavaScript</li>
<li>(可选)当不支持JavaScript的时候，HTML上的后退的NOSCRIPT标签。</li>
<li>(可选)指定SafeFrame容器将渲染在哪的DIV标签</li>
</ul>
<p>只有主网站应该在网页内容中插入SafeFrame标签。嵌套的SafeFrame标签不被支持。忽略任何包含在来自交换，中介，代理或任何其它二级出版发布伙伴或供应商的标签中的SafeFrame标签。</p>
<p>如果一个SafeFrame标签渲染在一个已经创建的SafeFrame容器内，渲染过程会假定容器已经创建并跳过以直接渲染外部内容。直接在网站网页上只使用SafeFrame容器确保内容被正确地渲染，数据是共享的，并且该API可以被访问。</p>
<h3 id="3-1-1-SCRIPT标签"><a href="#3-1-1-SCRIPT标签" class="headerlink" title="3.1.1 SCRIPT标签"></a>3.1.1 <code>SCRIPT</code>标签</h3><p><code>SCRIPT</code>标签必须专门构建成与网站内容内嵌，并包括渲染在SafeFrame中的外部第三方内容的数据标签。</p>
<p><code>SCRIPT</code>标签必须包括以下内容：</p>
<ul>
<li>一个带有值为<code>iab_sf_data</code>的属性的类型</li>
<li>type属性设置为text/ X-的SafeFrame</li>
<li><p>一个JavaScript或JSON样的数据结构，是<code>$sf.host.Position</code>和<code>$sf.host.PosConfig</code>的代表。此结构在字面JavaScript语法中定义，并且可能包括被转换成一个<code>$sf.host.PosMeta</code>对象的附加元数据值。</p>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'iab_sf_data'</span>&gt;</span><span class="xml">     </span></div><div class="line">&#123; </div><div class="line">	id: "LREC", // ID of position object        </div><div class="line">	html: "<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>", //3rd party HTML content </div><div class="line">	conf:  </div><div class="line">	&#123; </div><div class="line">		size: "300x250" //The size conf is required and denotes the  </div><div class="line">	&#125; </div><div class="line"> 	meta: //optional shared meta information  </div><div class="line">	&#123; </div><div class="line">		rmx:  </div><div class="line">		 &#123; </div><div class="line">		 	sectionID: "14800347",  </div><div class="line">		 	siteID: "140509"   </div><div class="line">		 &#125;  </div><div class="line">	&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述的<code>SCRIPT</code>标签被定义为这样的原因如下：</p>
<ul>
<li><strong>type=”text/x-safeframe” </strong><br>由于该数据是一个内嵌的JavaScript结构，可能会发生在语法方面的问题，并且如果被当作JavaScript代码可能会损坏网站网页。设置脚本类型为“text/ X-SafeFrame”确保数据结构不被浏览器的JavaScript引擎拾起。</li>
<li><strong>class=”sf_data”</strong><br>在一个<code>SCRIPT</code>标签中，类属性不被处理;然而，指定sf_data类名使SafeFrame 网站API能标识那些它可以待会处理的数据的标签。</li>
</ul>
</li>
</ul>
<h3 id="3-1-2-使用JavaScript处理数据标签"><a href="#3-1-2-使用JavaScript处理数据标签" class="headerlink" title="3.1.2 使用JavaScript处理数据标签"></a>3.1.2 使用JavaScript处理数据标签</h3><p><code>SCRIPT</code>标签必须包含将处理（一个或多个）数据标签的JavaScript代码。第3.1.2.1节至第3.1.2.3节提供了以三种不同的方式来处理数据标签的例子。</p>
<ul>
<li>例子3.1.2.1：一次性处理所有标签</li>
<li>例子3.1.2.2：先定义库</li>
<li>例子3.1.2.3：一次一个地处理标签</li>
</ul>
<h4 id="3-1-2-1-例子：一次性处理所有标签"><a href="#3-1-2-1-例子：一次性处理所有标签" class="headerlink" title="3.1.2.1 例子：一次性处理所有标签"></a>3.1.2.1 例子：一次性处理所有标签</h4><p>当数据标签在伴随<code>$sf.host.boot</code>方法的SafeFrame host库之前，都包含在<code>SCRIPT</code>标签内，host库被加载，并且引导程序找到并渲染代码中引导程序之上列出的数据标签。</p>
<p>下面的例子提供了两个，在加载SafeFrame host库和引导程序的指令之后的SafeFrame的数据标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span>  </div><div class="line">			 </div><div class="line">			<span class="comment">&lt;!-- SafeFrame Inline Tag 1 --&gt;</span>  </div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span>  </div><div class="line">				<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'iab_sf_data'</span>&gt;</span><span class="undefined"> </span></div><div class="line">				&#123;  </div><div class="line">					id: "LREC",  </div><div class="line">					src:  </div><div class="line">					"http://extserver.com/data-tag",  </div><div class="line">					conf:  </div><div class="line">					&#123;  </div><div class="line">						w: 300,  </div><div class="line">						h: 250,  </div><div class="line">						dest: "tgtLREC"  </div><div class="line">					&#125;,  </div><div class="line">					meta:  </div><div class="line">					&#123;  </div><div class="line">						rmx:  </div><div class="line">					 </div><div class="line">						&#123;  </div><div class="line">							sectionID: "14800347",  </div><div class="line">							siteID:  "140509"   </div><div class="line">						&#125;  </div><div class="line">					&#125;  </div><div class="line">				&#125;  </div><div class="line">				<span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line">				<span class="comment">&lt;!-- b/c a "dest" tag exists (the overall div container) container tags will be rendered here --&gt;</span>  </div><div class="line">			 </div><div class="line">				<span class="comment">&lt;!-- optional noscript section for fall back --&gt;</span>  </div><div class="line">				<span class="tag">&lt;<span class="name">noscript</span>&gt;</span>  </div><div class="line">					<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=  <span class="string">"http://ext.server.com/img.gif"</span>  /&gt;</span>  </div><div class="line">				<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span>  </div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </div><div class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span>  </div><div class="line">			 </div><div class="line">			<span class="comment">&lt;!-- SafeFrame Inline Tag 2 --&gt;</span>  </div><div class="line">				<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> </span></div><div class="line">				<span class="attr">class</span>=<span class="string">'iab_sf_data'</span>&gt;<span class="undefined">  </span></div><div class="line">				&#123;  </div><div class="line">					id: "LREC2",  </div><div class="line">					src: "http://externalserver.com/data-</div><div class="line">					tag",  </div><div class="line">					conf:  </div><div class="line">					&#123;  </div><div class="line">						w: 300,  </div><div class="line">						h: 250  </div><div class="line">					&#125;  </div><div class="line">				&#125;  </div><div class="line">				<span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line">			<span class="comment">&lt;!-- b/c a "dest" tag exists (the overall div container) container tags will be rendered here --&gt;</span>  </div><div class="line">			<span class="comment">&lt;!-- optional noscript section for fall back --&gt;</span>  </div><div class="line">				<span class="tag">&lt;<span class="name">noscript</span>&gt;</span>  </div><div class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"http://ext.server.com/img.gif"</span> /&gt;</span>  </div><div class="line">				<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span>  </div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- SafeFrame Host library / API --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'sf-api-boot.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- script code in external file will automatically 'boot' and read data tags --&gt;</span></div><div class="line">```  </div><div class="line"></div><div class="line">#### 3.1.2.2 在数据标签之前先定义SafeFrame host库</div><div class="line">实施一个SafeFrame标签的另一种方法是，先定义host库，然后提供数据标签，最后显式调用`$sf.host.boot`。</div><div class="line"></div><div class="line">下面的例子演示了这种情况可能是如何编码的。</div><div class="line">``` html</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://cdn.example.org/v1/sf-host.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="xml">  </span></div><div class="line">	 </div><div class="line">	<span class="comment">&lt;!-- SafeFrame Host API configuration --&gt;</span>  </div><div class="line">	(function()  </div><div class="line">		&#123;  </div><div class="line">		var pubAPI = $sf.hostpub, conf;   </div><div class="line">		function handle_start_pos_render(id)  </div><div class="line">		&#123;   </div><div class="line">		 </div><div class="line">		&#125;  </div><div class="line">		function handle_end_pos_render(id)  </div><div class="line">		&#123; </div><div class="line">		&#125;  </div><div class="line">		conf = new pubAPI.Config( </div><div class="line">		&#123;  </div><div class="line">			auto: true,  </div><div class="line">			cdn: "http://l.yimg.com",  </div><div class="line">			renderFile: "r.html",  </div><div class="line">			root: "/SafeFrame/v1/html",  </div><div class="line">			ver: "2-3-4",  </div><div class="line">			positions:  </div><div class="line">			&#123;  </div><div class="line">			"LREC":  </div><div class="line">				&#123;  </div><div class="line">				dest:  "tgtLREC",  </div><div class="line">				w: 300,  </div><div class="line">				h: 250  </div><div class="line">				&#125;  </div><div class="line">			&#125;,  </div><div class="line">		onStartPosRender: </div><div class="line">		handle_start_pos_render,  </div><div class="line">		onEndPosRender: handle_end_pos_render  </div><div class="line">		&#125;);   </div><div class="line">	&#125;)();  </div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;</span><span class="undefined">  </span></div><div class="line">	&#123;  </div><div class="line">	id: "LREC",  </div><div class="line">	src: </div><div class="line">	"http://externalserver.com/data-tag",  </div><div class="line">	meta:  </div><div class="line">		&#123;  </div><div class="line">		rmx:  </div><div class="line">			&#123;  </div><div class="line">			sectionID: "14800347",  </div><div class="line">			siteID: "140509"   </div><div class="line">			&#125;  </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	 <span class="comment">&lt;!-- b/c a "dest" tag exists (the overall div </span></div><div class="line">	container) container tags will be rendered here --&gt;  </div><div class="line">	<span class="tag">&lt;<span class="name">noscript</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"http://ext.server.com/img.gif"</span>  </span></div><div class="line">		/&gt;  </div><div class="line">	<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined">  </span></div><div class="line">	$sf.host.boot();  </div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="3-1-2-3-有兄弟标签的SafeFrame数据标签自动引导-Auto-Bootstrapping"><a href="#3-1-2-3-有兄弟标签的SafeFrame数据标签自动引导-Auto-Bootstrapping" class="headerlink" title="3.1.2.3 有兄弟标签的SafeFrame数据标签自动引导(Auto-Bootstrapping)"></a>3.1.2.3 有兄弟标签的SafeFrame数据标签自动引导(Auto-Bootstrapping)</h4><p>在下面的例子中，每个提交的数据变量伴随着一个调用<code>$sf.host.boot</code>以在代码中加载列出的标签的二级标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- SafeFrame Inline Tag 1 --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> </span></div><div class="line">	<span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;<span class="undefined">  </span></div><div class="line">	&#123;  </div><div class="line">	id: "LREC",  </div><div class="line">	src: </div><div class="line">	"http://externalserver.com/da</div><div class="line">	ta-tag",  </div><div class="line">	conf:  </div><div class="line">		&#123;  </div><div class="line">		w: 300,  </div><div class="line">		h: 250,  </div><div class="line">		dest: "tgtLREC"  </div><div class="line">		&#125;,  </div><div class="line">	meta:  </div><div class="line">		&#123;  </div><div class="line">		rmx:  </div><div class="line">		&#123;  </div><div class="line">			sectionID: </div><div class="line">			"14800347",  </div><div class="line">			siteID: "140509"   </div><div class="line">		&#125;  </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line">	<span class="comment">&lt;!-- b/c a "dest" tag exists (the overall </span></div><div class="line">	div container) container tags will be </div><div class="line">	rendered here --&gt;  </div><div class="line">	<span class="comment">&lt;!-- optional noscript section for fall </span></div><div class="line">	back --&gt;  </div><div class="line">	<span class="tag">&lt;<span class="name">noscript</span>&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"http://ext.server.com/img.gif"</span> /&gt;</span>   </div><div class="line">	<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="xml">  </span></div><div class="line">	(function() &#123;  </div><div class="line">		var w = window, s = w["$sf"], </div><div class="line">		b = s &amp;&amp; s.boot;  </div><div class="line">		if (!s) s = w["$sf"] = &#123;&#125;;  </div><div class="line">		if (b &amp;&amp; typeof b == </div><div class="line">		"function") &#123;  </div><div class="line">		try &#123; b(); &#125; catch (e) </div><div class="line">		&#123; &#125;  </div><div class="line">		&#125; else &#123;  </div><div class="line">		document.write("<span class="tag">&lt;<span class="name">scr","ipt</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'sf-host.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">scr","ipt</span>&gt;</span>")</div><div class="line">		;  </div><div class="line">		&#125;  </div><div class="line">	&#125;)();  </div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line">	<span class="comment">&lt;!-- Above script code will only load in </span></div><div class="line">	host library one time, call boot for each </div><div class="line">	tag --&gt;  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span>  </div><div class="line">	<span class="comment">&lt;!-- SafeFrame Inline Tag 2 --&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> </span></div><div class="line">	<span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;<span class="undefined">  </span></div><div class="line">	&#123;  </div><div class="line">	id: "LREC2",  </div><div class="line">	src: </div><div class="line">	"http://externalserver.com/data-tag",  </div><div class="line">	conf:  </div><div class="line">	&#123;  </div><div class="line">		w: 300,  </div><div class="line">		h: 250  </div><div class="line">	&#125;  </div><div class="line">	&#125;  </div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line">	<span class="comment">&lt;!-- b/c a "dest" tag exists (the overall div </span></div><div class="line">	container) container tags will be rendered here </div><div class="line">	--&gt;  </div><div class="line">	<span class="comment">&lt;!-- optional noscript section for fall back --&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">noscript</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"http://ext.server.com/img.gif"</span> /&gt;</span>  </div><div class="line">	<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span>  </div><div class="line"> </div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="xml">  </span></div><div class="line">	(function() &#123;  </div><div class="line">		var w = window, s = w["$sf"], </div><div class="line">		b = s &amp;&amp; s.boot;  </div><div class="line">		if (!s) s = w["$sf"] = &#123;&#125;;  </div><div class="line">		if (b &amp;&amp; typeof b == "function") &#123;   </div><div class="line">		try &#123; b(); &#125; catch (e) </div><div class="line">		&#123; &#125;  </div><div class="line">		&#125; else &#123;  </div><div class="line">		document.write("<span class="tag">&lt;<span class="name">scr","ipt</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'sf-host.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">scr","ipt</span>&gt;</span>");  </div><div class="line">		&#125;  </div><div class="line">	&#125;)();  </div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line">	<span class="comment">&lt;!-- Above script code will only load in host library one time, call boot for each tag --&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="4-网站API实施细则"><a href="#4-网站API实施细则" class="headerlink" title="4. 网站API实施细则"></a>4. 网站API实施细则</h2><p>SafeFrame网站API使用第4.1节至第4.11节到定义的的命名空间，函数，和类。</p>
<h3 id="4-1-命名空间-sf-host"><a href="#4-1-命名空间-sf-host" class="headerlink" title="4.1 命名空间$sf.host"></a>4.1 命名空间<code>$sf.host</code></h3><p>此命名空间用来定义网站网页可以用于与SafeFrame容器交互的JavaScript类，对象和方法。</p>
<p>在<code>$sf.host</code>命名空间是SafeFrame配置，渲染，检查，并与SafeFrame容器互动的SafeFrame起始点。在这个空间中定义的一切都是公开，除非另有被点名的。</p>
<h3 id="4-2-命名空间-sf-host-conf"><a href="#4-2-命名空间-sf-host-conf" class="headerlink" title="4.2 命名空间$sf.host.conf"></a>4.2 命名空间<code>$sf.host.conf</code></h3><p>指定<code>host.conf</code>命名空间内联将允许SafeFrame容器（包括SafeFrame标签）与你指定的配置选项被加载（或引导）。这个对象是<code>$sf.host.Config</code>对象的字面版本(literal version)。</p>
<p><strong>相关章节</strong></p>
<ul>
<li>3 SafeFrame标签</li>
<li>4.4 类 <code>$sf.host.Config</code></li>
</ul>
<p><strong>例子1</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined">    </span></div><div class="line"> </div><div class="line">//JavaScript inline host config, used mainly for SafeFrame tags which want to auto boot the SafeFrame host API and render 3rd party content.    </div><div class="line"> </div><div class="line">var w = window, sf = w["$sf"], pub = sf &amp;&amp; sf.host;   </div><div class="line">if (!sf) sf = w["$sf"] = &#123;&#125;;  </div><div class="line">if (!pub) pub = sf.host = &#123;&#125;;   </div><div class="line"> </div><div class="line">host.conf  =  </div><div class="line">&#123;  </div><div class="line">	debug:    true,  </div><div class="line">	ver:    "2-3-4",  </div><div class="line">	positions:  </div><div class="line">&#123;  </div><div class="line">	LREC:  </div><div class="line">	&#123;  </div><div class="line">		id:   "LREC",  </div><div class="line">		dest:  "tgtLREC",  </div><div class="line">		tgt:  "_self",  </div><div class="line">		w:  300,  </div><div class="line">		h:  250    </div><div class="line">	&#125;  </div><div class="line">&#125;  </div><div class="line">&#125;;      </div><div class="line"> </div><div class="line">//Assuming a SafeFrame tag is placed below this configuration, it will read the config defined and use those values as the logic for the tag.  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>例子2</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- SafeFrame Inline Tag --&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tgtLREC"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;</span><span class="undefined">  </span></div><div class="line">&#123;  </div><div class="line">id:    "LREC",  </div><div class="line">src:"http://ext.server.com/sf",   </div><div class="line">conf:  </div><div class="line">&#123;  </div><div class="line">	dest:  "tgtLREC",  </div><div class="line">	size:  "300x250"  </div><div class="line">&#125;,   </div><div class="line"> </div><div class="line">meta:  </div><div class="line">&#123;    </div><div class="line">	rmx:  </div><div class="line">	&#123;  </div><div class="line">		sectionID:  "14800347",  </div><div class="line">		siteID:  "140509"   </div><div class="line">	&#125;  </div><div class="line">&#125;    </div><div class="line">&#125;    </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined">  </span></div><div class="line">try &#123;  </div><div class="line">	$sf.host.boot();  </div><div class="line">&#125; catch (e) &#123;  &#125;  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-3-命名空间-sf-info"><a href="#4-3-命名空间-sf-info" class="headerlink" title="4.3 命名空间$sf.info"></a>4.3 命名空间<code>$sf.info</code></h3><p>该信息命名空间被保留用于存储有关SafeFrame容器的信息。</p>
<ul>
<li><code>&lt;static&gt; {Array} $sf.info.errs</code><br>包含有关发生在SafeFrame API的网站端的任何错误信息;细节是<strong>只读</strong>的。</li>
<li><code>&lt;static&gt; {Array} $sf.info.list</code><br>包含了关于每个SafeFrame的容器的信息，要么是要渲染的，渲染，要么是正在处理的;细节是<strong>只读</strong>的。</li>
</ul>
<p>无论何时SafeFrame网站API创建一个容器，它会适当地更新这些命名空间字段，允许检查和/或调试当前状态。</p>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="xml">   </span></div><div class="line"> </div><div class="line">(function() &#123;   </div><div class="line"> </div><div class="line">	var w = window, sf = w["$sf"], pub = sf &amp;&amp; sf.host, Config = pub </div><div class="line">	&amp;&amp; host.Config,    </div><div class="line">	 </div><div class="line">	CONF_CDN   = "http://l.yimg.com",  </div><div class="line">	CONF_ROOT   = "/sf",  </div><div class="line">	CONF_VER  = "2-3-4",  </div><div class="line">	CONF_RFILE  = "/html/render.html",  </div><div class="line">	CONF_TO  = 30;   </div><div class="line">	 </div><div class="line">	function on_endposrender(posID, success)  </div><div class="line">	&#123;  </div><div class="line">	//a render action success  </div><div class="line">	&#125;   </div><div class="line">	 </div><div class="line">	function on_posmsg(posID, msg, data)  </div><div class="line">	&#123;  </div><div class="line">	//listen for messages </div><div class="line">	&#125;  </div><div class="line">	 </div><div class="line">	w.render_content  = function()  </div><div class="line">	&#123;  </div><div class="line">	var conf, posConf, pos,confDesc;   </div><div class="line">	 </div><div class="line">	if (Config) &#123;  </div><div class="line">	conf = Config();  </div><div class="line">	if (!conf) &#123;  </div><div class="line">	confDesc  =  </div><div class="line">	&#123;  </div><div class="line">	debug:       true,  </div><div class="line">	cdn:        CONF_CDN,  </div><div class="line">	root:       CONF_ROOT,    </div><div class="line">	ver:        CONF_VER,  </div><div class="line">	renderFile:      CONF_RFILE,   </div><div class="line">	© 2014 Interactive Advertising Bureau  36  SafeFrame_v1.1 </div><div class="line">	to:        CONF_TO  </div><div class="line">	onEndPosRender:    on_endposrender,  </div><div class="line">	onPosMsg:      on_posmsg  </div><div class="line">	&#125;;  </div><div class="line">	conf = new Config(confDesc);  </div><div class="line">	&#125;  </div><div class="line">	if (conf) &#123;  </div><div class="line">	posConf = new host.PosConfig("LREC","tgtLREC");  </div><div class="line">	posConf.w  = 300;  </div><div class="line">	posConf.h  = 250;  </div><div class="line">	posConf.z  = 1000;  </div><div class="line">	pos    = new host.Position("LREC","<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World I'm an Ad<span class="tag">&lt;<span class="name">h1</span>&gt;</span>",null,posConf);  </div><div class="line">	host.render(pos);  </div><div class="line">	&#125;  </div><div class="line">	&#125;  </div><div class="line">	&#125;   </div><div class="line">	w.remove_content  = function()  </div><div class="line">	&#123;  </div><div class="line">	var skipID = "LREC",  // we want to skip the LREC position, </div><div class="line">	and leave it in the page  </div><div class="line">	list   = $sf.info.list,  </div><div class="line">	cnt     = list.length,  </div><div class="line">	to_rem = [],  </div><div class="line">	idx     = 0,  </div><div class="line">	pos;   </div><div class="line">	while (cnt--)  </div><div class="line">	&#123;  </div><div class="line">	pos = list[idx++];  //$sf.host.Position  </div><div class="line">	if (pos.id == skipID) continue;  </div><div class="line">	to_rem.push(pos.id);  </div><div class="line">	&#125;  </div><div class="line">	$host.nuke(to_rem); &#125; //remove all but the LREC position; </div><div class="line">&#125;)();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-4-类-sf-host-Config"><a href="#4-4-类-sf-host-Config" class="headerlink" title="4.4 类$sf.host.Config"></a>4.4 类<code>$sf.host.Config</code></h3><p><code>$sf.host.Config(conf)</code><br>网站配置类是用来描述了SafeFrame 网站API的配置选项的。该类配置网站使用的整体功能和设置。</p>
<blockquote>
<p> <strong>网站实施注意事项</strong><br> 网站类<code>$sf.host.Config</code>只应在的SafeFrame网站API中存在一次，并应在SafeFrame容器处于非活动状态的时候被构造来启动配置选项。<br>当构建时，如果不是先前定义的话，详细信息将写入内嵌<code>$sf.host.conf</code>命名空间中。</p>
</blockquote>
<p>如果没有指定初始参数，则返回现有配置。如果返回值为null，则不存在有效的配置。</p>
<p>当<code>$sf.host.Config</code>被构造，其他SafeFrame网站类从得到的配置读取，以确定容器的渲染方式。如果先前没有定义，任何所得的值会被添加到内联<code>$sf.host.conf</code>命名空间中。<br><strong>参数</strong></p>
<ul>
<li><code>{Object} conf</code><br>A list of key value pairs to use for the configuration. </li>
</ul>
<p><strong>字段</strong><br>以下字段可以在<code>conf</code>参数中返回：</p>
<ul>
<li><code>{String}</code> <strong>conf.cdn</strong><br>Host of the CDN used to fetch SafeFrame resources. This value should always be a different domain than your web page<br>　Sample value: <code>&quot;http://l.yimg.com&quot;</code></li>
<li><code>{String}</code> <strong>conf.ver</strong><br>The version number of the SafeFrame to be used, provided in the format [number]-[number]-[number].<br>　Sample value: `”2-3-4”</li>
<li><code>{String}</code> <strong>conf.renderFile</strong><br>The partial path and filename of the file from the cdn property that is used as the base document for external party content to be rendered using the SafeFrame. </li>
<li><code>{String}</code> <strong>conf.hostFile</strong><br>The URL string to the Host-side JavaScript file to be used. </li>
<li><code>{String}</code> <strong>extFile</strong><br>The URL string to the External Party-side JavaScript file to be used. </li>
<li><code>{String}</code> <strong>bootFile</strong><br>The URL string to the External Party-side JaveScript file to be used for bootstrapping the SafeFrames library, processing SafeFrames tags, and rendering content. </li>
<li><code>{Number}</code> <strong>conf.to</strong><br>The maximum amount of time (in seconds) that a render process can take before the operation can be aborted.<br>Rendering the external party content in a SafeFrame container is an asynchronous process, which is done by rendering an x-domain iframe tag. This number defines the maximum amount of time that the render operation can spend in the “loading” state before a time-out error is generated.<br>　 Sample value: <code>30</code> </li>
<li><code>{Object}</code> <strong>conf.positions</strong><br>An object defining literal representations of <code>$sf.host.PosConfig</code> objects, keyed by id, to be used to configure each position in the page  </li>
<li><code>{Boolean}</code> <strong>conf.auto</strong> <em>(Optional)</em><br>Whether or not automatic bootstrapping and rendering of SafeFrame tags should occur. Default is true. If set to false, SafeFrame tags will just add to the <code>$sf.info object</code>. </li>
<li><code>{String}</code> <strong>conf.msgFile</strong> <em>(Optional)</em><br>The partial path and filename of the file from the cdn property that is used to as a proxy for x-domain communication. Only required for older browsers that do not support HTML 5. </li>
<li>`{Boolean} conf.debug<em>* </em>(Optional)*<br>Whether or not to run the SDK in debug mode, which will also use un-minified JS code, separated files, etc. </li>
</ul>
<p><strong>事件</strong></p>
<ul>
<li><code>onBeforePosMsg(id, msgName, data)</code><br>A function that gets called each time a position sends a request for some functionality. Returning true cancels the command request.<br><strong>参数: </strong><br>　<code>{String}</code> <strong>id</strong><br>　The id of the position that has started its render process<br>　<code>{String}</code> <strong>msgName</strong><br>　The type of message being sent<br>　<code>{String}</code> <strong>data</strong> <em>(Optional)</em><br>　Data that gets passed through </li>
<li><code>onEndPosRender(id)</code><br>A  function which gets called each time a position has finished rendering<br><strong>参数: </strong><br>　<code>{String}</code> <strong>id</strong><br>　 The id of the position that has started its render process </li>
<li><code>onFailure(id)</code><br>A  function which gets called anytime a render call has failed or timed out<br><strong>参数: </strong><br>　 <code>{String}</code> <strong>id</strong><br>　 The id of the position that has started its render process </li>
<li><code>onPosMsg(id, msgName, data)</code><br>A callback function which gets called each time a position sends a message up to your web page<br><strong>参数: </strong><br>　 <code>{String}</code> <strong>id</strong><br>　 The id of the position that has started its render process<br>　 <code>{String}</code> <strong>msgName</strong><br>　The name / type of message being sent<br>　<code>{String}</code> <strong>data</strong> <em>(Optional)</em><br>　Data that gets passed through </li>
<li><code>onStartPosRender(id)</code><br>A callback function which gets called each time a position is about to be rendered<br><strong>参数: </strong><br>　 <code>{String}</code> <strong>id</strong><br>　The id of the position that has started its render process </li>
<li><code>onSuccess(id)</code><br>A callback function which gets called anytime a render call has successfully completed.<br><strong>参数: </strong><br>　<code>{String}</code> <strong>id</strong><br>　 The id of the position that has started its render process</li>
</ul>
<p><strong>相关章节</strong>: </p>
<ul>
<li>4.2 命名空间 <code>$sf.host.conf</code></li>
<li>4.5 类 <code>$sf.host.PosConfig</code> </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined">  </span></div><div class="line"> </div><div class="line">(function() &#123;     </div><div class="line">	var w = window, sf = w["$sf"], pub = sf &amp;&amp; sf.host, Config = pub </div><div class="line">	&amp;&amp; host.Config,    </div><div class="line">	 </div><div class="line">	CONF_CDN   = "http://l.yimg.com",    </div><div class="line">	CONF_ROOT   = "/sf",    </div><div class="line">	CONF_VER  = "2-3-4",    </div><div class="line">	CONF_RFILE  = "/html/render.html",    </div><div class="line">	CONF_TO    = 30;     </div><div class="line">	 </div><div class="line">	function on_endposrender(posID, success)    </div><div class="line">	&#123;      </div><div class="line">	//a render action success    </div><div class="line">	&#125;     </div><div class="line">	 </div><div class="line">	function on_posmsg(posID, msg, data)    </div><div class="line">	&#123;        </div><div class="line">	//listen for messages    </div><div class="line">	&#125;     </div><div class="line">	 </div><div class="line">	w.init_SafeFrame  = function()    </div><div class="line">	 </div><div class="line">	&#123;        </div><div class="line">	var conf, confDesc;       </div><div class="line">	 </div><div class="line">	if (Config) &#123;        </div><div class="line">		conf = Config();       </div><div class="line">		if (!conf) &#123;          </div><div class="line">			confDesc  =          </div><div class="line">			&#123;            </div><div class="line">				debug:       true, </div><div class="line">				cdn:        CONF_CDN,  </div><div class="line">				root:       CONF_ROOT,  </div><div class="line">				ver:        CONF_VER,  </div><div class="line">				renderFile:      CONF_RFILE,  </div><div class="line">				to:        CONF_TO  </div><div class="line">				onEndPosRender:    on_endposrender,  </div><div class="line">				onPosMsg:      on_posmsg,  </div><div class="line">				positions:            </div><div class="line">				&#123;  </div><div class="line">					"LREC":  </div><div class="line">					&#123;  </div><div class="line">					id:    "LREC",  </div><div class="line">					w:    300,  </div><div class="line">					h:    250,  </div><div class="line">					z:    1000,  </div><div class="line">					dest:  "tgtLREC"  </div><div class="line">					&#125;  </div><div class="line">				&#125;  </div><div class="line">			&#125;;  </div><div class="line">			conf = new Config(confDesc);  </div><div class="line">			if (conf) &#123;  </div><div class="line">				alert("SafeFrame Host Config successful");  </div><div class="line">			&#125;  </div><div class="line">		&#125;  </div><div class="line">	&#125;    </div><div class="line">	&#125;   </div><div class="line">&#125;)();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-5-类-sf-host-PosConfig"><a href="#4-5-类-sf-host-PosConfig" class="headerlink" title="4.5 类$sf.host.PosConfig"></a>4.5 类<code>$sf.host.PosConfig</code></h3><p><strong>$sf.host.PosConfig</strong><code>(posIDorObj, destID, baseConf)</code></p>
<p>位置配置类描述了一个<code>$sf.host.Position</code>对象应该如何被渲染。每个唯一ID只能有一个<code>PosConfig</code>对象可以存在。如果多于一个<code>PosConfig</code>对象由相同的ID建造，原来的PosConfig的初始值将被覆盖。网站主机仍然可以支持具有相同特征的多个广告位（即两个唯一的LREC）;他们只是需要有不同的ID（即LREC1和LREC2）</p>
<p>类结构可被认为是一个工厂，其中，在内部，构成的所有实例都被监视，以便可以自动连接整体配置选项和数据。</p>
<p><strong>参数：</strong></p>
<ul>
<li><code>{String|Object}</code> <strong>posIDorObj</strong><br>If this value is provided as a string, then it is used as the id property of the instance. If the value is returned as an object, then it is a descriptor that populates the properties of the instance. </li>
<li><code>{String}</code> <strong>destID</strong><br>The HTML element ID attribute string into which the content is to be rendered. </li>
<li><code>{Object}</code> <strong>baseConf</strong>,<em>(Optional)</em><br>An optional object that defines a representation of an <code>$sf.host.Config</code> object and is used in cases where no initial Host configuration was pre-defined. This option enables a shortcut for automatic host configuration if necessary and is usually used in conjunction with SafeFrame tags. If specified when a Host configuration already exists, this parameter is ignored. </li>
</ul>
<p><strong>字段</strong></p>
<ul>
<li><code>bg</code><br>The background color to be used inside the safe frame. Default value is “transparent”. </li>
<li><code>css</code><br>Style-sheet text or a URI to a CSS file that defines additional CSS to be used inside the SafeFrame iframe. Default value is “”. </li>
<li><code>dest</code><br>The HTML element ID into which the content is to be rendered. </li>
<li><code>H</code><br>The height (in pixels) of the SafeFrame iframe to be created for the content specified.  </li>
<li><code>id</code><br>A unique identifier for the position or content. Used to link the <code>$sf.host.Position</code> object with a configuration. Specifying the id as “DEFAULT” means that this configuration will be used as the default values for other <code>$sf.Position</code> objects created. </li>
<li><code>size</code><br>A string representing the width and height (in pixels) of the safe frame to be created for the content specified. Setting this value also sets the w and h properties respectively Example: <code>&quot;300x250&quot;</code> </li>
<li><code>tgt</code><br>The target window name for where hyperlink clicks should be routed to unless otherwise specified. Default value is “_blank”. If a URL is provided, it opens in a new window. The values “_self” and “_parent” are NOT allowed and if provided the value “_top” is used instead. </li>
<li><code>w</code><br>The width (in pixels) of the SafeFrame iframe to be created for the content specified. </li>
<li><code>z</code><br>The z-index value to be used for the SafeFrame iframe. </li>
<li><code>supports</code><br>An object identifying the features that the host supports relative to the content specified.  </li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li><code>toString()</code><br>A method that serializes the position into a string using query-string encoded syntax. </li>
</ul>
<p><strong>例子</strong><br> <code>//See $sf.host.Config example</code></p>
<h3 id="4-6-类-sf-host-Position"><a href="#4-6-类-sf-host-Position" class="headerlink" title="4.6 类$sf.host.Position"></a>4.6 类<code>$sf.host.Position</code></h3><p><code>**$sf.host.Position**(posIDorObj, html, meta, config)</code></p>
<p>一个用于描述在一个安全的框架中渲染的HTML内容的类。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{String|Object}</code> <strong>posIDorObj</strong><br>REQUIRED, if is a string, used as the id property of the instance. If is an object, it is used as a descriptor to fill out the properties of the instance. </li>
<li><code>{String}</code> <strong>html</strong><br>REQUIRED, the string content to be rendered into the safe frame described by this instance </li>
<li><code>{Object}</code> <strong>meta Optional</strong><br>An object with key/value pairs defining customizable metadata about the position </li>
<li><code>{Object}</code> <strong>config Optional</strong><br>An object representing position config overrides </li>
</ul>
<p><strong>字段</strong></p>
<ul>
<li><code>{Object}</code> <strong>config</strong><br>Config information defines how SafeFrame renders a position. This object can override values already set in the associated config. </li>
<li><code>{String}</code> <strong>html</strong><br>The HTML content to be rendered inside the safe frame, or a URL to HTML content returned that is returned using a SCRIPT tag. </li>
<li><code>{String}</code> <strong>id</strong><br>A unique identifier for the position. If present, this value is used to lookup a<br><code>$sf.host.PosConfig</code> object. </li>
<li><code>{Object}</code> <strong>meta</strong><br>Metadata information in the form of an object of any number, combination key, or value pairs to store host or content-related metadata. </li>
<li><code>{String}</code> <strong>src</strong><br>A URI to be used as a SCRIPT tag that renders the contents in the SafeFrame. Setting this value changes the value of the HTML property and is used mostly for short-hand purposes.<br>The purpose of this field is to enable content to be fetched when the HTML content is no readily available. Setting this property creates an HTTP request for content to the URI specified. Because the URI provided is in a SCRIPT context, content must be returned in JavaScript form. This process prevents the creation of other iframes that would otherwise damage the system because content within any created iframes is denied access to the external content API.<br>The URI provided may contain MACRO place holders that SafeFrame will populate. This feature can be used to gather information from a Web browser that can be passed in the HTTP request and is useful for cases when retrieved content requires information about the Web browser environment only available to the host.<br>SafeFrame populates the following values:<br>　- <code>{String} ${sf_ver}</code><br>　The string representation of the current version of SafeFrame<br>　- <code>{Number} ${ck_on}</code><br>　Indicates whether cookies are enabled on the browser: 1 for true, 0 for false.<br>　- <code>{String} ${flash_ver}</code><br>　Identifies which version of Flash is enabled in the browser. If Flash is not detected, the value is set to 0.</li>
</ul>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">define_content</span>(<span class="params"></span>) </span></div><div class="line">&#123; </div><div class="line"><span class="keyword">var</span> pub = $sf.host, PosConfig = host.PosConfig, PosMeta = host.PosMeta, </div><div class="line">Pos = host.Position, pos, posConf, posMeta; </div><div class="line"> </div><div class="line">  posConf   = <span class="keyword">new</span> PosConfig(<span class="string">"LREC"</span>, <span class="string">"tgtLREC"</span>); </div><div class="line">  posConf.w   = <span class="number">300</span>; </div><div class="line">  posConf.h  = <span class="number">250</span>; </div><div class="line">  posConf.z  = <span class="number">1000</span>; </div><div class="line"> </div><div class="line">posMeta    = <span class="keyword">new</span> PosMeta(&#123;<span class="string">"context"</span>:<span class="string">"Music"</span>&#125;); </div><div class="line"> </div><div class="line">  <span class="comment">//a shared meta object will now contain </span></div><div class="line">  <span class="comment">//  context:   "Music" </span></div><div class="line">  <span class="comment">//  sf_ver:   "1-0-1", </span></div><div class="line">  <span class="comment">//  flash_ver:  11 </span></div><div class="line"> </div><div class="line">  pos     = <span class="keyword">new</span> Pos(<span class="string">"LREC"</span>, </div><div class="line"><span class="string">"http://getsomeads.com?pos=LREC&amp;f=$&#123;flash_ver&#125;&amp;sf=$&#123;sf_ver&#125;"</span>, posMeta, </div><div class="line">posConf); </div><div class="line">  <span class="comment">//note that the $&#123;flash_ver&#125; and $&#123;sf_ver&#125; macros will get filled out </span></div><div class="line">automatically </div><div class="line">  <span class="comment">// </span></div><div class="line">  <span class="comment">//so if flash 11 is installed, and we are using SafeFrame version 1 </span></div><div class="line">  <span class="comment">//the URI for the script tag created will be </span></div><div class="line">  <span class="comment">// </span></div><div class="line">  <span class="comment">// "http://getsomeads.com?pos=LREC&amp;f=11&amp;sf=1-0-1" </span></div><div class="line"> </div><div class="line">  host.render(pos);</div></pre></td></tr></table></figure></p>
<p><strong>方法</strong></p>
<ul>
<li><code>toString()</code><br>A method that serializes the position into a string using query-string encoded syntax </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript">   </span></div><div class="line"> </div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line"> </div><div class="line">	<span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub </div><div class="line">	&amp;&amp; host.Config,   </div><div class="line">	 </div><div class="line">	CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,  </div><div class="line">	CONF_ROOT   = <span class="string">"/sf"</span>,  </div><div class="line">	CONF_VER  = <span class="string">"2-3-4"</span>,  </div><div class="line">	CONF_RFILE  = <span class="string">"/html/render.html"</span>,  </div><div class="line">	CONF_TO    = <span class="number">30</span>;   </div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)  </span></div><div class="line">	&#123;  </div><div class="line">	<span class="comment">//a render action success  </span></div><div class="line">	&#125;   </div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)  </span></div><div class="line">	&#123;  </div><div class="line">	 <span class="comment">//listen for messages  </span></div><div class="line">	&#125;     </div><div class="line">	 </div><div class="line">	w.init_render  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span></div><div class="line">	&#123;  </div><div class="line">	 <span class="keyword">var</span> conf, confDesc, posConf, pos;      </div><div class="line">	 </div><div class="line">	<span class="keyword">if</span> (Config) &#123;  </div><div class="line">		conf = Config();  </div><div class="line">		<span class="keyword">if</span> (!conf) &#123;  </div><div class="line">			confDesc  =  </div><div class="line">			&#123;          </div><div class="line">				debug:       <span class="literal">true</span>,  </div><div class="line">				cdn:        CONF_CDN,  </div><div class="line">				root:       CONF_ROOT,  </div><div class="line">				ver:        CONF_VER,  </div><div class="line">				renderFile:      CONF_RFILE,  </div><div class="line">				to:        CONF_TO  </div><div class="line">				onEndPosRender:    on_endposrender,  </div><div class="line">				onPosMsg:      on_posmsg  </div><div class="line">			&#125;;          </div><div class="line">			conf = <span class="keyword">new</span> Config(confDesc);  </div><div class="line">			<span class="keyword">if</span> (conf) &#123;  </div><div class="line">				posConf    = <span class="keyword">new</span> </div><div class="line">				host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>);  </div><div class="line">				posConf.w  = <span class="number">300</span>;  </div><div class="line">				posConf.h  = <span class="number">250</span>;  </div><div class="line">				posConf.z  = <span class="number">1000</span>;    </div><div class="line">				pos    = <span class="keyword">new</span> </div><div class="line">				host.Position(<span class="string">"LREC"</span>,<span class="string">"&lt;h1&gt;Hello World, I'm an Ad&lt;/h1&gt;"</span>);  </div><div class="line">				<span class="comment">//note that b/c you constructed a </span></div><div class="line">				PosConfig object already <span class="keyword">with</span> an id <span class="keyword">of</span> </div><div class="line">				<span class="string">"LREC"</span>, the configuration will be </div><div class="line">				grabbed   </div><div class="line">				 </div><div class="line">				host.render(pos);  </div><div class="line">			&#125;        </div><div class="line">		&#125;      </div><div class="line">	&#125;    </div><div class="line">	&#125;   </div><div class="line">&#125;)();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-7-类-sf-host-PosMeta"><a href="#4-7-类-sf-host-PosMeta" class="headerlink" title="4.7 类$sf.host.PosMeta"></a>4.7 类<code>$sf.host.PosMeta</code></h3><p><strong>$sf.host.PosMeta</strong><code>(shared_obj, ownerKey, obj)</code><br>此类定义一个特定的位置的元数据。元数据可以被共享，或键入，到特定的数据所有者（如果需要的话，允许隐藏）。此对象中存储的值，不能改变;被构造完时，他们才可以被设置，且是只读的。典型地存储在该对象的数据用于专有用途。</p>
<p>当一个SafeFrame容器被构造和渲染，这里存储的信息将提供给外部方API。在某些元数据需要被保护的情况下，共享和非共享内部对象被创建。例如，<code>ownerKey</code>属性可能是从一个服务器生成的签名。</p>
<p>在SafeFrame的容器内，函数用于访问元数据，使外部各方不能用迭代发现它。在这种情况下，用作<code>ownerKey</code>的签名可以在容器内部被用来访问它，且只允许向可信方访问。</p>
<p>每当<code>$sf.host.PosMeta</code>对象被创建了，以下信息会总是默认在”共享”部分中出现。</p>
<ul>
<li><code>{String} sf_ver</code><br>The string representation of the current version of SafeFrame </li>
<li><code>{Number} ck_on</code><br>Identified whether cookies are enabled on the browser: 1 for true, 0 for false. </li>
<li><p><code>{String} flash_ver</code><br>Identifies which version of Flash is enabled in the browser. If Flash is not detected, the value is set to 0. </p>
<p>我们也看看<code>$sf.host.Position</code>的”src”属性。当<code>PosMeta</code>对象被构造，并可以为了作为宏观字段的”src”属性在URL上自动被传递，上述的值被定义。</p>
</li>
</ul>
<p><strong>参数：</strong></p>
<ul>
<li><code>{Object}</code> <strong>shared_obj</strong> <em>(Optional)</em><br>An object containing key /value pairs for shared metadata </li>
<li><code>{String}</code> <strong>ownerKey</strong> <em>(Optional)</em><br>A key name to identify the owner or a particular set of metadata. </li>
<li><code>{Object}</code> <strong>obj</strong> <em>(Optional)</em><br>An object containing the key value pairs of metadata<br>欲知关于传递元数据的详情，请参阅相关的函数<code>$sf.ext.meta</code>。 </li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li><code>{String|Number|Boolean}</code> <strong>value</strong><code>(propKey, ownerKey)</code><br>A method retrieves a metadata value from this object.<br>方法参数: </li>
<li><code>{String}</code> <strong>propKey</strong><br>The name of the value to retrieve </li>
<li><code>{String}</code> <strong>ownerKey</strong> (Optional)<br>The name of the owner key of the metadata value. By default, it is assumed to be shared, so nothing needs to be passed in unless looking for a specific proprietary value </li>
</ul>
<p><strong>返回:</strong> </p>
<ul>
<li><code>{String|Number|Boolean}</code> </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Host Side tags --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript"> </span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub &amp;&amp; </div><div class="line">host.Config, conf, posConf, posMeta, shared, non_shared, pos; </div><div class="line"> </div><div class="line"><span class="keyword">if</span> (Config) &#123; </div><div class="line"> </div><div class="line">  conf = Config(); </div><div class="line"><span class="keyword">if</span> (!conf) conf = <span class="keyword">new</span> </div><div class="line">Config(&#123;debug:<span class="literal">true</span>,cdn:<span class="string">"http://l.yimg.com"</span>,root:<span class="string">"/sf"</span>,</div><div class="line">	ver:<span class="string">"2-3-4"</span>,renderFile:<span class="string">"/html/render.html"</span>,to:<span class="number">30</span>&#125;) </div><div class="line">  <span class="keyword">if</span> (conf) &#123; </div><div class="line">    posConf    = <span class="keyword">new</span> host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>); </div><div class="line">    posConf.w  = <span class="number">300</span>; </div><div class="line">    posConf.h  = <span class="number">250</span>; </div><div class="line">    posConf.z  = <span class="number">1000</span>; </div><div class="line">    shared   = &#123;<span class="string">"context"</span>: <span class="string">"Music"</span>&#125;; </div><div class="line">    non_shared = &#123;spaceID: <span class="number">90900909090</span>, adID: <span class="number">3423423432423</span>&#125;; </div><div class="line">	posMeta  = <span class="keyword">new</span> host.PosMeta(shared,<span class="string">"y"</span>,non_shared); </div><div class="line">	<span class="comment">//Use a signature for a key name (instead of "y"), </span></div><div class="line">	<span class="comment">//if you don't want 3rd parties accessing this data  </span></div><div class="line">	pos    = <span class="keyword">new</span> host.Position(<span class="string">"LREC"</span>,<span class="string">"&lt;Hello World I'm an Ad&gt;"</span>,posMeta,posConf); </div><div class="line">    host.render(pos); </div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- External Party tag --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript"> </span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext, cntxt = ext &amp;&amp; </div><div class="line">ext.meta(<span class="string">"context"</span>), yspaceID = ext &amp;&amp; ext.meta(<span class="string">"spaceID"</span>,<span class="string">"y"</span>); </div><div class="line"> </div><div class="line">alert(cntxt); <span class="comment">//will say Music; </span></div><div class="line"> </div><div class="line">alert(yspaceID); <span class="comment">//will say 90900909090 </span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-8-函数-sf-host-boot"><a href="#4-8-函数-sf-host-boot" class="headerlink" title="4.8 函数 $sf.host.boot"></a>4.8 函数 <code>$sf.host.boot</code></h3><p>boot函数用于查找，处理和自动渲染数据的标签。它返回一个布尔值，响应是否已发现任何新的，未经加工的项。一旦进行处理，将所得的SafeFrame数据被添加到<code>$sf.info</code>。并且如果自动字段在<code>$sf.host.config</code>类中被设置为true，boot函数启动在数据定义的内容的渲染过程。</p>
<p><strong>返回值</strong> </p>
<ul>
<li><code>{Boolean}</code><br>Indicates whether any new, unprocessed items have been found </li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>3   SafeFrame标签</li>
<li>4.3 命名空间<code>$sf.info</code> </li>
<li>4.2 命名空间<code>$sf.host.conf</code> </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- SafeFrame Inline Tag --&gt;</span>   </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tgtLREC"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;</span><span class="javascript">  </span></div><div class="line">&#123;  </div><div class="line">	id: <span class="string">"LREC"</span>,  </div><div class="line">	src: <span class="string">"http://secondarydomain.com/safeframe"</span>,   </div><div class="line">	conf:  </div><div class="line">	&#123;    </div><div class="line">	dest: <span class="string">"tgtLREC"</span>,  </div><div class="line">	size: <span class="string">"300x250"</span>  </div><div class="line">	&#125;   </div><div class="line">	meta:  </div><div class="line">	&#123;    </div><div class="line">		rmx:  </div><div class="line">		&#123;  </div><div class="line">			sectionID:<span class="string">"14800347"</span>,   </div><div class="line">			siteID: <span class="string">"140509"</span>   </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript">  </span></div><div class="line"><span class="keyword">try</span> &#123;  </div><div class="line">$sf.host.boot();  </div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;  &#125;  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-9-函数-sf-host-status"><a href="#4-9-函数-sf-host-status" class="headerlink" title="4.9 函数$sf.host.status"></a>4.9 函数<code>$sf.host.status</code></h3><p>status函数用于确定位置的状态。它返回一个指示页面中的是否有任何位置当前在所渲染的过程中，或者如果有一些其它的操作，诸如扩展，正在发生的布尔值响应。<br><strong>参数</strong></p>
<ul>
<li><code>{Object} positions</code><br>可选的对象参数提供了一个可由，代表每个SafeFrame正在管理的$sf.host.Position对象（使用其ID属性）的密钥列表中的一个填充。每个键的值包含一个有一个代表容器的当前状态的状态代码串的对象。在此版本中，可能值如下：<br>　•  ready: the container is available for rendering but has not yet been rendered<br>　•  loading: the container is currently in the process of being rendered<br>　•  expanding: the container is currently in the process of expanding<br>　•  expanded: the container is currently in expanded state<br>　•  collapsing: the container is currently in the process of collapsing<br>　•  error: the container has experienced an error that is preventing any interaction </li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li><code>{Boolean}</code><br>Indicates whether or not the SafeFrame SDK is busy with an operation where the configuration cannot be updated </li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>5.1  命名空间<code>$sf.ext</code> </li>
<li>5.7  函数<code>$sf.ext.status</code> </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript">   </span></div><div class="line"><span class="keyword">var</span> posDetail = &#123;&#125;;  </div><div class="line"><span class="keyword">var</span> isBusy    = $sf.host.status(posDetail);  </div><div class="line"><span class="keyword">var</span> posID    = <span class="string">""</span>;  </div><div class="line"><span class="keyword">var</span> posInfo, posInfoStatus, posInfoDesc, posIDProc;    </div><div class="line"> </div><div class="line"><span class="keyword">if</span> (isBusy) &#123;  </div><div class="line"><span class="comment">//Cannot change configuration while operations are ongoing, </span></div><div class="line">inspect object to determine what is going on   </div><div class="line"> </div><div class="line"><span class="keyword">for</span> (posID <span class="keyword">in</span> posDetail)  </div><div class="line">&#123;  </div><div class="line">	posInfo = posDetail[posID];  </div><div class="line">	<span class="comment">//object has "status", "id", and "desc" properties   </span></div><div class="line">	 </div><div class="line">	posInfoStatus = posInfo.status;  </div><div class="line">	<span class="keyword">switch</span> (posInfoStatus)  </div><div class="line">	&#123;  </div><div class="line">		<span class="keyword">case</span> <span class="string">"expanding"</span>:  </div><div class="line">		posIDProc = posID;  </div><div class="line">		<span class="keyword">break</span>;  </div><div class="line">		<span class="keyword">case</span> <span class="string">"collapsing"</span>:  </div><div class="line">		posIDProc = posID;  </div><div class="line">		<span class="keyword">break</span>;  </div><div class="line">	&#125;  </div><div class="line">	<span class="keyword">if</span> (posIDProc) <span class="keyword">break</span>;  </div><div class="line">&#125;   </div><div class="line"><span class="keyword">if</span> (posIDProc) alert(posIDProc + <span class="string">", is "</span> + posInfoStatus);  </div><div class="line">&#125;  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-10-函数-sf-host-nuke"><a href="#4-10-函数-sf-host-nuke" class="headerlink" title="4.10 函数$sf.host.nuke"></a>4.10 函数<code>$sf.host.nuke</code></h3><p>nuke函数用于从页面去除SafeFrame容器的位置。即使互动正在审理或正在发生，这个功能也可以调用，且将中止未完成的操作或渲染。</p>
<p>nuke函数被提供以迁就SafeFrame容器位置不能容易地在常规情况下除去的情况。例如，nuke函数可以被用来去除在不具有可以像它在Web浏览器那样被关闭的网页的本机应用中的SafeFrame容器的位置。</p>
<p>Nuke不需要把新的内容加载到现有的位置。渲染函数会处理设置新的内容位置。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{String|String[]}</code> <strong>id</strong><br>The id of the position to be removed; use “*” to remove all positions. </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript">   </span></div><div class="line"> </div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub </div><div class="line">&amp;&amp; host.Config,   </div><div class="line"> </div><div class="line">CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,  </div><div class="line">CONF_ROOT   = <span class="string">"/sf"</span>,  </div><div class="line">CONF_VER  = <span class="string">"2-3-4"</span>,  </div><div class="line">CONF_RFILE  = <span class="string">"/html/render.html"</span>,  </div><div class="line">CONF_TO  = <span class="number">30</span>;   </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)  </span></div><div class="line">&#123;  </div><div class="line"><span class="comment">//a render action total failure  </span></div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>) </span></div><div class="line">&#123;  </div><div class="line"><span class="comment">//listen for messages  </span></div><div class="line">&#125;   </div><div class="line">w.render_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">	<span class="keyword">var</span> conf, posConf, pos,confDesc;   </div><div class="line">	 </div><div class="line">	<span class="keyword">if</span> (Config) &#123;  </div><div class="line">		conf = Config();  </div><div class="line">		<span class="keyword">if</span> (!conf) &#123;  </div><div class="line">		confDesc  =  </div><div class="line">		&#123;  </div><div class="line">		debug: <span class="literal">true</span>,  </div><div class="line">		cdn:    CONF_CDN,  </div><div class="line">		root:    CONF_ROOT,  </div><div class="line">		ver:    CONF_VER,  </div><div class="line">		renderFile:  CONF_RFILE,  </div><div class="line">		to:    CONF_TO  </div><div class="line">		onEndPosRender:  on_endposrender,  </div><div class="line">		onPosMsg:    on_posmsg  </div><div class="line">		&#125;;  </div><div class="line">		conf = <span class="keyword">new</span> Config(confDesc);  </div><div class="line">		&#125;  </div><div class="line">		<span class="keyword">if</span> (conf) &#123;  </div><div class="line">			posConf    = <span class="keyword">new</span> host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>);  </div><div class="line">			posConf.w  = <span class="number">300</span>;  </div><div class="line">			posConf.h  = <span class="number">250</span>;  </div><div class="line">			posConf.z  = <span class="number">1000</span>;  </div><div class="line">			pos      = <span class="keyword">new</span> host.Position(<span class="string">"LREC"</span>,</div><div class="line">				<span class="string">"&lt;h1&gt;Hello World I'm an Ad&lt;h1&gt;"</span>,<span class="literal">null</span>,posConf);  </div><div class="line">			host.render(pos);  </div><div class="line">		&#125;  </div><div class="line">	&#125;  </div><div class="line">&#125;   </div><div class="line"> </div><div class="line">w.remove_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)   </span></div><div class="line">&#123;  </div><div class="line">	host.nuke(<span class="string">"*"</span>); <span class="comment">//will remove all positions rendered or in </span></div><div class="line">	process <span class="keyword">of</span> rendering.  </div><div class="line">	<span class="comment">//could also pass "LREC" in this case, or </span></div><div class="line">	<span class="string">"LREC"</span>,<span class="string">"SKY"</span> <span class="keyword">if</span> <span class="string">"LREC"</span> and <span class="string">"SKY"</span> ads were </div><div class="line">	configured.  </div><div class="line">&#125;  </div><div class="line">&#125;)();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-11-函数-sf-host-get"><a href="#4-11-函数-sf-host-get" class="headerlink" title="4.11 函数$sf.host.get"></a>4.11 函数<code>$sf.host.get</code></h3><p>get函数用于获取SafeFrame容器的位置配置的参考。当SafeFrame回调函数之一通知一个事件的网站代码，这个函数被用来获取与有疑问的位置关联的PosConfig对象的引用。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{String}</code> <strong>id</strong><br>The id of the position to get. </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript">   </span></div><div class="line"> </div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line">	<span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub </div><div class="line">	&amp;&amp; host.Config,   </div><div class="line">	 </div><div class="line">	<span class="comment">// Configuration omitted for brevity   </span></div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)  </span></div><div class="line">	&#123;  </div><div class="line">		<span class="keyword">var</span> adPos = host.get(posID); </div><div class="line">		<span class="keyword">if</span>(!success) &#123; </div><div class="line">		  host.nuke(posID); </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">&#125;)();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-12-函数-sf-host-render"><a href="#4-12-函数-sf-host-render" class="headerlink" title="4.12 函数$sf.host.render"></a>4.12 函数<code>$sf.host.render</code></h3><p>渲染函数用于呈现一个或多个的SafeFrame位置。</p>
<p>你可以同时传递一个或多个<code>$sf.host.Position</code>对象（或对象的表现形式）以渲染一组容器。如果您传递回调函数给<code>$sf.host.Config</code>类，你会看到以以下顺序调用的回调函数：</p>
<ol>
<li>onStartPosRender </li>
<li>onEndPosRender (success / failure) </li>
<li>onBeforePosMsg (if ad sends commands such as for expansion etc, allows you to return true to reject the message) </li>
<li>onPosMsg (if ad sends commands such as for expansion, etc.) </li>
</ol>
<blockquote>
<p><strong>网站实施注意事项</strong><br>当<code>$sf.host.nuke</code>已被调用给当前渲染的位置，<code>onEndPosRender</code>回调不能初始化。</p>
</blockquote>
<p><strong>参数</strong></p>
<ul>
<li><code>{Object|Object[]|$sf.host.Position|$sf.host.Position[]}</code> <strong>data</strong><br>A representation of a $sf.host.Position object to be rendered</li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>4.4 类<code>$sf.host.Config</code> </li>
<li>4.5 类<code>$sf.host.PosConfig</code></li>
<li>4.6 类<code>$sf.host.Position</code> </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript">  </span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub </div><div class="line">&amp;&amp; host.Config,   </div><div class="line"> </div><div class="line">CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,  </div><div class="line">CONF_ROOT   = <span class="string">"/sf"</span>,  </div><div class="line">CONF_VER  = <span class="string">"2-3-4"</span>,  </div><div class="line">CONF_RFILE  = <span class="string">"/html/render.html"</span>,  </div><div class="line">CONF_TO  = <span class="number">30</span>;   </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)  </span></div><div class="line">&#123;  </div><div class="line"><span class="comment">//a render action success  </span></div><div class="line">&#125;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)  </span></div><div class="line">&#123;  </div><div class="line"><span class="comment">//listen for messages  </span></div><div class="line">&#125; </div><div class="line">w.render_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">	<span class="keyword">var</span> conf, posConf, pos,confDesc;   </div><div class="line">	 </div><div class="line">	<span class="keyword">if</span> (Config) &#123;  </div><div class="line">		conf = Config();  </div><div class="line">		<span class="keyword">if</span> (!conf) &#123;  </div><div class="line">		confDesc =  </div><div class="line">		&#123;    </div><div class="line">			debug:       <span class="literal">true</span>,  </div><div class="line">			cdn:        CONF_CDN,  </div><div class="line">			root:        CONF_ROOT,  </div><div class="line">			ver:        CONF_VER,  </div><div class="line">			renderFile:      CONF_RFILE,  </div><div class="line">			to:        CONF_TO  </div><div class="line">			onEndPosRender:    on_endposrender,  </div><div class="line">			onPosMsg:      on_posmsg  </div><div class="line">		&#125;;  </div><div class="line">		conf = <span class="keyword">new</span> Config(confDesc);  </div><div class="line">		&#125;  </div><div class="line">		<span class="keyword">if</span> (conf) &#123;  </div><div class="line">			posConf    = <span class="keyword">new</span> host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>);  </div><div class="line">			posConf.w  = <span class="number">300</span>;  </div><div class="line">			posConf.h  = <span class="number">250</span>;  </div><div class="line">			posConf.z  = <span class="number">1000</span>;  </div><div class="line">			pos    = <span class="keyword">new</span> host.Position(<span class="string">"LREC"</span>,</div><div class="line">				<span class="string">"&lt;h1&gt;Hello World I'm an Ad&lt;h1&gt;"</span>,<span class="literal">null</span>,posConf);  </div><div class="line">			host.render(pos);        </div><div class="line">		&#125;  </div><div class="line">	&#125; </div><div class="line">&#125;  </div><div class="line"> </div><div class="line">w.remove_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">	host.nuke(<span class="string">"*"</span>); <span class="comment">//will remove all positions rendered or in </span></div><div class="line">	process <span class="keyword">of</span> rendering.  </div><div class="line">	<span class="comment">//could also pass "LREC" in this case, or </span></div><div class="line">	<span class="string">"LREC"</span>,<span class="string">"SKY"</span> <span class="keyword">if</span> <span class="string">"LREC"</span> and <span class="string">"SKY"</span> ads </div><div class="line">	were configured.  </div><div class="line">&#125;  </div><div class="line">&#125;)();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript">  </span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   </div><div class="line">	<span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub </div><div class="line">	&amp;&amp; host.Config,   </div><div class="line">	 </div><div class="line">	CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,  </div><div class="line">	CONF_ROOT   = <span class="string">"/sf"</span>,  </div><div class="line">	CONF_VER  = <span class="string">"2-3-4"</span>,  </div><div class="line">	CONF_RFILE  = <span class="string">"/html/render.html"</span>,  </div><div class="line">	CONF_TO  = <span class="number">30</span>;   </div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)  </span></div><div class="line">	&#123;  </div><div class="line">	<span class="comment">//a render action success  </span></div><div class="line">	&#125;  </div><div class="line">	 </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)  </span></div><div class="line">	&#123;  </div><div class="line">	<span class="comment">//listen for messages  </span></div><div class="line">	&#125;</div><div class="line">&#125;)();  </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="5-外部方API实施"><a href="#5-外部方API实施" class="headerlink" title="5.外部方API实施"></a>5.外部方API实施</h2><p>SafeFrame外部方API使用的命名空间和函数在第5.1至5.10节中描述。</p>
<h3 id="5-1-命名空间-sf-ext"><a href="#5-1-命名空间-sf-ext" class="headerlink" title="5.1 命名空间$sf.ext"></a>5.1 命名空间<code>$sf.ext</code></h3><p><code>$sf.ext</code></p>
<p>命名空间ext提供了一系列用于检索关于所述容器的各种类型的信息的方法。外部方使用此命名空间来定义JavaScript类和对象，外部方广告可以用于在一个SafeFrame的环境中与网站内容进行交互。</p>
<p>被用于执行交互作用的SafeFrame方法是异步的，使得只能使用来自API的回调来确定任何成功或失败。这些方法也可保持其状态，这意味着它们被保护以免重复调用。</p>
<p>例如：</p>
<ul>
<li><code>$sf.ext.expand</code>调用被初始化. </li>
<li>在后台，SafeFrame处理<code>$ sf.ext.expand</code>并发送消息到网站。 </li>
<li>如果<code>$ sf.ext.expand</code>再次被调用，处理第一次调用之前，因为只可以同时处理一个命令，它会被认为是一个错误。 </li>
<li>如果是使用<code>$ sf.ext.register</code>提供的<code>$ sd.ext.expand</code>回调函数，那么函数被调用，而且一旦处理，成功或失败的通知会发出。</li>
<li>成功或失败的结果产生之后，<code>$ sf.ext.expand</code>可以再次调用。</li>
</ul>
<p><strong>事件</strong><br><code>&lt;static&gt;  $sf.ext.__status_update(status, data)</code></p>
<p>此事件提供外部方广告内容的状态。事件是从外部方SDK发射的，以便您可以通过<code>$ sf.ext.register</code>注册一个回调。</p>
<blockquote>
<p><strong>实施注意事项</strong><br><code>$ sf.ext.__ status_update</code>命名空间仅仅是隐式的，在JavaScript的层次结构不存在，但它在这里被调用，以记录当函数被调用，并提交给<code>$ sf.ext.register</code>的可能的参数。</p>
</blockquote>
<p>回调函数与至少两个参数被调用：第一，一个表示状态的变化的字符串;第二，一个表示生成状态更新事件的命令的字符串，这是由生成的状态更新事件的外部方API初始化的命令发出的。如果第二个参数是一个空字符串，其含义是网站已强制状态更新，而不是由外部方API正在发起的命令启动的。</p>
<p><strong>事件参数：</strong></p>
<ul>
<li><code>{String}</code> <strong>status</strong><br>The status code string notifying external content of container updates. The following status codes are available:<br>　<strong>expanded</strong><br>　The container has been expanded.<br>　<strong>collapsed</strong><br>　The container is in the default collapsed state.<br>　<strong>failed</strong><br>　A command initiated by the external party API did not succeed.<br>　<strong>geom-update</strong><br>　The container geometry information has changed. Sent for events such when the  browser window is resized, parent container scrolls, or other geometric changes.<br>　<strong><em>focus-change</em></strong><br>　<em>The browser window / tab has become active (“focus”), or become in-active  (“blur”).</em> </li>
<li><p><code>{Object}</code> <strong>data</strong> <em>(Optional)</em><br>Contains information about the original message or action requested of the Host or supplied by the host as a result of changes in the page. The following objects may be issued:<br>　<strong>cmd</strong><br>　The original command sent with possible values such as: exp-ovr, exp-push, read-cookie, write-cookie, etc.<br>　<strong>reason</strong><br>　Description information about whether the command succeeded or failed.<br>　<strong>info</strong><br>　The information sent as part of the command echoed back to the caller, such as dimensions for expansion, the data to set for a cookie, etc. </p>
<p><strong>相关章节</strong></p>
<ul>
<li>5.2 函数<code>$sf.ext.register</code> </li>
<li>5.5 函数<code>$sf.ext.expand</code></li>
</ul>
</li>
</ul>
<h3 id="5-2-函数-sf-ext-register"><a href="#5-2-函数-sf-ext-register" class="headerlink" title="5.2 函数$sf.ext.register"></a>5.2 函数<code>$sf.ext.register</code></h3><p><code>$sf.ext.register(initWidth, initHeight, cb)</code></p>
<p>可用性：同步（可随时请求）</p>
<p>外部党注册函数注册SafeFrame平台，以接受SafeFrame外部方API调用。外部方广告声明初始的（折叠的）的宽度和高度。除了宽度和高度，此函数还可以定义一个回调函数，通知有关各种状态信息的外部内容。</p>
<p>最初的宽度和高度参数是必需的，以便SafeFrame通知网站渲染外部内容所需的呈现空间。回调函数是返回每一个命令处理的成功或错误代码，通知外部方发送的每一个命令的执行状态的方法。然后，外部方可做出相应的反应。在等待成功或失败通知的时候，命令应该只被调用一次。在成功或失败通知之前，任何后续的调用将被忽略。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{Number}</code> <strong>initWidth</strong><br>The initial / original width of the 3rd party content </li>
<li><code>{Number}</code> <strong>initHeight</strong><br>The initial / original height of the 3rd party content </li>
<li><code>{Event}</code> <strong>cb</strong><br>An optional callback function that will be called as a notification of event status</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li><code>void</code></li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>第5.1节里的事件细节</li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- External Party tag --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="javascript"> </span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update</span>(<span class="params">status, data</span>) </span></div><div class="line">&#123; </div><div class="line"> </div><div class="line">&#125; </div><div class="line"><span class="keyword">if</span> (ext) &#123; </div><div class="line">  <span class="keyword">try</span> &#123; </div><div class="line">    ext.register(<span class="number">300</span>, <span class="number">250</span>, status_update); </div><div class="line"> </div><div class="line">alert(ext.meta(<span class="string">"context"</span>));  </div><div class="line"><span class="comment">//read some metadata passed in from the host side </span></div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123; </div><div class="line">    alert(<span class="string">"no SafeFrame available"</span>); </div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="5-3-函数-sf-ext-supports"><a href="#5-3-函数-sf-ext-supports" class="headerlink" title="5.3 函数 $sf.ext.supports"></a>5.3 函数 <code>$sf.ext.supports</code></h3><p><code>$sf.ext.supports()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>返回一个有代表这个特定容器的什么功能已被打开或关闭的键的对象。</p>
<p><strong>返回</strong></p>
<ul>
<li><code>{Object}</code><br>An object containing a list of SafeFrame container features that are available, defined as follows:<br>　<code>{Boolean} exp-ovr</code><br>Whether or not expansion is allowed in overlay mode. Default value is true.<br>　<code>{Boolean} exp-push</code><br>　Whether or not expansion is allowed in push mode. Push expansion, a method of content expansion in which Host content is “pushed” instead of expanding over the content, is not yet supported in SafeFrame but may be supported separately by the Host. Default value is false.<br>　<code>{Boolean} read-cookie</code><br>　Whether or not the host allows external party content to read host cookies. Default value is false.<br>　<code>{Boolean} write-cookie</code><br>　Whether or not the host allows external party content to write cookies to the host domain. Despite value of true, the host may reject cookie values when offered if deemed appropriate. Default value is false. </li>
</ul>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Sample JavaScript implementation </span></div><div class="line"><span class="comment">//Let's say that a 300x250 ad has been declared to fully expand to 400 </span></div><div class="line">pixels to the left and <span class="number">200</span> pixels to the top. </div><div class="line"> </div><div class="line"> </div><div class="line">function feature_check(which) </div><div class="line">&#123; </div><div class="line">  <span class="keyword">var</span> o = $sf.ext.supports(); </div><div class="line"> </div><div class="line">  <span class="keyword">return</span> (o &amp;&amp; o[which]); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">expand</span>(<span class="params"></span>) </span></div><div class="line">&#123; </div><div class="line">  <span class="keyword">if</span> (feature_check(<span class="string">"exp_push"</span>)) &#123; </div><div class="line">    $sf.ext.expand(&#123;l:<span class="number">400</span>,t:<span class="number">200</span>,push:<span class="literal">true</span>&#125;); </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-4-函数-sf-ext-geom"><a href="#5-4-函数-sf-ext-geom" class="headerlink" title="5.4 函数$sf.ext.geom"></a>5.4 函数<code>$sf.ext.geom</code></h3><p><code>$sf.ext.geom()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>所述的geom函数使SafeFrame容器的几何尺寸和位置，与它的与浏览器或应用程序窗口和其中网站内容正在被观看的设备的屏幕边界相关的内容交换。</p>
<blockquote>
<p><strong>网站实施注意事项</strong><br>如果调用，网站需要返回所请求的值。</p>
</blockquote>
<p>该信息可用于：</p>
<ul>
<li>决定内容扩展的可用的方向和尺寸</li>
<li>确定SafeFrame容器是否“在视图中”</li>
</ul>
<blockquote>
<p><strong>广告可见度注</strong><br>SafeFrame提供了可在根据接受的工业建议的可用性方面报告的信息；然而，SafeFrame不直接报告可见度指标。一个对于报告可见度是必要的指标是持续时间，它必须通过注册状态更新监听器来得到，以确定为<code>self.iv</code>被注册为<code>true</code>要用多久的持续时间。如果要了解关于<code>$ sf.ext.register</code>功能的详细信息，请查阅第5.2节。</p>
</blockquote>
<p><strong>返回</strong></p>
<ul>
<li><p><code>{Object} g</code><br>An object containing sub objects with geometric information about the container. Geometric information may be returned as described in the following lists</p>
<p><strong>win</strong><br>Identifies the location, width, and height (in pixels) of the browser or application window boundaries relative to the device screen.<br>　•  {Number} t<br>　The y coordinate (in pixels) of the top boundary of the browser or application window relative to the screen<br>　•  {Number} b<br>　The y coordinate (in pixels) of the bottom boundary of the browser or application window relative to the screen<br>　•  {Number} l<br>　The x coordinate (in pixels) of the left boundary of the browser or application window relative to the screen<br>　•  {Number} r<br>　The x coordinate (in pixels) of the right boundary of the browser or application window relative to the screen<br>　•  {Number} w<br>　The width (in pixels) of the browser or application window (win.r – win.l)<br>　•  {Number} h<br>　•  The height (in pixels) of the browser or application window (win.b – win.t)<br>　<br><strong>self</strong><br>Identifies the z-index and location, width, and height (in pixels) of the SafeFrame container relative to the browser or application window (win). In addition, width, height, and area percentage of SafeFrame content in view is provided, based on how much of the container is located within the boundaries of the browser or application window (win).<br>　•  {Number} t<br>　The y coordinate (in pixels) of the top boundary of the SafeFrame container<br>　•  {Number} l<br>　The x coordinate (in pixels) of the left side boundary of the SafeFrame container<br>　•  {Number} r<br>　The x coordinate (in pixels) of the right side boundary of the SafeFrame container (self.l + width of container)<br>　•  {Number} b<br>　The y coordinate (in pixels) of the bottom boundary of the SafeFrame container (self.t + height of container)<br>　•  {Number} xiv<br>　The percentage (%) of width for the SafeFrame container that is in view (formatted as “0.14” or “1”)<br>　•  {Number} yiv<br>　•  The percentage (%) of height for the SafeFrame container that is in view (formatted as “0.14” or “1”)<br>　•  {Number} iv<br>　The percentage (%) of area for the SafeFrame container that is in view (formatted as “0.14” or “1”)<br>　•  {Number} z<br>　The Z-index of the SafeFrame container<br>　•  {Number} w<br>　The width (in pixels) of the SafeFrame container<br>　•  {Number} h<br>　The height (in pixels) of the SafeFrame container<br>　<br><strong>exp</strong><br>Identifies the expected distance available for expansion within the host content along with information about whether controls allow the end user to scroll the page. If “scrollable,” the SafeFrame content can expand to dimensions greater than those provided.<br>　•  {Number} t<br>　The number of pixels that can be expanded upwards<br>　•  {Number} l<br>　The number of pixels that can be expanded left<br>　•  {Number} r<br>　The number of pixels that can be expanded right<br>　•  {Number} b<br>　The number of pixels that can be expanded down<br>　•  {Number/Boolean} xs<br>　A response that indicates whether the host content is scrollable along the x-axis (1 = scrollable; 0 = not scrollable)<br>　•  {Number/Boolean} yx<br>　A response that indicates whether the host content is scrollable along the y-axis (1 = scrollable; 0 = not scrollable)<br>　<br>由于计算几何信息和交换消息会影响性能，几何信息应只在以下时间段更新：</p>
<p>　<strong>SafeFrame容器的首次渲染</strong><br>　当SafeFrame容器首次被渲染时，<code>$sf.ext.geom</code>应被处理，并与要渲染的外部内容一起发送结果。<br>　<br>　<strong>当改变SafeFrame容器的大小或位置时</strong><br>　当使用下列功能之一改变容器尺寸或位置时，<code>$ sf.ext.geom</code>函数应该被处理：<br>　　o  <code>$sf.ext.expand</code><br>　　o  <code>$sf.ext.collapse</code><br>　　<br>　<strong>当来源于网站的外部更新被接收时</strong><br>　　o  收到来自从其中该容器的几何形状已经被网站自己更新的网站端的信息，例如强制内容折叠。查看注册回调消息。<br>　　o  在所有可视面积的滚动，但是只允许每秒一个更新（节流）。<br>　　o  在所有可视面积的大小调整，但是只允许每秒一个更新（节流）。</p>
</li>
</ul>
<blockquote>
<p><strong>网站实施注意事项</strong><br>对于滚动或调整事件，SafeFrames网站实施应该只侦听要么是裁剪或滚动上面的SafeFrame容器上的第一个父HTML元素的事件。</p>
</blockquote>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Sample JavaScript implementation </span></div><div class="line"><span class="comment">//Let's say that a 300x250 ad has been declared to fully expand to 400 pixels </span></div><div class="line">to the left and <span class="number">200</span> pixels to the top. </div><div class="line"> </div><div class="line">function expand() </div><div class="line">&#123; </div><div class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext, g, ex; </div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (ext) &#123; </div><div class="line">      <span class="keyword">try</span> &#123; </div><div class="line">        g  = ext.geom(); </div><div class="line">        ex  = g &amp;&amp; g.exp; </div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(ex.l) &gt;= <span class="number">400</span> &amp;&amp; <span class="built_in">Math</span>.abs(ex.t) &gt;= <span class="number">200</span>) &#123; </div><div class="line">            ext.expand(&#123;l:<span class="number">400</span>,t:<span class="number">200</span>&#125;); </div><div class="line">        &#125; </div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123; </div><div class="line">        <span class="comment">//do not expand, not enough room </span></div><div class="line">      &#125; </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">      <span class="comment">//api expansion not supported </span></div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status</span>) </span></div><div class="line">  &#123; </div><div class="line">   <span class="keyword">if</span> (status == <span class="string">"expanded"</span>) &#123; </div><div class="line">      <span class="comment">// The ad has finished expanding </span></div><div class="line">    &#125; </div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-5-函数-sf-ext-expand"><a href="#5-5-函数-sf-ext-expand" class="headerlink" title="5.5 函数$sf.ext.expand"></a>5.5 函数<code>$sf.ext.expand</code></h3><p><code>$sf.ext.expand(obj)</code></p>
<p>可用性：异步（仅第一个请求被接受;另外的请求被拒绝，直到最初的请求被处理）</p>
<p>此方法扩展SafeFrame容器到指定的几何位置，允许媒介扩张。每个方向上的像素是相对于由init寄存器方法声明的原始偏移值的绝对位置。如果没有初始化方法就调用此方法，一个错误可能会被抛出，而且它会被忽略。扩展方法只能从初始大小调用，以保持性能。</p>
<p>SafeFrame中不支持补间，所以每当它需要扩大到其最大尺寸时，任何动画必须由外部方在容器内进行处理和调用此方法。</p>
<p>至少所述偏移参数之一是强制性的。如果所有的参数丢失，调用将被忽略，而且可能会抛出一个错误。在这个方法结束时，外部方注册执行的状态。如果SafeFrame的iframe是已经在最大尺寸，调用将被忽略。</p>
<p><strong>参数：</strong></p>
<ul>
<li><code>{Object}</code> <strong>obj</strong><br>A descriptor object that defines the top, left, bottom, right coordinates for expansion. At minimum, 1 value must be specified. </li>
<li><code>{Number}</code> <strong>obj.t</strong><br>The new top coordinate (y) relative to the current top coordinate. </li>
<li><code>{Number}</code> <strong>obj.l</strong><br>The new left coordinate (x) relative to the current left coordinate. </li>
<li><code>{Number}</code> <strong>obj.r</strong><br>The new right coordinate (x+width) relative to the current right coordinate (x+width). </li>
<li><code>{Number}</code> <strong>obj.b</strong><br>The new bottom coordinate (y+height) relative to the current top coordinate (y+height). </li>
<li><p><code>{Boolean}</code> <strong>obj.push</strong><br>Whether or not expansion should push the host content, rather than overlay. </p>
<blockquote>
<p><strong>实施注意事项</strong><br>“推”的功能是一种在在外部内容扩展方向（或多个）上“推动”网站内容的拓展功能。对于支持推动扩大功能的技术不是直接由SafeFrame1.0规定的。网站必须明确声明Push是否在<code>$ sf.host.posConfig</code>对象的<code>supports</code>属性中被允许。如果允许，网站必须能够在技术上支持该功能。</p>
</blockquote>
</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li><strong><em>void</em></strong></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Sample JavaScript implementation </span></div><div class="line"><span class="comment">//Let's say that a 300x250 ad has been declared to fully expand to 400 </span></div><div class="line">pixels to the left and <span class="number">200</span> pixels to the top. </div><div class="line"> </div><div class="line">var expansionPending = <span class="literal">false</span>; </div><div class="line"><span class="keyword">var</span> expanded      = <span class="literal">false</span>; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">expand</span>(<span class="params"></span>) </span></div><div class="line">&#123; </div><div class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext; </div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (ext) &#123; </div><div class="line">      ext.expand(&#123;l:<span class="number">400</span>,t:<span class="number">200</span>&#125;); </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">      <span class="comment">//api expansion not supported </span></div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status</span>) </span></div><div class="line">  &#123; </div><div class="line">  <span class="keyword">if</span> (status == <span class="string">"expanded"</span>) &#123; </div><div class="line">      <span class="comment">// The ad has finished expanding </span></div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-6-函数-sf-ext-collapse"><a href="#5-6-函数-sf-ext-collapse" class="headerlink" title="5.6 函数$sf.ext.collapse"></a>5.6 函数<code>$sf.ext.collapse</code></h3><p><code>$sf.ext.collapse()</code></p>
<p>可用性：异步（仅第一个请求被接受;另外的请求被拒绝，直到最初的请求被处理）</p>
<p>这种方法折叠SafeFrame容器到原来的几何位置。这个初始大小应已在在调用此方法之前的初始化注册方法中被声明。如果此方法没有伴随着初始化注册方法被调用，它可能会抛出一个错误，并且将被忽略。如果已经在初始大小了，调用将被忽略。</p>
<p><strong>返回</strong></p>
<ul>
<li><code>Void</code></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Sample JavaScript implementation </span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">collapse</span>(<span class="params"></span>) </span></div><div class="line">&#123; </div><div class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext; </div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (ext) &#123; </div><div class="line">      ext.collapse(); </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">      <span class="comment">//api expansion not supported </span></div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status</span>) </span></div><div class="line">  &#123; </div><div class="line">   <span class="keyword">if</span> (status == <span class="string">"expanded"</span>) &#123; </div><div class="line">      <span class="comment">// Expanded </span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="string">"collapsed"</span>) &#123; </div><div class="line">      <span class="comment">//we called collapse </span></div><div class="line">    &#125; </div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-7-函数-sf-ext-status"><a href="#5-7-函数-sf-ext-status" class="headerlink" title="5.7 函数$sf.ext.status"></a>5.7 函数<code>$sf.ext.status</code></h3><p><code>$sf.ext.status()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>返回关于容器的当前状态的信息，例如，扩展命令是否正在等待处理等等。以下的是可被返回（更可能在后续版本中添加）的状态代码串的列表。一些字符串类似于在您调用<code>$ sf.ext.register</code>提供的的函数中收到的状态更新。</p>
<p><strong>返回</strong></p>
<ul>
<li><code>{String}</code> One of the following strings may be returned<br><strong>expanded</strong><br>Denotes that the container has been expanded.<br><strong>expanding</strong><br>Denotes that an expansion command is pending.<br><strong>collapsed</strong><br>Denotes that the container is in the default collapsed state.<br><strong>collapsing</strong><br>Denotes that a collapse command is pending. </li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>5.2 函数<code>$sf.ext.register</code></li>
</ul>
<h3 id="5-8-函数-sf-ext-meta"><a href="#5-8-函数-sf-ext-meta" class="headerlink" title="5.8 函数$sf.ext.meta"></a>5.8 函数<code>$sf.ext.meta</code></h3><p><code>$sf.ext.meta(propName, ownerKey)</code></p>
<p>用于检索关于由网站指定的SafeFrame的位置的元数据。网站可以指定有关第三方内容的其他元数据。网站指定使用<code>$sf.host.PosMeta</code>类此的元数据。</p>
<p>因为主机可能想使用一些这方面的数据为自己的目的，而不是与外方共享，外部第三方内容必须使用此功能来访问元数据信息。这样，外部第三方内容无法扫描任何网站不希望分享的值。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{String} propName</code><br>The name of the metadata value you want to read </li>
<li><code>{String} ownerKey</code> <em>(Optional)</em><br>The name of the owner object from which to read the property. By default this value is “shared” meaning look in common data. </li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li><code>{String|Number|Boolean}</code></li>
</ul>
<p>**例子：1 -检索共享的元数据值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//External Party JavaScript code (inside SafeFrame container) </span></div><div class="line"> </div><div class="line">  <span class="keyword">var</span> posID  = $sf.ext.meta(<span class="string">"pos"</span>);</div></pre></td></tr></table></figure></p>
<p>**例子：2 -检索非共享的元数据值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//External Party JavaScript code (inside SafeFrame container) </span></div><div class="line"><span class="comment">//"rmx" == owner of metadata blob, "sectionID" is key to retrieve </span></div><div class="line"> </div><div class="line">  <span class="keyword">var</span> sectionID  = $sf.ext.meta(<span class="string">"sectionID"</span>, <span class="string">"rmx"</span>);</div></pre></td></tr></table></figure></p>
<p><strong>相关章节</strong></p>
<ul>
<li>5.8 函数 <code>$sf.ext.meta</code></li>
</ul>
<h3 id="5-9-函数-sf-ext-cookie"><a href="#5-9-函数-sf-ext-cookie" class="headerlink" title="5.9 函数$sf.ext.cookie"></a>5.9 函数<code>$sf.ext.cookie</code></h3><p><code>$sf.ext.cookie(cookieName, cookieData)</code></p>
<p>可用性：异步（读/写要求传递函数到<code>$sf.ext.register</code>）</p>
<p>将消息发送到网站以在网站域名读或写cookie。请注意，如果网站支持此功能，cookie数据是不能直接从该函数返回，因为它是异步的。你必须传递一个函数到<code>$sf.ext.register</code>，然后这将在Cookie数据设置或检索时被调用。</p>
<blockquote>
<p><strong>网站实施注意事项</strong><br>允许一个外部方来读取或设置cookies，会带来某些安全页面，如登录页面，的安全风险。在允许之前，考虑允许cookie的读取或设置对于网页是否安全。</p>
</blockquote>
<p><strong>参数</strong></p>
<ul>
<li><code>{String} cookieName</code><br>The name of the cookie to set or read.   </li>
<li><code>{Object} cookieData</code>  <em>(Optional)</em><br>An object that contains the value, and potentially an expiration date, of a cookie to be set.  If not set, the Host assumes that External Party content is only interested in reading the Host cookie value. If set but no expiration date is given, the Host assumes that any cookie written to the Host domain is intended to remain indefinitely.<br>如果提供了以下参数:<br>　<code>{String} cookieData.info</code> <em>(Required)</em><br>　A string value for the cookie.<br>　<code>{Date} cookieData.expires</code> <em>(Optional)</em><br>　A date for when the cookie should expire. </li>
</ul>
<p><strong>例子1：读取一个网站cookie</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Sample JavaScript implementation </span></div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[“$sf”], sfAPI = sf &amp;&amp; sf.ext, myPubCookieName = </div><div class="line">“foo”, myPubCookieValue = “”, fetchingCookie = <span class="literal">false</span>; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">register_content</span>(<span class="params"></span>) </span></div><div class="line">&#123; </div><div class="line">  <span class="keyword">var</span> e; </div><div class="line">  <span class="keyword">try</span> &#123; </div><div class="line">    <span class="keyword">if</span> (sfAPI) sfAPI.register(<span class="number">300</span>,<span class="number">250</span>,status_update_handler); </div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123; </div><div class="line">    <span class="comment">//console.log(“no sfAPI -- &gt; “ + e.message); </span></div><div class="line">       sfAPI = <span class="literal">null</span>; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_host_cookie</span>(<span class="params"></span>) </span></div><div class="line">&#123; </div><div class="line">  <span class="keyword">var</span> e; </div><div class="line"> </div><div class="line">       <span class="keyword">try</span> &#123; </div><div class="line">      <span class="keyword">if</span> (sfAPI &amp;&amp; sfAPI.supports(“read-cookie”)) &#123; </div><div class="line">fetchingCookie = sfAPI.cookie(“foo”); </div><div class="line">      &#125; </div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123; </div><div class="line">      fetchingCookie = <span class="literal">false</span>; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status, data</span>) </span></div><div class="line">&#123; </div><div class="line">   <span class="keyword">if</span> (status == <span class="string">"read-cookie"</span>) &#123;  </div><div class="line">    myPubCookieValue = data; </div><div class="line">    <span class="comment">//now do whatever here since you have the cookie data </span></div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>例子2：写一个网站cookie</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Sample JavaScript implementation </span></div><div class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[“$sf”], sfAPI = sf &amp;&amp; sf.ext, myPubCookieName = </div><div class="line">“foo”, myPubCookieValue = “”, settingCookie = <span class="literal">false</span>; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">register_content</span>(<span class="params"></span>) </span></div><div class="line">&#123; </div><div class="line">  <span class="keyword">var</span> e; </div><div class="line">  <span class="keyword">try</span> &#123; </div><div class="line">    <span class="keyword">if</span> (sfAPI) sfAPI.register(<span class="number">300</span>,<span class="number">250</span>,status_update_handler); </div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123; </div><div class="line">    <span class="comment">//console.log(“no sfAPI -- &gt; “ + e.message); </span></div><div class="line">       sfAPI = <span class="literal">null</span>; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_host_cookie</span>(<span class="params">newVal</span>) </span></div><div class="line">&#123; </div><div class="line">  <span class="keyword">var</span> e, cookieData = &#123;value:newVal,expires:<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">11</span>, <span class="number">1</span>)&#125;; </div><div class="line"> </div><div class="line">       <span class="keyword">try</span> &#123; </div><div class="line">      <span class="keyword">if</span> (sfAPI &amp;&amp; sfAPI.supports(“write-cookie”)) &#123; </div><div class="line">settingCookie = sfAPI.cookie(“foo”, cookieData); </div><div class="line">      &#125; </div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123; </div><div class="line">      settingCookie = <span class="literal">false</span>; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status, data</span>) </span></div><div class="line">&#123; </div><div class="line">   <span class="keyword">if</span> (status == <span class="string">"write-cookie"</span>) &#123; </div><div class="line">    myPubCookieValue = data.info; </div><div class="line">    <span class="comment">//now do whatever here since the write was successful </span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == “failed” &amp;&amp; data.cmd == “write-cookie”) &#123; </div><div class="line">    <span class="comment">//data.cmd contains original command sent </span></div><div class="line">       <span class="comment">//data.reason contains a description of failure </span></div><div class="line">    <span class="comment">//data.info contains the object of information sent to host </span></div><div class="line">    settingCookie = <span class="literal">false</span>; </div><div class="line">    <span class="comment">//cookie not allowed to be set </span></div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5-10-函数-sf-ext-inViewPercentage"><a href="#5-10-函数-sf-ext-inViewPercentage" class="headerlink" title="5.10 函数$sf.ext.inViewPercentage"></a>5.10 函数<code>$sf.ext.inViewPercentage</code></h3><p><code>$sf.ext.inViewPercentage()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>返回其中容器是在屏幕上视图内的区域的百分比，作为0到100之间的整数。</p>
<blockquote>
<p><strong>实施注意事项</strong><br>在这个函数提供的信息在<code>$ sf.ext.geom</code>函数内是可用的，作为<code>self.iv</code>值返回。此附加函数被提供作为更方便访问该信息的便利。</p>
</blockquote>
<p><strong>返回：</strong></p>
<ul>
<li><code>{Number}</code> The percentage of area that a container is in view on the screen </li>
</ul>
<p><strong>行业标准可广告见度</strong><br>业界公认的可见度指标可能需要报告的可见曝光的持续时间组件。持续时间可以通过计算<code>$ sf.ext.inViewPercentage</code>值多久达到或超过一个可见曝光的最小百分比来决定。</p>
<p>下面的代码示例演示了注册的”监听者”是怎样可能会确定持续时间（粗体值指被业界公认的广告能见度值代替）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> viewableTimerId = <span class="number">0</span>; </div><div class="line"><span class="keyword">var</span> viewableFired = <span class="literal">false</span>; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nodifyViewablePassed</span>(<span class="params"></span>) </span></div><div class="line">&#123; </div><div class="line"><span class="keyword">if</span>(viewableFired) <span class="keyword">return</span>; <span class="comment">// fire beacon </span></div><div class="line">viewableFired = <span class="literal">true</span>; </div><div class="line">viewableTimerId = <span class="number">0</span>; </div><div class="line">&#125;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update</span>(<span class="params">status, data</span>)  </span></div><div class="line">&#123;  </div><div class="line"><span class="comment">// notify if 50% in view for 1 second  </span></div><div class="line"><span class="keyword">if</span>($sf.ext.inViewPercentage() &gt; <span class="number">50</span>) </div><div class="line">&#123;   </div><div class="line"><span class="keyword">if</span>(viewableTimerId == <span class="number">0</span>)&#123; </div><div class="line">viewableTimerId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span></div><div class="line">&#123;notifyViewablePassed(); &#125;, <span class="number">1000</span>);&#125; </div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span>&#123; </div><div class="line">clearTimeout(viewableTimerId); </div><div class="line">&#125;  </div><div class="line">&#125; </div><div class="line"> </div><div class="line">$sf.ext.register(<span class="number">160</span>, <span class="number">650</span>, status_update)</div></pre></td></tr></table></figure></p>
<h3 id="5-11-函数-sf-ext-winHasFocus"><a href="#5-11-函数-sf-ext-winHasFocus" class="headerlink" title="5.11 函数$sf.ext.winHasFocus"></a>5.11 函数<code>$sf.ext.winHasFocus</code></h3><p><code>$sf.ext.winHasFocus()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>返回是否浏览器窗口或包含SafeFrame聚焦(in focus)，或当前活动(active)的标签。</p>
<p><strong>返回：</strong></p>
<ul>
<li><code>{Boolean} True if the browser window / tab has focus, otherwise false</code></li>
</ul>
<p><strong>版本要求</strong></p>
<ul>
<li>“1.1” Requires specVersion 1.1 as opposed to original functionality in “1.0”</li>
</ul>
<p><strong>与广告可见度的关系</strong><br>除了几何坐标，一个SafeFrame内的内容可能想知道主窗口是当前活动，或聚焦。该函数提供了信息，而且在报告可见度指标时可以被考虑。</p>
<blockquote>
<p><strong>广告可见度注</strong><br><code>winHasFocus</code>函数提供了可被认为是可见度指标的部分的信息。这个函数报告的信息并不能决定或报告可见度。可见度指标是由行业和参与报告可见度的媒体的各方确定。</p>
</blockquote>
<p>下面的代码示例演示了一个注册的监听器会如何确定主浏览器窗口或选项卡是否聚焦。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> win_has_focus = <span class="literal">false</span>; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update</span>(<span class="params">status, data</span>) </span></div><div class="line">&#123; </div><div class="line"><span class="comment">// notify if 50% in view for 1 second </span></div><div class="line"><span class="keyword">if</span>(status == “focus-change”) &#123; </div><div class="line">    win_has_focus = $sf.ext.winHasFocus(); </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">$sf.ext.register(<span class="number">160</span>, <span class="number">650</span>, status_update)</div></pre></td></tr></table></figure></p>
<hr>
<p>end</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js学习笔记一：入门]]></title>
      <url>http://seminelee.github.io/2016/08/18/vue-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　vue是法语中视图的意思，Vue.js是一个轻巧、高性能、可组件化的MVVM库。<br>　　<code>MV*</code>可能大家都经常听说，我们先来理解一下<code>MV*</code>的概念。</p>
<h3 id="出现的背景"><a href="#出现的背景" class="headerlink" title="出现的背景"></a>出现的背景</h3><p>　　MVC开始是存在于桌面程序中的，但由于后端的mvc框架的v层越来越重，后端的MVC思想就搬移到了前端。随着前端代码越来越重，能力越来越大，重前端的系统越来越多地涌现出来。前端为主的MV*时代中，前端在MVC的结构指导下分为model(模型), view(视图)， controller(控制器)三部分。而controller慢慢演化为presenter和viewmodel。MVC, MVP, MVVM框架不断涌现。<br><a id="more"></a></p>
<h3 id="MVC-MVP-MVVM"><a href="#MVC-MVP-MVVM" class="headerlink" title="MVC, MVP, MVVM"></a>MVC, MVP, MVVM</h3><ul>
<li><p>MVC(model-view-controller)，如backbone, angular(较高版本是mvvm, 也许说它是MVW更准确)。<br>　　View: 与页面上元素直接相关的部分，包括html，CSS和一部分直接控制页面元素的JS。它可以从Model中得到数据，并将其显示到页面上。<br>　　Model: 与后端的沟通、AJAX请求以及对数据的处理。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者。<br>　　Controller: Model和View的粘合剂。Controller将View方面的请求转发给合适的Model，作为Model的观察者，获取Model的变更,在必要时更新View。</p>
</li>
<li><p>MVP(model-view-presenter)使用此模型的框架不多，现在几乎倒向MVVM。MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。<br>　　Presenter，与Controller一样，接收View的命令，对Model进行操作；与Controller不同的是Presenter会反作用于View，Model的变更通知首先被Presenter获得，然后Presenter再去更新View。</p>
</li>
<li>MVVM(model-view-viewmodel)如Vue.js。将Controller改为ViewModel。它与MVP的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在ViewModel。<br>　　下图来自<a href="http://blog.csdn.net/napolunyishi/article/details/22722345" target="_blank" rel="external">对MVC、MVP、MVVM的理解</a>，清晰地说明它们之间的区别<br><img src="/static/2016/08/mvc.png" alt="mvc,mvp和mvvm"></li>
</ul>
<h2 id="Vue-js起步"><a href="#Vue-js起步" class="headerlink" title="Vue.js起步"></a>Vue.js起步</h2><h3 id="简单介绍一下"><a href="#简单介绍一下" class="headerlink" title="简单介绍一下"></a>简单介绍一下</h3><ul>
<li>尤雨溪老师写的一个用于创建 web交互界面的库，是一个精简的MVVM，和其他库相比是一个小而美的库</li>
<li>官方文档很清晰，比 Angular 简单易学</li>
<li>采用双向绑定，用解耦的组件组合你的应用程序<br><img src="/static/2016/08/vue1.png" alt="vue.js概况"></li>
</ul>
<p>　　下图是<a href="http://vuejs.org/" target="_blank" rel="external">vue.js官网</a>上的双向绑定的小例子。首先是VM -&gt; V，VM中的data里的message变化，会自动反映在V中的p标签里大括号内的message；V -&gt; VM，V中input里输入的值，会自动反映到VM中的message值。所以，你在输入框中输入的文字会被实时显示成上方的文字。<br><img src="/static/2016/08/vuedemo.png" alt="vue.js官网例子"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>　　安装步骤<a href="https://vuejs.org.cn/guide/installation.html" target="_blank" rel="external">vue.js官网</a>上介绍得十分清楚。这里我推荐先安装<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝镜像</a>，再进行安装Vue.js官方命令行工具，这样会更快。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 全局安装 cnpm淘宝镜像</span></div><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line"><span class="comment"># 全局安装 vue-cli</span></div><div class="line">$ cnpm install -g vue-cli</div><div class="line"><span class="comment"># 创建一个基于 "webpack" 模板的新项目</span></div><div class="line">$ vue init webpack my-project</div><div class="line"><span class="comment"># 安装依赖，走你</span></div><div class="line">$ <span class="built_in">cd</span> my-project</div><div class="line">$ cnpm install</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure></p>
<h2 id="一些常用的指令"><a href="#一些常用的指令" class="headerlink" title="一些常用的指令"></a>一些常用的指令</h2><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>　　用法：在表单控件(<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>)上创建双向绑定。<br>　　例子：输入框中初始化文字是”hello vue.js”，而你在输入框中输入的文字会被实时显示成上方的文字。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;newItem&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"newItem"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el:<span class="string">'#app'</span>,</div><div class="line">    data: &#123;</div><div class="line">        newItem:<span class="string">'hello vue.js.'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>　　用法：基于源数据将元素或模板块重复数次，简单来说就是列表渲染。如果之前学过Angular会觉得很相似。<br>　　例子：会显示列表，列表中有”No.1”、”No.2”。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">    &#123;&#123;item.label&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el:<span class="string">'#app'</span>,</div><div class="line">    data: &#123;</div><div class="line">        newItem:<span class="string">'hello vue.js.'</span>,</div><div class="line">        items: [</div><div class="line">        	&#123;label: <span class="string">"No.1"</span>,isFinished: <span class="literal">false</span>&#125;,</div><div class="line">        	&#123;label: <span class="string">"No.2"</span>,isFinished: <span class="literal">true</span>&#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>　　用法：绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符（如.stop、.prevent等）也可以省略。<br>　　例子：<code>&lt;li&gt;</code>标签上绑定了点击事件，每次点击会改变item的isFinished属性。v-on:click可以缩写成@click。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-on:click</span>=<span class="string">"toggleFinish(item)"</span>&gt;</span></div><div class="line">    &#123;&#123;item.label&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    methods: &#123;</div><div class="line">      toggleFinish: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        item.isFinished = !item.isFinished</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>　　用法：动态地绑定一个或多个 attribute，或一个组件prop到表达式。在绑定 class 或 style 时，支持其它类型的值，如数组或对象；在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。<br>　　例子：如果<code>&lt;li&gt;</code>的数据item.isFinished是true，<code>&lt;li&gt;</code>的class就是finished，文字颜色就会变成#ccc。v-bind:class可以缩写成:class。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;finished: item.isFinished&#125;"</span> <span class="attr">v-on:click</span>=<span class="string">"toggleFinish(item)"</span>&gt;</span></div><div class="line">    &#123;&#123;item.label&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.finished</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="父向子组件传参"><a href="#父向子组件传参" class="headerlink" title="父向子组件传参"></a>父向子组件传参</h3><p>　　例子：App.vue为父，引入componetA组件之后，则可以在template中使用<component-a>标签（注意驼峰写法要改成componet-a写法，因为html对大小写不敏感，componenta与componentA对于它来说是一样的，不好区分，所以使用小写-小写这种写法）。而子组件componetA中，声明props参数’msgfromfa’之后，就可以收到父向子组件传的参数了。例子中将msgfromfa显示在<code>&lt;p&gt;</code>标签中。<br>App.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">component-a</span> <span class="attr">msgfromfa</span>=<span class="string">"(Just Say U Love Me)"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></div></pre></td></tr></table></figure></component-a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	<span class="keyword">new</span> Vue(&#123;</div><div class="line">	    components: &#123;</div><div class="line">	      componentA</div><div class="line">	    &#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>componentA.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msgfromfa &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	props: [<span class="string">'msgfromfa'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="父向子组件传参（-broadcast）"><a href="#父向子组件传参（-broadcast）" class="headerlink" title="父向子组件传参（.$broadcast）"></a>父向子组件传参（.$broadcast）</h3><p>　　用法：vm.$broadcast( event, […args] )广播事件，通知给当前实例的全部后代。因为后代有多个枝杈，事件将沿着各“路径”通知。<br>　　例子：父组件App.vue中<code>&lt;input&gt;</code>绑定了键盘事件，回车触发addNew方法，广播事件”onAddnew”，并传参this.items。子组件componentA中，注册”onAddnew”事件，打印收到的参数items。<br>App.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"newItem"</span> @<span class="attr">keyup.enter</span>=<span class="string">"addNew"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	<span class="keyword">new</span> Vue(&#123;</div><div class="line">		methods: &#123;</div><div class="line">		  addNew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		    <span class="keyword">this</span>.$broadcast(<span class="string">'onAddnew'</span>, <span class="keyword">this</span>.items)</div><div class="line">		  &#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>componentA.vue中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	events: &#123;</div><div class="line">	    <span class="string">'onAddnew'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">items</span>)</span>&#123;</div><div class="line">	      <span class="built_in">console</span>.log(items)</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="子组件向父传参（-emit）"><a href="#子组件向父传参（-emit）" class="headerlink" title="子组件向父传参（.$emit）"></a>子组件向父传参（.$emit）</h3><p>　　用法：vm.$emit( event, […args] )，触发当前实例上的事件。附加参数都会传给监听器回调。<br>　　例子：App.vue中component-a绑定了自定义事件”child-say”。子组件componentA中，单击按钮后触发”child-say”事件，并传参msg给父组件。父组件中listenToMyBoy方法把msg赋值给childWords，显示在<code>&lt;p&gt;</code>标签中。<br>App.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Do you like me? &#123;&#123;childWords&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">component-a</span> <span class="attr">msgfromfa</span>=<span class="string">"(Just Say U Love Me)"</span> <span class="attr">v-on:child-say</span>=<span class="string">"listenToMyBoy"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	<span class="keyword">new</span> Vue(&#123;</div><div class="line">		data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		    <span class="keyword">return</span> &#123;</div><div class="line">		      childWords: <span class="string">""</span></div><div class="line">		    &#125;</div><div class="line">		&#125;,</div><div class="line">		components: &#123;</div><div class="line">		  componentA</div><div class="line">		&#125;,</div><div class="line">	    methods: &#123;</div><div class="line">		    listenToMyBoy: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>)</span>&#123;</div><div class="line">		      <span class="keyword">this</span>.childWords = msg</div><div class="line">		    &#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>componentA.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"onClickMe"</span>&gt;</span>like!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	    <span class="keyword">return</span> &#123;</div><div class="line">	      msg: <span class="string">'I like you!'</span></div><div class="line">	    &#125;</div><div class="line">	&#125;,</div><div class="line">    methods: &#123;</div><div class="line">      onClickMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.$emit(<span class="string">'child-say'</span>,<span class="keyword">this</span>.msg);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="子组件向父传参（-dispatch）"><a href="#子组件向父传参（-dispatch）" class="headerlink" title="子组件向父传参（.$dispatch）"></a>子组件向父传参（.$dispatch）</h3><p>　　用法：vm.$dispatch( event, […args] )，派发事件，首先在实例上触发它，然后沿着父链向上冒泡在触发一个监听器后停止。<br>　　例子：App.vue中events中注册”child-say”事件。子组件componentA中，单击按钮后触发”child-say”事件，并传参msg给父组件。父组件中”child-say”方法把msg赋值给childWords，显示在<code>&lt;p&gt;</code>标签中。<br>App.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Do you like me? &#123;&#123;childWords&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">component-a</span> <span class="attr">msgfromfa</span>=<span class="string">"(Just Say U Love Me)"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	<span class="keyword">new</span> Vue(&#123;</div><div class="line">		events: &#123;</div><div class="line">		    <span class="string">'child-say'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">		      <span class="keyword">this</span>.childWords = msg</div><div class="line">		    &#125;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>componentA.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"onClickMe"</span>&gt;</span>like!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	    <span class="keyword">return</span> &#123;</div><div class="line">	      msg: <span class="string">'I like you!'</span></div><div class="line">	    &#125;</div><div class="line">	&#125;,</div><div class="line">    methods: &#123;</div><div class="line">      onClickMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.$dispatch(<span class="string">'child-say'</span>,<span class="keyword">this</span>.msg);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这里只提及了一些指令，更多功能建议在官网上刷一遍<a href="http://vuejs.org.cn/api/#vm-emit" target="_blank" rel="external">API文档</a>。</p>
<h2 id="做一个todolist"><a href="#做一个todolist" class="headerlink" title="做一个todolist"></a>做一个todolist</h2><p>　　用以上的指令写一个简单的demo。实现添加事情，删除事情，点击事情表示事情已完成，点赞等功能。代码思路源自慕课网教程，我作了一些修改。<br>　　详细代码如下：</p>
<h3 id="src-App-vue"><a href="#src-App-vue" class="headerlink" title="src/App.vue"></a>src/App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"newItem"</span> @<span class="attr">keyup.enter</span>=<span class="string">"addNew"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;finished: item.isFinished&#125;"</span> <span class="attr">v-on:click</span>=<span class="string">"toggleFinish(item)"</span>&gt;</span></div><div class="line">        ❤ &#123;&#123;item.label&#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-on:click</span>=<span class="string">"deleteThis(item)"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Do you like me? &#123;&#123;childWords&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">component-a</span> <span class="attr">msgfromfa</span>=<span class="string">"(Just Say U Love Me)"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">'./store'</span></div><div class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></div><div class="line"><span class="comment">//相当于module.export</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">/*function data()&#123;</span></div><div class="line">    return...</div><div class="line">  &#125;*/</div><div class="line">  <span class="comment">/*相当于var vue = new vue(&#123;data: function()&#123;&#125;&#125;)*/</span></div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      title: <span class="string">'TODO LIST'</span>,</div><div class="line">      items: Store.fetch() || [],</div><div class="line">      newItem: <span class="string">''</span>,</div><div class="line">      childWords: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  components: &#123;</div><div class="line">    componentA</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    items: &#123;</div><div class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">items</span>)</span>&#123;</div><div class="line">        Store.save(items)</div><div class="line">      &#125;,</div><div class="line">      deep: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  events: &#123;</div><div class="line">    <span class="string">'child-say'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.childWords = msg</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    toggleFinish: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">      item.isFinished = !item.isFinished</div><div class="line">    &#125;,</div><div class="line">    addNew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.items.push(&#123;</div><div class="line">        label: <span class="keyword">this</span>.newItem,</div><div class="line">        isFinished: <span class="literal">false</span></div><div class="line">      &#125;)</div><div class="line">      <span class="keyword">this</span>.newItem = <span class="string">''</span></div><div class="line">      <span class="keyword">this</span>.$broadcast(<span class="string">'onAddnew'</span>, <span class="keyword">this</span>.items)</div><div class="line">    &#125;,</div><div class="line">    listenToMyBoy: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.childWords = msg</div><div class="line">    &#125;,</div><div class="line">    deleteThis: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.items.splice(<span class="keyword">this</span>.items.indexOf(item), <span class="number">1</span>)</div><div class="line">      Store.save(<span class="keyword">this</span>.items)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">*&#123;</div><div class="line">  margin: 0;</div><div class="line">  padding: 0;</div><div class="line">&#125;</div><div class="line">html &#123;</div><div class="line">  height: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body &#123;</div><div class="line">  display: flex;</div><div class="line">  align-items: center;</div><div class="line">  justify-content: center;</div><div class="line">  height: 100%;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#app &#123;</div><div class="line">  color: #2c3e50;</div><div class="line">  font-family: Source Sans Pro, Helvetica, sans-serif;</div><div class="line">  text-align: center;</div><div class="line">  width: 60%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#app a &#123;</div><div class="line">  color: #42b983;</div><div class="line">  text-decoration: none;</div><div class="line">&#125;</div><div class="line">#app h1:nth-child(1) &#123;</div><div class="line">  line-height: 3;</div><div class="line">  position: absolute;</div><div class="line">  top: 10%;</div><div class="line">&#125;</div><div class="line">#app input &#123;</div><div class="line">  width: 60%;</div><div class="line">  line-height: 24px;</div><div class="line">  font-size: 24px;</div><div class="line">  position: absolute;</div><div class="line">  top: 25%; left: 20%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ul &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 35%;</div><div class="line">  text-align: left;</div><div class="line">  width: 60%;</div><div class="line">  height: 45%;</div><div class="line">  overflow: auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ul li &#123;</div><div class="line">  list-style: none;</div><div class="line">  line-height: 2;</div><div class="line">  font-size: 24px;</div><div class="line">&#125;</div><div class="line">span &#123;</div><div class="line">  font-size: 16px;</div><div class="line">  color: #fff;</div><div class="line">  padding: 2px 5px;</div><div class="line">  text-align: right;</div><div class="line">  background-color: red;</div><div class="line">  border-radius: 5px;</div><div class="line">&#125;</div><div class="line">.logo &#123;</div><div class="line">  width: 100px;</div><div class="line">  height: 100px</div><div class="line">&#125;</div><div class="line">.finished &#123;</div><div class="line">  color: #ccc;</div><div class="line">&#125;</div><div class="line">hr &#123;</div><div class="line">  ;border-top:1px dashed #ccc;</div><div class="line">&#125;</div><div class="line">p &#123;</div><div class="line">  text-align: left;</div><div class="line">  position: absolute;</div><div class="line">  bottom: 10%;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="src-components-componentA-vue"><a href="#src-components-componentA-vue" class="headerlink" title="src/components/componentA.vue"></a>src/components/componentA.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msgfromfa &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"onClickMe"</span>&gt;</span>like!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      msg: <span class="string">'I like you!'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  props: [<span class="string">'msgfromfa'</span>],</div><div class="line">  events: &#123;</div><div class="line">    <span class="string">'onAddnew'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">items</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(items)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    onClickMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.$dispatch(<span class="string">'child-say'</span>,<span class="keyword">this</span>.msg);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#42b983</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">button</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">10%</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">20%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background-color</span>: green;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">5px</span>;</div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.hello</span> <span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">5%</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="src-store-js"><a href="#src-store-js" class="headerlink" title="src/store.js"></a>src/store.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> STORAGE_KEY = <span class="string">'todos-vuejs'</span><span class="comment">//es6语法 const定义一个常量</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">	fetch () &#123;<span class="comment">//es6语法 相当于 fetch:function()&#123;&#125;</span></div><div class="line">		<span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(STORAGE_KEY) || <span class="string">'[]'</span>)</div><div class="line">	&#125;,</div><div class="line">	save (items) &#123;</div><div class="line">		<span class="built_in">window</span>.localStorage.setItem(STORAGE_KEY, <span class="built_in">JSON</span>.stringify(items))</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　完成后如下图：<br><img src="/static/2016/08/todolist.png" alt="ToDoList"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.imooc.com/view/694" target="_blank" rel="external">vuejs入门基础（慕课网视频）</a></li>
<li><a href="https://segmentfault.com/a/1190000003968020" target="_blank" rel="external">Vue.js 快速入门</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="external">谈谈MVC模式</a></li>
<li><a href="http://zakwu.me/node/assets/ppts/tpls/bigFe.html" target="_blank" rel="external">大前端技术分享</a></li>
<li><a href="http://blog.csdn.net/napolunyishi/article/details/22722345" target="_blank" rel="external">对MVC、MVP、MVVM的理解</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记之对象及继承]]></title>
      <url>http://seminelee.github.io/2016/08/07/ob/</url>
      <content type="html"><![CDATA[<h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><p>　　ES5中有两种属性，数据属性和访问器属性。<br>　　数据属性包括[[writable]]（能否修改属性的值）、[[value]]等等；<br>　　访问器属性包括[[Configurable]]（能否通过delete删除属性、能否修改属性的特性）、[[Enumerable]]（能否通过for-in循环返回属性）、[[Get]]、[Set]]<br>　　要修改属性则使用Object.defineProperty()，这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中描述符对象的属性必须是：configurable、enumerable、writable和value。如下面的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">	configurable: <span class="literal">false</span>,</div><div class="line">	value: <span class="string">"Nicholas"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">alert(person.name); <span class="comment">//"Nicholas"</span></div><div class="line"><span class="keyword">delete</span> person.name;</div><div class="line">alert(person.name); <span class="comment">//"Nicholas"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>　　也可以使用Object.defineProperties()定义多个属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> book = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperties(book,&#123;</div><div class="line">	_year: &#123;</div><div class="line">		value: <span class="number">2004</span></div><div class="line">	&#125;,</div><div class="line">	edition: &#123;</div><div class="line">		value: <span class="number">1</span></div><div class="line">	&#125;,</div><div class="line">	year: &#123;</div><div class="line">		get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">		&#125;,</div><div class="line">		set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(newValue &gt; <span class="number">2004</span>) &#123;</div><div class="line">				<span class="keyword">this</span>._year = newValue;</div><div class="line">				<span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">	o.name = name;</div><div class="line">	o.age = age;</div><div class="line">	o.job = job;</div><div class="line">	o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div></pre></td></tr></table></figure>
<p>　　抽象了出案件具体对象的过程，每次调用函数会返回一个对象</p>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.job = job;</div><div class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div><div class="line"></div><div class="line">alert(person1.constructor == Person);<span class="comment">//true</span></div><div class="line">alert(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></div><div class="line">alert(person1 <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>　　构造函数没有显性地创建对象；直接将属性和方法赋给了this对象；没有return语句。<br>　　创建实例的步骤是这样的：创建一个新对象；将构造函数的作用于赋给新对象（this指向这个新对象）；执行构造函数中的代码；返回新对象。<br>　　我们也可以将构造函数当做函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</div><div class="line"><span class="built_in">window</span>.sayName(); <span class="comment">//"Greg"</span></div><div class="line"></div><div class="line"><span class="comment">//在另一个对象的作用域中调用</span></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">Person.call(o, <span class="string">"Kristen"</span>, <span class="number">25</span>, <span class="string">"Nurse"</span>);</div><div class="line">o.sayName();</div></pre></td></tr></table></figure>
<p>　　而构造函数的主要问题就是，每个方法都要在每个实例上重新创建一遍，不同实例上的同名函数是不相等的。</p>
<h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>　　原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。即不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。<br>看下面的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">	name : <span class="string">"Nicholas"</span>,</div><div class="line">	age : <span class="number">29</span>,</div><div class="line">	job : <span class="string">"Software Engineer"</span>,</div><div class="line">	sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="keyword">this</span>.name);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> Person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//false</span></div><div class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> Person1);<span class="comment">//true</span></div><div class="line"></div><div class="line">person1.name = <span class="string">"Greg"</span>;</div><div class="line">alert(person1.name);<span class="comment">//"Greg"  ——来自实例</span></div><div class="line">alert(hasPrototypeProperty(person, <span class="string">"name"</span>));<span class="comment">//false</span></div><div class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//true</span></div><div class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> Person1);<span class="comment">//true</span></div><div class="line"></div><div class="line">alert(person2.name);<span class="comment">//"Nicholas"  ——来自原型</span></div><div class="line">alert(person2.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//false</span></div><div class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> Person1);<span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> person1.name;</div><div class="line">alert(person1.name);<span class="comment">//"Nicholas"  ——来自原型</span></div><div class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//false</span></div><div class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> Person1);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>　　当然原型对象也有缺点：所有实例在默认情况下都取得相同的属性值，即共享性。这个问题尤其对于包含引用类型值的属性来说更为突出。<br>　　所以，组合使用构造函数模式与原型模式是更好的选择。即在构造函数中定义实例属性，而所有实例共享的属性在原型中定义。</p>
<h2 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h2><p>　　JavaScript主要是依靠原型链实现继承。<br>　　什么是原型链？我们来看看构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.subProperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承了SuperType</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue()); <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>　　instance.getSuperValue()调用时会经历三个步骤：</p>
<ul>
<li>搜索实例；</li>
<li>搜索SubType.prototype；</li>
<li>搜索SuperType.prototype，最后一步才找到方法。</li>
</ul>
<p>　　而所有函数的默认原型都是Object的实例，所以完整的原型链如下图：<br><img src="http://img.blog.csdn.net/20160807001109843" alt="来自《JavaScript高级程序设计（第3版）》"><br>　　即<code>instance.__proto__</code>（instance的原型）指向SubType.prototype，<code>SubType.prototype.__proto__</code>指向SuperType.prototype，而<code>SuperType.prototype.__proto__</code>指向Object.prototype，最后<code>Object.prototype.__proto__</code>指向null。<br>　　果然对象搞到头还是空啊！（开个玩笑==）</p>
<h2 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h2><p>　　原型链可以用来实现继承，但它也存在一些问题。<br>　　最主要的问题就是在创建原型对象中提及的，包含引用类型值的原型属性会被所有实例共享。</p>
<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><p>　　鉴于上面的问题，我们可以通过使用apply()和call()在新创建的对象上执行构造函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	SuperType.call(<span class="keyword">this</span>);<span class="comment">//继承SuperType</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.colors.push(<span class="string">"black"</span>);</div><div class="line">alert(instance1.colors); <span class="comment">//"red,blue,green,black"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance2.colors); <span class="comment">//"red,blue,green"</span></div></pre></td></tr></table></figure></p>
<p>　　实际上，我们在新创建的SubType实例的环境下调用了SuperType构造函数。这样，SubType的每个实例就都会有自己的colors属性的副本了。</p>
<p>　　此外，还有组合继承，原型式继承，寄生式继承等。脑袋内存有限，这里不再作探究。<br>本文主要参考《JavaScript高级程序设计（第3版）》。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《JavaScript高级程序设计（第3版）》</p>
<h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p><a href="http://blog.csdn.net/SemineLee/article/details/52140233" target="_blank" rel="external">前端重点知识整理（JavaScript）四：对象及继承</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记之闭包]]></title>
      <url>http://seminelee.github.io/2016/08/06/bibao/</url>
      <content type="html"><![CDATA[<h2 id="作用域相关定义"><a href="#作用域相关定义" class="headerlink" title="作用域相关定义"></a>作用域相关定义</h2><p>&emsp;&emsp;在说闭包之前，我们首先说一下作用域。<br>&emsp;&emsp;JavaScript中有全局作用域，函数作用域。看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;<span class="comment">//全局作用域中定义变量</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">20</span>;<span class="comment">//函数作用域中定义变量</span></div><div class="line">&#125;)();</div><div class="line"><span class="built_in">console</span>.log(a);<span class="comment">//可以访问全局变量</span></div><div class="line"><span class="built_in">console</span>.log(b);<span class="comment">//error, b is not defined</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;JavaScript是没有块级作用域的。看下面的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> &#123;a:<span class="number">1</span>,b:<span class="number">2</span>&#125;)&#123;</div><div class="line">	<span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(item); <span class="comment">//没有块级作用域，可以访问item</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里顺带一提，ES6提出了块级作用域及新变量声明（let）。<br><a id="more"></a><br>&emsp;&emsp;JS使用var声明变量，以function来划分作用域，大括号“{}” 却限定不了var的作用域。用var声明的变量具有变量提升（declaration hoisting，即先试用后声明不报错）的效果。<br>&emsp;&emsp;ES6里增加了一个let，可以在{}， if， for里声明。用法同var，但作用域限定在块级，let声明的变量不存在变量提升。</p>
<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>维基百科是这样说的：</p>
<blockquote>
<p>在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。<br>闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。</p>
</blockquote>
<p>&emsp;&emsp;JavaScript之所以有闭包，是因为它是一个第一类函数特性的语言，即可用把函数当做对象去传递作为返回值。<br>&emsp;&emsp;看下面的函数，对于这种函数，当调用函数outer()之后，局部变量localVal就可以被释放了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> localVal = <span class="number">30</span>;</div><div class="line">	<span class="keyword">return</span> localVal;</div><div class="line">&#125;</div><div class="line">outer();<span class="comment">//30</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;在JavaScript中，函数也是对象，并且函数也可以作为返回值也可以传参，函数里也可以套用别的函数。<br>&emsp;&emsp;对于下面的函数，调用函数outer()时，返回的是匿名函数，这个匿名函数里面依然可以访问外面的局部变量localVal。在调用outer()之后，调用func()，依然可以访问外部函数的局部变量localVal，localVal不会被释放。<br>&emsp;&emsp;这就是闭包。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> localVal = <span class="number">30</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> localVal;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func = outer();</div><div class="line">func();<span class="comment">//30</span></div></pre></td></tr></table></figure></p>
<h2 id="闭包无处不在"><a href="#闭包无处不在" class="headerlink" title="闭包无处不在"></a>闭包无处不在</h2><p>&emsp;&emsp;如下面的函数，点击事件中依然可以访问外部函数的局部变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> localData = <span class="string">"localData here"</span>;</div><div class="line">	<span class="built_in">document</span>.addEvenetListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(localData);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;再如下面的异步请求，jquery的$.ajax方法，在整个函数调用结束之后，回调函数依然可以访问到url，localData这些局部变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> localData = <span class="string">"localData here"</span>;</div><div class="line">	<span class="keyword">var</span> url = <span class="string">"http://www.qq.com/"</span>;</div><div class="line">	$.ajax(&#123;</div><div class="line">		url: url,</div><div class="line">		success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(localData);</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="闭包的坑"><a href="#闭包的坑" class="headerlink" title="闭包的坑"></a>闭包的坑</h2><p>&emsp;&emsp;看下面的函数，输出结果是什么？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.innerHTML = <span class="string">"&lt;div id='div1'&gt;aaa&lt;/div&gt;"</span> + <span class="string">"&lt;div id='div2'&gt;bbb&lt;/div&gt;"</span> + <span class="string">"&lt;div id='div3'&gt;ccc&lt;/div&gt;"</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">'div'</span> + i)</div><div class="line">		.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			alert(i);<span class="comment">//all are 4!</span></div><div class="line">		&#125;</div><div class="line">	);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;实际上，点击任何一个div输出结果都是4。<br>&emsp;&emsp;在点击某个div的时候，执行回调函数，这个时候函数才会动态地拿到i的值。这一切是在整个过程初始化之后的，在初始化之后i的值就已经是4了。<br>&emsp;&emsp;那怎么样才能达到想要的效果呢？看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.innerHTML = <span class="string">"&lt;div id='div1'&gt;aaa&lt;/div&gt;"</span> + </div><div class="line">	<span class="string">"&lt;div id='div2'&gt;bbb&lt;/div&gt;"</span> + <span class="string">"&lt;div id='div3'&gt;ccc&lt;/div&gt;"</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</div><div class="line">	!<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">		<span class="built_in">document</span>.getElementById(<span class="string">'div'</span> + i)</div><div class="line">			.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				alert(i);<span class="comment">//1,2,3</span></div><div class="line">			&#125;</div><div class="line">		);</div><div class="line">	&#125;(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里每一层循环的时候，用了立即执行的匿名函数把点击事件函数包装起来，并传参i，即1,2,3。那么每一次点击div，alert(i)里面的i就会取每一个闭包环境下的i，而这个i来自于每一次循环的i，所以点击每一个div的时候就会弹出相应的值了</p>
<h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>&emsp;&emsp;闭包可以用于封装一些变量，看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> _userId = <span class="number">23492</span>;</div><div class="line">	<span class="keyword">var</span> _typeId = <span class="string">'item'</span>;</div><div class="line">	<span class="keyword">var</span> <span class="keyword">export</span> = &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">converter</span>(<span class="params">userId</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> +userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">export</span>.getUserId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> converter(_userId);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">export</span>.getTypeId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> converter(_typeId);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">window</span>.export = <span class="keyword">export</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span>.getUserId(); <span class="comment">//23492</span></div><div class="line"><span class="keyword">export</span>.getTypeId(); <span class="comment">//item</span></div><div class="line"></div><div class="line"><span class="keyword">export</span>._UserId; <span class="comment">//undefined</span></div><div class="line"><span class="keyword">export</span>._TypeId; <span class="comment">//undefined</span></div><div class="line"><span class="keyword">export</span>.converter; <span class="comment">//undefined</span></div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里定义了_userId等一些外部无法直接访问的局部变量，并通过window.export = export把对象export输出出去。在外部使用export的时候，只能通过export的一些方法来访问到函数的局部变量，而无法直接访问这些变量和方法。<br>&emsp;&emsp;这利用了闭包的特性，比如export.getUserId()函数，在整个匿名函数初始化之后，它依然能够访问到局部变量_userId。<br>&emsp;&emsp;同时，闭包也会带来一些问题，比如局部变量没有被释放掉造成空间浪费；内存泄露；性能消耗等。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.imooc.com/learn/277" target="_blank" rel="external">JavaScript深入浅出</a></p>
<p>友情链接：<a href="http://blog.csdn.net/seminelee/article/details/52131659" target="_blank" rel="external">前端重点知识整理（JavaScript）三：闭包</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[三小时建成github pages + hexo博客]]></title>
      <url>http://seminelee.github.io/2016/07/24/set-up-a-blog/</url>
      <content type="html"><![CDATA[<p>因为受到了<a href="https://woohoodai.github.io/" target="_blank" rel="external">戴老板</a>的激励和羡慕身边大神都有个炫酷的博客，所以下午的时候花时间建立起这个博客。得益于网络教程，发现原来并不难。以下是这一过程的记录，顺便练练markdown。</p>
<h2 id="为什么要建立这个博客"><a href="#为什么要建立这个博客" class="headerlink" title="为什么要建立这个博客"></a>为什么要建立这个博客</h2><h3 id="为什么选择GitHub-Pages"><a href="#为什么选择GitHub-Pages" class="headerlink" title="为什么选择GitHub Pages"></a>为什么选择GitHub Pages</h3><ul>
<li>域名是github的二级域名，不用给空间付费，不用给域名付费</li>
<li>流行又简洁的MarkDown写作语法</li>
<li>支持本地编写、本地预览</li>
<li>seo优化上，github在google上权重高</li>
</ul>
<a id="more"></a>
<h3 id="为什么我要写博客"><a href="#为什么我要写博客" class="headerlink" title="为什么我要写博客"></a>为什么我要写博客</h3><ul>
<li>本人表达能力不佳，把脑里的东西写下来能让我印象更深刻，提高我将事情讲清楚的能力和逻辑思维能力</li>
<li>有利于我积累更多的知识，并享受分享带来的连锁反应</li>
<li>用markdown写东西觉得自己很geek</li>
</ul>
<h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><ol>
<li>安装<a href="https://nodejs.org/" target="_blank" rel="external">node.js</a></li>
<li>安装<a href="https://git-scm.com/" target="_blank" rel="external">git</a></li>
<li>注册<a href="http://www.github.com/" target="_blank" rel="external">github</a></li>
</ol>
<h2 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h2><h3 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h3><p>建立博客之前要先用SSH keys让我们的本地git项目与远程的github建立联系。<br>首先我们需要检查你电脑上现有的ssh key。右键打开Git Bash，输入：<br>（如果提示：No such file or directory 说明你是第一次使用git。）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/. ssh</div></pre></td></tr></table></figure></p>
<p>生成新的SSH Key<br>（此处的邮箱地址请输入你自己的邮箱地址）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>然后回车</p>
<p>然后系统会要你输入密码。这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。<br>（输入密码的时候没有*字样的，你直接输入就可以了）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;输入加密串&gt;</div><div class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure></p>
<p>看到这样的界面就成功设置ssh key了。<br><img src="/static/2016/07/1.png" alt="成功设置 ssh key"></p>
<h3 id="将SSH-Key添加到Github上"><a href="#将SSH-Key添加到Github上" class="headerlink" title="将SSH Key添加到Github上"></a>将SSH Key添加到Github上</h3><ol>
<li>打开本地C:\Documents and Settings\Administrator.ssh\id_rsa.pub文件。路径也有可能是C:\Users\Administrator.ssh，你可以直接在C盘中查找id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。打开，准确的复制这个文件的内容。</li>
<li>登陆github系统。点击右上角的图像—&gt;Settings —&gt; SSH and GPG keys。<br><img src="/static/2016/07/2.png" alt="将SSH Key添加到Github上"></li>
<li>点击右上角New SSH key，把你刚刚复制的本地生成的密钥文件内容黏贴到里面（Key文本框中）， 点击Add SSH key就ok了<br><img src="/static/2016/07/3.png" alt="将SSH Key添加到Github上"></li>
</ol>
<h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>然后输入yes<br>然后就会看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi seminelee! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>
<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。<br>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"seminelee"</span>//用户名</div><div class="line">$ git config --global user.email  <span class="string">"may.air@qq.com"</span>//填写自己的邮箱</div></pre></td></tr></table></figure></p>
<p>完成以上步骤后本机就已成功连接到github</p>
<h2 id="开始建立博客"><a href="#开始建立博客" class="headerlink" title="开始建立博客"></a>开始建立博客</h2><p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>想建立个人博客是用的第一种，形如seminelee.github.io这样的可访问的站，每个用户名下面只能建立一个。</p>
<h3 id="Github上建立仓库"><a href="#Github上建立仓库" class="headerlink" title="Github上建立仓库"></a>Github上建立仓库</h3><p>登陆Github，建立一个名为seminelee.github.io的仓库。<br>注意！Github Pages的Repository名字是特定的，比如我Github账号是seminelee，那么我Github Pages Repository名字就是seminelee.github.io。<br>详细建立仓库过程略过。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。<br>打开Git Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>安装完毕后，在我的电脑某个位置中建立一个名字叫hexo的文件夹，然后在此文件夹中右键打开Git Bash。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure></p>
<p>Hexo随后会自动在目标文件夹建立网站所需要的所有文件。<br>现在我们已经搭建起本地的hexo博客了。<br>在hexo目录下输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>然后到浏览器输入localhost:4000看看，可以看到默认主题下的博客，这就实现了本地预览了。</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>每次更换主题前清空一下database<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>通过git clone克隆主题，这里用的是next主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next.git</div></pre></td></tr></table></figure></p>
<p>更多主题可以参考<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">有哪些好看的 Hexo 主题? - GitHub - 知乎</a></p>
<p>启用主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: hexo-theme-next</div></pre></td></tr></table></figure></p>
<p>修改hexo目录下的config.yml配置文件中的theme属性，将其设置为hexo-theme-next。<br>（注意：Hexo有两个config.yml文件，一个在根目录，一个在theme下，此时修改的是在根目录下的。）</p>
<p>更新主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> themes/hexo-theme-next</div><div class="line">$ git pull</div></pre></td></tr></table></figure></p>
<p>然后可以本地预览一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment">#generate生成</span></div><div class="line">$ hexo s <span class="comment">#server测试环境，启动本地服务，进行文章预览调试</span></div></pre></td></tr></table></figure></p>
<h3 id="上传到Github仓库"><a href="#上传到Github仓库" class="headerlink" title="上传到Github仓库"></a>上传到Github仓库</h3><p>打开hexo目录下的_config.yml，拉到最下面<br>配置为这样子,只需要把seminelee改为你自己的github用户名就可以了。（注意格式，冒号后要有空格，你可以直接复制以下代码再作修改）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/seminelee/seminelee.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>然后执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment">#generate生成</span></div><div class="line">$ hexo d <span class="comment">#deploy开发环境</span></div></pre></td></tr></table></figure></p>
<p>如果看到结果最后一行是INFO Deploy done:git则没有问题。否则，则可以把上面的配置改为下面这种使用SSH方式的提交，把用户名改为你自己的用户名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:seminelee/seminelee.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>再次执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment">#generate生成</span></div><div class="line">$ hexo d <span class="comment">#deploy开发环境</span></div></pre></td></tr></table></figure></p>
<p>如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，网上说是hexo 更新到3.0之后的一个坑，则需要安装hexo-deployer-git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>再次执行命令之后，打开<a href="https://seminelee.github.io/">https://seminelee.github.io/</a>就能看到你建立好的博客了！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="http://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="external">使用github+Hexo人人都能拥有一个美美的博客</a></li>
<li><a href="http://www.v2ex.com/t/175940" target="_blank" rel="external">搭建 hexo，在执行 hexo deploy 后,出现 error deployer not found:github 的错误</a></li>
</ul>
]]></content>
    </entry>
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[《大型网站技术架构》学习笔记]]></title>
      <url>http://seminelee.github.io/2021/01/03/site-architecture/</url>
      <content type="html"><![CDATA[<h2 id="1-架构模式概述"><a href="#1-架构模式概述" class="headerlink" title="1 架构模式概述"></a>1 架构模式概述</h2><h3 id="1-1-分层"><a href="#1-1-分层" class="headerlink" title="1.1 分层"></a>1.1 分层</h3><p>大型网站架构中，采用分层架构，将网站软件系统在横向方面切分，分为应用层、服务层、数据层。这对之后网站支持高并发，向分布式方向发展至关重要。</p>
<ul>
<li>应用层：具体业务和视图展示。（前端）</li>
<li>服务层：为应用层提供服务支持。（后端）</li>
<li>数据层：提供数据存储访问服务。<a id="more"></a>
<h3 id="1-2-分割"><a href="#1-2-分割" class="headerlink" title="1.2 分割"></a>1.2 分割</h3>分割，就是将网站软件系统在纵向方面切分。比如在应用层，将不同业务进行分割；在服务层将服务分割成合适的模块。<h3 id="1-3-分布式"><a href="#1-3-分布式" class="headerlink" title="1.3 分布式"></a>1.3 分布式</h3>分层和分割的一个主要目的是，为了切分后的模块便于分布式部署，即将不同模块部署在不同的服务器上，通过远程调用协同工作。常见的分布式方案有：</li>
<li>分布式应用和服务。改善网站性能、加快开发、使不同应用复用共同的服务。</li>
<li>分布式静态资源。静态资源独立分布式部署，使用独立的域名，即动静分离。</li>
<li>分布式数据和存储。关系数据库分布式部署，NoSQL分布式数据库。</li>
<li>分布式计算。Hadoop和MapReduce分布式计算框架批处理计算.</li>
</ul>
<p>这也对网站的开发维护有更高的要求。</p>
<h3 id="1-4-集群"><a href="#1-4-集群" class="headerlink" title="1.4 集群"></a>1.4 集群</h3><p>使用分布式后，对于用户访问集中的模块，还需要将独立部署的服务器集群化，即多台服务器部署相同的应用构成一个集群，通过负载均衡设备共同对外提供服务，也可提高系统的可用性。</p>
<h3 id="1-5-缓存"><a href="#1-5-缓存" class="headerlink" title="1.5 缓存"></a>1.5 缓存</h3><p>用于改善软件性能。包括：</p>
<ul>
<li>CDN：内容分发网络，缓存一些静态资源（如视频网站中访问量大的热点视频），从距离用户最近的网络服务商返回给用户。</li>
<li>反向代理：缓存网站的静态资源，实现负载均衡。</li>
<li>本地缓存：在应用服务器本地缓存热点数据，应用程序直接访问，无需访问数据库。</li>
<li>分布式缓存：缓存数据需要内存空间增大，这时候就需要分布式缓存，应用程序通过网络通信访问缓存数据。<h3 id="1-6-异步"><a href="#1-6-异步" class="headerlink" title="1.6 异步"></a>1.6 异步</h3>大型网站架构中，系统解耦的手段除了分层、分割、分布等，还有异步。在单一服务器内部可通过多线程共享内存队列的方式实现异步；在分布式系统中，多个服务器集群通过分布式消息队列实现异步。异步架构是典型的生产者消费者模式。<br>使用异步消息队列，可提高系统可用性，加快网站响应速度，消除并发访问高峰。<h3 id="1-7-冗余"><a href="#1-7-冗余" class="headerlink" title="1.7 冗余"></a>1.7 冗余</h3>为了某台服务器故障时网站依然可以继续服务，需要一定程度的服务器冗余运行（至少两台），数据冗余备份（定期备份冷备份、主从分离热备份）。<h3 id="1-8-自动化"><a href="#1-8-自动化" class="headerlink" title="1.8 自动化"></a>1.8 自动化</h3>通过减少人为干预，减少故障。包括：发布过程自动化、自动化代码管理、自动化测试、自动化安全检测、自动化部署、自动化监控、自动化告警、自动化失效转移、自动化失效恢复、自动化降级、自动化分配资源。<h3 id="1-9-安全"><a href="#1-9-安全" class="headerlink" title="1.9 安全"></a>1.9 安全</h3>通过密码和手机校验码进行身份认证；敏感操作的网络通信需要加密；防止ddos，使用验证码识别；防止XSS攻击、SQL注入，进行转义等处理；过滤垃圾信息等等。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 网络知识 </category>
            
            <category> 后端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网站架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解webpack的基本流程和一些重要概念]]></title>
      <url>http://seminelee.github.io/2020/04/23/webpack-3/</url>
      <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p><em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)</em>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。<br><a id="more"></a></p>
<p>四个<a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener"><strong>核心概念</strong></a>：</p>
<ul>
<li>入口(entry)<br>构建其内部<em>依赖图</em>的开始</li>
<li>输出(output)<br>在哪里输出它所创建的 <em>bundles</em>，以及如何命名这些文件</li>
<li>loader<br>让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript），将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。</li>
<li>插件(plugins) 插件可以用来处理各种各样的任务，包括：打包优化（tree-shaking）、压缩、重新定义环境中的变量。</li>
</ul>
<h2 id="2-基本流程"><a href="#2-基本流程" class="headerlink" title="2 基本流程"></a>2 基本流程</h2><h3 id="2-1-基本流程"><a href="#2-1-基本流程" class="headerlink" title="2.1 基本流程"></a>2.1 基本流程</h3><ol>
<li><code>entry-option</code> 初始化option</li>
<li><code>run</code> 开始编译</li>
<li><code>make</code> 从entry开始递归的分析依赖，对每个依赖模块进行build</li>
<li><code>before-resolve</code> - <code>after-resolve</code> 对其中一个模块位置进行解析</li>
<li><code>build-module</code> 开始构建 (build) 这个module,这里将使用文件对应的loader加载</li>
<li><code>normal-module-loader</code> 对用loader加载完成的module(是一段js代码)进行编译,用 <a href="https://github.com/ternjs/acorn" target="_blank" rel="noopener">acorn</a> 编译,生成ast抽象语法树。</li>
<li><code>program</code> 开始对ast进行遍历，当遇到require等一些调用表达式时，触发<code>call require</code>事件的handler执行，收集依赖，并。如：AMDRequireDependenciesBlockParserPlugin等</li>
<li><code>seal</code> 所有依赖build完成，下面将开始对chunk进行优化，比如合并,抽取公共模块,加hash</li>
<li><code>bootstrap</code> 生成启动代码</li>
<li><code>emit</code> 把各个chunk输出到结果文件</li>
</ol>
<p>详细事件流可看<a href="https://juejin.im/entry/576b7aeda633bd0064065c74" target="_blank" rel="noopener">webpack 源码解析</a>。</p>
<h3 id="2-2-内部依赖图"><a href="#2-2-内部依赖图" class="headerlink" title="2.2 内部依赖图"></a>2.2 内部依赖图</h3><p>进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。<br>如何查找这些<code>require</code> 语句？<br>用正则？如果<code>require</code>写在注释里也会匹配到；<code>require(&#39;a&#39;+&#39;b&#39;)</code>类似的表达式正则难以处理。<br>因此，使用js代码解析工具<strong>（</strong>如<code>esprima</code>或者<code>acorn</code>，webpack<a href="https://github.com/webpack/webpack/blob/master/lib/Parser.js" target="_blank" rel="noopener">Parser.js</a>用的是<a href="https://github.com/acornjs/acorn" target="_blank" rel="noopener"><code>acorn</code></a>。），将JS代码转换成抽象语法树（AST），再对AST进行遍历，找出<code>require</code>表达式，收集依赖，构造依赖图。</p>
<blockquote>
<p>js引擎也是使用js代码解析工具构建抽象语法树的，比如JavaScriptCore、V8。过程是：<br>源代码=&gt;抽象语法树=&gt;字节码<br>P.S. V8之前是直接转成机器码的，因为内存问题，在2019年又改成了转成字节码。</p>
</blockquote>
<p>github上找到的一个webpack伪码<a href="https://github.com/youngwind/fake-webpack/blob/1bfcd0edf1/lib/parse.js" target="_blank" rel="noopener">parse.js</a></p>
<h3 id="2-3-模块解析-module-resolution"><a href="#2-3-模块解析-module-resolution" class="headerlink" title="2.3 模块解析(module resolution)"></a>2.3 模块解析(module resolution)</h3><p>resolver 是一个库(library)，用于帮助找到模块的绝对路径。<br>resolver 帮助 webpack 找到 bundle 中需要引入的模块代码，这些代码在包含在每个 <code>require</code> 语句中。<br>当打包模块时，<code>webpack</code> 使用 <a href="https://github.com/webpack/enhanced-resolve" target="_blank" rel="noopener">enhanced-resolve</a> 来解析文件路径（绝对路径/相对路径/模块路径）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolve = <span class="built_in">require</span>(<span class="string">"enhanced-resolve"</span>);</span><br><span class="line"></span><br><span class="line">resolve(<span class="string">"/some/path/to/folder"</span>, <span class="string">"module/dir"</span>, (err, result) =&gt; &#123;</span><br><span class="line">	result; <span class="comment">// === "/some/path/node_modules/module/dir/index.js"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>相对路径</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'../src/file1'</span></span><br></pre></td></tr></table></figure>
<p>在这种情况下，使用 <code>import</code> 或 <code>require</code> 的资源文件所在的目录，被认为是上下文目录(context directory)。在 <code>import/require</code> 中给定的相对路径，会拼接此上下文路径(context path)，以产生模块的绝对路径。</p>
</li>
<li><p>模块路径</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'module'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'module/lib/file'</span>;</span><br></pre></td></tr></table></figure>
<p>模块将在 <a href="https://webpack.docschina.org/configuration/resolve/#resolve-modules" target="_blank" rel="noopener"><code>resolve.modules</code></a> 中指定的所有目录内搜索。 你可以替换初始模块路径，此替换路径通过使用 <a href="https://webpack.docschina.org/configuration/resolve/#resolve-alias" target="_blank" rel="noopener"><code>resolve.alias</code></a> 配置选项来创建一个别名。</p>
</li>
</ul>
<h2 id="2-manifest"><a href="#2-manifest" class="headerlink" title="2 manifest"></a>2 manifest</h2><p>在使用 webpack 构建的典型应用程序或站点中，有三种主要的代码类型：</p>
<ul>
<li>你或你的团队编写的源码。</li>
<li>你的源码会依赖的任何第三方的 library 或 “vendor” 代码。</li>
<li>webpack 的 runtime 和 manifest，管理所有模块的交互。</li>
</ul>
<p>使用<code>CommonsChunkPlugin</code>可以分离vender和manifest，以充分利用缓存。</p>
<h3 id="2-1-Runtime"><a href="#2-1-Runtime" class="headerlink" title="2.1 Runtime"></a>2.1 Runtime</h3><p>runtime，以及伴随的 manifest 数据，主要是指：在浏览器运行时，webpack 用来连接模块化的应用程序的所有代码。runtime 包含：在模块交互时，连接模块所需的加载和解析逻辑。包括浏览器中的已加载模块的连接，以及懒加载模块的执行逻辑。</p>
<p>实现加载和解析模块，主要是实现 <code>__webpack_require__</code>方法。<code>__webpack_require__</code>可以理解成webpack参考Nodejs实现的<code>require</code>方法，以使用 CommonJS模块。</p>
<h3 id="2-2-Manifest"><a href="#2-2-Manifest" class="headerlink" title="2.2 Manifest"></a>2.2 Manifest</h3><p>当编译器(compiler)开始执行、解析和映射应用程序时，它会保留所有模块的详细要点。这个数据集合称为 “Manifest”。</p>
<p>当完成打包并发送到浏览器时，会在运行时通过 Manifest 来解析和加载模块。无论你选择哪种模块语法（es6/CommonJS），那些 import 或 require 语句现在都已经转换为 <strong>webpack_require</strong> 方法，此方法指向模块标识符(module identifier)。通过使用 manifest 中的数据，runtime 将能够查询模块标识符，检索出背后对应的模块。</p>
<p>比如，在一个SPA应用中，点击一个链接，跳转到另一个路由，你会发现浏览器自动下载这个模块对应的chunk文件。这些文件就是通过使用manifest中的数据得知的。</p>
<h2 id="3-模块热替换-hot-module-replacement"><a href="#3-模块热替换-hot-module-replacement" class="headerlink" title="3 模块热替换(hot module replacement)"></a>3 模块热替换(hot module replacement)</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p><a href="https://www.webpackjs.com/concepts/hot-module-replacement/" target="_blank" rel="noopener">模块热替换</a>(HMR - Hot Module Replacement)功能会在应用程序运行过程中替换、添加或删除<a href="https://www.webpackjs.com/concepts/modules/" target="_blank" rel="noopener">模块</a>，而无需重新加载整个页面（区别于live reload）。主要是通过以下几种方式，来显著加快开发速度：</p>
<ul>
<li>保留在完全重新加载页面时丢失的应用程序状态。</li>
<li>只更新变更内容，以节省宝贵的开发时间。</li>
<li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li>
</ul>
<h3 id="3-2-基本流程"><a href="#3-2-基本流程" class="headerlink" title="3.2 基本流程"></a>3.2 基本流程</h3><p><img src="https://user-gold-cdn.xitu.io/2019/9/2/16cf203824359397?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt><br>主要过程如下：</p>
<ol>
<li><code>webpack-dev-server</code>启动本地服务，和客户端使用websocket实现长连接，客户端请求初始资源。</li>
<li><code>webpack-dev-server</code>监听代码文件变化，当开发者修改了代码并保存，webpack会重新编译，生成新文件包括：<ul>
<li>hash值</li>
<li>更新后的 <a href="https://www.webpackjs.com/concepts/manifest" target="_blank" rel="noopener">manifest</a>(JSON)。manifest 包括新的编译 hash 和所有的待更新 chunk 目录。</li>
<li>一个或多个更新后的 chunk (JavaScript)。</li>
</ul>
</li>
<li>服务端通过websocket向客户端推送当前编译的hash戳。</li>
<li>客户端的websocket监听到有文件改动推送过来的hash戳，会和上一次对比。一致则走缓存，不一致则判断是否支持热更新，如果支持的话发射webpackHotUpdate事件，如果不支持则直接刷新浏览器。</li>
<li>webpack相关模块会监听webpackHotUpdate事件，调用module.hot.check方法。HMR runtime请求Manifest和chunk文件。</li>
<li><p>HMR runtime调用hotAddUpdateChunk动态更新模块代码，然后调用hotApply方法进行热更新。</p>
<blockquote>
<p>webpack-dev-server是一个小型的Node.js Express服务器，它使用webpack-dev-middleware来服务于webpack的包。在实际操作中，它将在localhost:8080(或其他端口)启动一个express静态资源web服务器，并且以监听模式自动运行webpack，并通过socket.io服务实时监听资源的变化并自动刷新页面（热更新）。<br>在开发过程中，可以将 HMR 作为 LiveReload 的替代。webpack-dev-server 支持 hot 模式，在试图重新加载整个页面之前，热模式会尝试使用 HMR 来更新。</p>
</blockquote>
</li>
</ol>
<h2 id="4-代码分割"><a href="#4-代码分割" class="headerlink" title="4 代码分割"></a>4 代码分割</h2><p>常用的代码分离方法有三种：</p>
<ul>
<li>入口起点：使用 entry 配置手动地分离代码。</li>
<li>防止重复：使用<code>CommonsChunkPlugin</code>去重和分离 chunk。<br><code>optimization.splitChunks.maxSize</code>配置可以解决某个chunk特别大的问题。<blockquote>
<p><code>CommonsChunkPlugin</code>用于避免它们之间重复的依赖关系，但是无法进行进一步的优化。从webpack v4开始，<code>CommonsChunkPlugin</code>被删除，转而使用了optimization.splitChunks。</p>
</blockquote>
</li>
<li>动态导入：通过模块中的内联函数调用来分离代码。(使用<code>react-loadable</code> 动态加载组件实现组件懒加载）</li>
</ul>
<h3 id="4-1-dllPlugin和external插件"><a href="#4-1-dllPlugin和external插件" class="headerlink" title="4.1 dllPlugin和external插件"></a>4.1 dllPlugin和external插件</h3><p>webpack中<a href="https://www.webpackjs.com/plugins/dll-plugin/" target="_blank" rel="noopener"><code>DllPlugin</code></a>和<a href="https://www.webpackjs.com/configuration/externals/" target="_blank" rel="noopener"><code>externals</code></a>在本质上其实是解决的同一个问题：避免将某些外部依赖库打包进我们的业务代码，而是在运行时提供这些依赖。</p>
<p>DllPlugin</p>
<ul>
<li>符合前端模块化的要求</li>
<li>webpack配置上稍微复杂一些，需要预打包所需的dll资源，并在构建时配置相应的plugin</li>
<li>使用dll的前提是，这些外部依赖一般不需要发生变更。所以，如果某天发生了变更，那就需要将项目重新构建，比较麻烦。</li>
<li>注意<code>manifest.json</code>命名冲突</li>
</ul>
<p>external</p>
<ul>
<li>不太符合前端的模块化思想，所需要的外部库需要在浏览器全局环境下可访问</li>
<li>外部库升级的话，如果兼容之前的API，不需要项目重新构建，只需要更新链接</li>
<li>webpack配置上稍微简单些，但是同样需要将所需的外部库打包为所需要的格式，并在运行态下引用（如果module有提供cdn地址可以直接使用）</li>
</ul>
<h2 id="5-tree-shaking"><a href="#5-tree-shaking" class="headerlink" title="5 tree shaking"></a>5 tree shaking</h2><p><a href="https://www.webpackjs.com/guides/tree-shaking/" target="_blank" rel="noopener"><em>tree shaking</em></a> 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。它依赖于 ES2015 模块系统中的<a href="http://exploringjs.com/es6/ch_modules.html#static-module-structure" target="_blank" rel="noopener">静态结构特性</a>，例如 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener"><code>import</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noopener"><code>export</code></a>。</p>
<p>新的 webpack 4 正式版本，扩展了这个检测能力，通过 <code>package.json</code> 的 <code>&quot;sideEffects&quot;</code> 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 “pure(纯的 ES2015 模块)”，由此可以安全地删除文件中未使用的部分。</p>
<p>要使用tree-shaking，需要做到以下：</p>
<ul>
<li>使用 ES2015 模块语法（即 <code>import</code> 和 <code>export</code>）。</li>
<li>确保没有 compiler 将 ES2015 模块语法转换为 CommonJS 模块（这也是流行的 Babel preset 中 @babel/preset-env 的默认行为 - 更多详细信息请查看 <a href="https://babel.docschina.org/docs/en/babel-preset-env#modules" target="_blank" rel="noopener">文档</a>）。</li>
<li>在项目 <code>package.json</code> 文件中，添加一个 “sideEffects” 属性。<br>如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 <code>false</code>。如果有则可以提供一个数组，如antd的package.json<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">"sideEffects"</span>: [</span><br><span class="line">    <span class="string">"dist/*"</span>,</span><br><span class="line">    <span class="string">"es/**/style/*"</span>,</span><br><span class="line">    <span class="string">"lib/**/style/*"</span>,</span><br><span class="line">    <span class="string">"*.less"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>「副作用」的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。举例说明，例如 polyfill，它影响全局作用域，并且通常不提供 export。</p>
<ul>
<li>通过将 <code>mode</code> 选项设置为 <a href="https://webpack.docschina.org/concepts/mode/#mode-production" target="_blank" rel="noopener"><code>production</code></a>，启用 minification(代码压缩) 和 tree shaking。</li>
</ul>
</blockquote>
<h2 id="6-优化策略"><a href="#6-优化策略" class="headerlink" title="6 优化策略"></a>6 优化策略</h2><p>webpack可以做到的：</p>
<ul>
<li>代码压缩（uglify）</li>
<li>code splitting（分入口多页应用、splitChunks防止重复、动态导入）</li>
<li>tree shaking</li>
<li>将不常更新的模块单独打包（dllPlugin），或者放到cdn（externals）</li>
</ul>
<p>其他方法：</p>
<ul>
<li>代码优化：<code>&lt;link&gt;</code>样式文件放在头部，<code>&lt;script&gt;</code>放在<body>底部等</body></li>
<li>减少请求、合并请求</li>
<li>Nginx配置gzip </li>
<li>SSR（服务端渲染）</li>
</ul>
<h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7 参考"></a>7 参考</h2><ul>
<li><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">概念 ｜ webpack 中文网</a></li>
<li><a href="https://juejin.im/entry/576b7aeda633bd0064065c74" target="_blank" rel="noopener">webpack 源码解析</a></li>
<li><a href="https://juejin.im/post/5d6d0ee5f265da03f66ddba9" target="_blank" rel="noopener">搞懂webpack热更新原理</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自动化构建工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决useEffect重复调用问题]]></title>
      <url>http://seminelee.github.io/2020/04/07/react-hooks-useeffect/</url>
      <content type="html"><![CDATA[<p><code>useEffect</code>是React hooks中可以让你在函数组件中执行副作用操作的<a href="https://zh-hans.reactjs.org/docs/hooks-effect.html" target="_blank" rel="noopener">Effect Hook</a>。</p>
<p>在React hooks刚出来的时候我也记录过一篇关于<a href="https://seminelee.github.io/2019/03/04/react-hooks/">认识 react Hooks</a>的。在使用的过程中，经常遇到<code>useEffect</code>重复调用的问题，因此借此文总结下。<br><a id="more"></a></p>
<h1 id="1-为什么会出现重复请求的问题？"><a href="#1-为什么会出现重复请求的问题？" class="headerlink" title="1 为什么会出现重复请求的问题？"></a>1 为什么会出现重复请求的问题？</h1><p>总结一下原因可能会是：</p>
<h2 id="1-1-你没有设置effect依赖参数"><a href="#1-1-你没有设置effect依赖参数" class="headerlink" title="1.1 你没有设置effect依赖参数"></a>1.1 你没有设置effect依赖参数</h2><p>比如下面的例子，它在第一次渲染之后和每次更新之后都会执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这是因为每次重新渲染，都有它自己的 Props and State。每一个组件内的函数（包括事件处理函数，effects，定时器或者API调用等等）会捕获某次渲染中定义的props和state。某种意义上讲，effect 更像是渲染结果的一部分 ——<strong>每个 effect “属于”一次特定的渲染</strong>。</p>
<p>事实上这也正是我们可以在 effect 中获取最新的<code>count</code>的值，而不用担心其过期的原因。<br>如果是没有设置effect依赖参数的原因，在<code>useEffect</code>的第二个参数设置好依赖项就可以了。</p>
<h2 id="1-2-你设置的依赖频繁变化"><a href="#1-2-你设置的依赖频繁变化" class="headerlink" title="1.2 你设置的依赖频繁变化"></a>1.2 你设置的依赖频繁变化</h2><p>有时候我们已经设置了依赖，但是发现还是会无限重复。有可能是你的依赖就是频繁变化的，即在改变状态的方法中用到了状态，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(count + <span class="number">1</span>); <span class="comment">// 这个 effect 依赖于 `count` state</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(id);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要解决这个问题，我们可以使用<code>setState</code>的<a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#functional-updates" target="_blank" rel="noopener">函数式更新</a>形式。它允许我们指定 state 该 如何 改变而不用引用 当前 state：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>); <span class="comment">// ✅ 在这不依赖于外部的 `count` 变量</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(id);</span><br><span class="line">  &#125;, []); <span class="comment">// ✅ 我们的 effect 不适用组件作用域中的任何变量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>详细可以看官网的<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often" target="_blank" rel="noopener">FAQ</a></p>
<h2 id="1-3-设置的依赖是引用数据类型"><a href="#1-3-设置的依赖是引用数据类型" class="headerlink" title="1.3 设置的依赖是引用数据类型"></a>1.3 设置的依赖是引用数据类型</h2><p>其实这也属于第二个原因，如果我们设置的依赖是引用数据类型，我们会发现设置的依赖总是会改变。</p>
<p>比如下面这个例子，打开控制台，会看到至少2次输出。上面也提到了，每次重新渲染，函数组件都有它自己的 Props and State。因此，React在对比时会得出该依赖每次都不相同。即使看起来内容相同，但是每次的引用地址都不一样，即<code>[] !== []</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [data, setData] = useState([] <span class="keyword">as</span> any)</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setData([])</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;, [data])</span><br></pre></td></tr></table></figure></p>
<p>我们接下来要详细探讨的第三个原因的解决方法。</p>
<blockquote>
<p><strong>关于依赖项不要对React撒谎</strong><br>如果你设置了依赖项，effect中用到的所有组件内的值都要包含在依赖中。这包括props，state，函数 — 组件内的任何东西。解决问题的方法不是移除依赖项。只有依赖项包含了所有effect中使用到的值，React才能知道何时需要运行它。</p>
</blockquote>
<h1 id="2-函数作为依赖"><a href="#2-函数作为依赖" class="headerlink" title="2 函数作为依赖"></a>2 函数作为依赖</h1><h2 id="2-1-检查是不是必须把该函数作为依赖"><a href="#2-1-检查是不是必须把该函数作为依赖" class="headerlink" title="2.1 检查是不是必须把该函数作为依赖"></a>2.1 检查是不是必须把该函数作为依赖</h2><p>一般建议把不依赖props和state的函数提到你的组件外面，并且把那些仅被effect使用的函数放到effect里面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ Not affected by the data flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFetchUrl</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'https://hn.algolia.com/api/v1/search?query='</span> + query;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl(<span class="string">'react'</span>);</span><br><span class="line">    <span class="comment">// ... Fetch data and do something ...</span></span><br><span class="line">  &#125;, []); <span class="comment">// ✅ Deps are OK</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-2-useCallback"><a href="#2-2-useCallback" class="headerlink" title="2.2 useCallback"></a>2.2 useCallback</h2><p>如果发现你的effect的确需要用到组件内的函数（包括通过props传进来的函数），可以在定义它们的地方用<a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usecallback" target="_blank" rel="noopener"><code>useCallback</code></a>包一层。为什么要这样做呢？因为这些函数可以访问到props和state，因此它们会参与到数据流中。</p>
<p><code>useCallback</code>本质上是添加了一层依赖检查。它以另一种方式解决了问题——我们使函数本身只在需要的时候才改变，而不是去掉对函数的依赖。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">'react'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ✅ Preserves identity until query changes</span></span><br><span class="line">  <span class="keyword">const</span> getFetchUrl = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'https://hn.algolia.com/api/v1/search?query='</span> + query;</span><br><span class="line">  &#125;, [query]);  <span class="comment">// ✅ Callback deps are OK</span></span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl();</span><br><span class="line">    <span class="comment">// ... Fetch data and do something ...</span></span><br><span class="line">  &#125;, [getFetchUrl]); <span class="comment">// ✅ Effect deps are OK</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果是props传进来的函数，上面的例子中的<code>getFetchUrl</code>可以写成下面这样。props传进来的函数可以访问到props和state。把它的定义包裹进 useCallback Hook。这就确保了它不随渲染而改变，除非它自身的依赖发生了改变。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getFetchUrl = useCallback(props.fetchData, [query])</span><br></pre></td></tr></table></figure></p>
<p><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo" target="_blank" rel="noopener"><code>useMemo</code></a>可以做类似的事情以避免非必要的渲染。<code>useCallback(fn, deps)</code> 相当于 <code>useMemo(() =&gt; fn, deps)</code>。这里就不再叙述了。</p>
<h1 id="3-对象作为依赖"><a href="#3-对象作为依赖" class="headerlink" title="3 对象作为依赖"></a>3 对象作为依赖</h1><h2 id="3-1-检查是不是必须把对象作为依赖"><a href="#3-1-检查是不是必须把对象作为依赖" class="headerlink" title="3.1 检查是不是必须把对象作为依赖"></a>3.1 检查是不是必须把对象作为依赖</h2><p>首先可以检查下是不是必须把该对象作为依赖，比如：</p>
<ul>
<li>只需要用到该对象的某个非引用类型的属性；</li>
<li>是JSON对象，可以通过<code>JSON.stringify()</code>转为字符串传递。子组件再将props传进来的JSON字符串用<code>JSON.parse()</code>解析。<h2 id="3-2-useRef"><a href="#3-2-useRef" class="headerlink" title="3.2 useRef"></a>3.2 useRef</h2>如果上面的方法都无法解决，希望<code>useRef</code>可以解决你的问题。</li>
</ul>
<p>到目前为止，我们知道，每一个组件内的函数（包括事件处理函数，effects，定时器或者API调用等等）会捕获某次渲染中定义的props和state。因此，解决问题的关键就在于，在effect的回调函数里读取最新的值而不是捕获的值，即从过去渲染中的函数里读取未来的props和state。指南中将此形象地比喻成<a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/#%E9%80%86%E6%BD%AE%E8%80%8C%E5%8A%A8" target="_blank" rel="noopener">逆潮而动</a>。</p>
<p><code>useRef</code>就可以做到这一点。不同于effect捕获某次渲染中定义的props和state，<code>useRef</code>的<code>.current</code>属性就像一个保存一个可变值的“盒子”，可以获取最新的值。而且当 ref 对象内容发生变化时，<code>useRef</code>并不会通知你。变更<code>.current</code> 属性不会引发组件重新渲染。</p>
<p>1.3中的例子可以改写成这样。打开控制台，可以看到只输出了最新的值<code>[]</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [data, setData] = useState([] <span class="keyword">as</span> any)</span><br><span class="line"><span class="keyword">const</span> dataRef = useRef(data)</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setData([])</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  dataRef.current = data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(dataRef.current)</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://zh-hans.reactjs.org/docs/getting-started.html" target="_blank" rel="noopener">React官方文档</a></li>
<li><a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">useEffect 完整指南</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《深入浅出nodejs》学习总结之模块机制]]></title>
      <url>http://seminelee.github.io/2020/02/01/nodejs-modules/</url>
      <content type="html"><![CDATA[<h1 id="模块实现"><a href="#模块实现" class="headerlink" title="模块实现"></a>模块实现</h1><p>步骤：</p>
<a id="more"></a>
<ol>
<li><p>路径分析</p>
<p>优先级：核心模块的缓存检查&gt;文件模块的缓存检查&gt;核心模块&gt;文件模块</p>
<p>文件模块中，相对路径&gt;绝对路径&gt;非路径形式的文件模块（第三方文件模块，即node_modules中的模块）</p>
</li>
<li><p>文件定位</p>
<p>文件扩展名分析：如果没有文件扩展名，按.js,.json,.node的次序补足</p>
<blockquote>
<p>优化点：如果是.node和.json文件，在传递给<code>require()</code>时带上扩展名，会加快一点速度</p>
</blockquote>
</li>
<li><p>编译执行</p>
<p>新建一个模块对象，根据路径载入并编译</p>
<ul>
<li><p>.js文件：通过fs模块同步读取文件后编译执行，编译过程中，Node对js文件内容进行头尾包装：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, reuire, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 文件内容</span></span><br><span class="line">  <span class="comment">// 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>)</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  exports.area = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>.node文件：这是用C/C++编写的扩展模块文件，不需要编译，直接通过<code>process.dlopen()</code>方法加载最后编译生成的文件然后执行。<code>dlopen()</code>方法在windows和 <em>nix 平台有不同的实现，通过libuv兼容层进行了封装，实际上在windows编译成.dll文件，在 </em>nix编译成.so文件，但为了看起来更自然一点所以扩展名统一为.node。</p>
</li>
<li><p>.json文件：通过fs模块同步读取文件后，用<code>JSON.parse()</code>解析返回结果</p>
</li>
<li><p>其余扩展名文件被当作.js文件处理</p>
</li>
</ul>
</li>
</ol>
<h1 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h1><p>模块分为两类：</p>
<ul>
<li>一类是Node提供的模块，即<strong>核心模块</strong></li>
<li>另一类是用户编写的模块，即<strong>文件模块</strong></li>
</ul>
<h2 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h2><p>核心模块在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动时，部分核心模块就被直接加载进内存中，比普通的文件模块从磁盘中一处一处查找要快很多。所以核心模块引入时，文件定位和编译执行这两步骤可以省略掉，并且在路径分析中优先判断，所以加载速度是最快的</p>
<p>核心模块分成两部分：</p>
<p><strong>1. 内建模块（C/C++编写的）</strong></p>
<p>在Node项目的<a href="https://github.com/nodejs/node/tree/master/src" target="_blank" rel="noopener">src</a>目录下，下面称为内建模块。性能上优于脚本语言。</p>
<ul>
<li>编译：预先被编译进二进制文件。<code>node_extensions.h</code>文件将这些散列的内建模块统一放进了一个叫<code>node_module_list</code>的数组中。</li>
<li>加载：使用<code>get_builtin_module()</code>方法从<code>node_module_list</code>中取出，执行</li>
</ul>
<p><strong>2. js核心模块（js编写的）</strong></p>
<p>在Node项目的<a href="https://github.com/nodejs/node/tree/master/lib" target="_blank" rel="noopener">lib</a>目录下。一类是作为C/C++内建模块的封装层和桥接层；一类是纯粹的功能模块，它不用跟底层打交道，但是又十分重要。</p>
<ul>
<li><p>编译：Node采用V8附带的js2c.py，将所有js核心模块转换成C++的字符串数组（字符串即js核心模块文件内容），生成<code>node_natives.h</code>头文件。如上面所说编译.js文件的过程中经历了头尾包装，与2.2.2说的文件模块的区别在于：获取源代码的方式（核心模块从内存中加载）以及缓存执行结果的位置。</p>
</li>
<li><p>加载：通过<code>process.binding(&#39;natives&#39;)</code>取出上述的字符串数组放置在<code>nativeModule._source</code>。加载时直接从内存中加载，执行。 <em>[P25]</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nativeModule._source = process.binding(<span class="string">'natives'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="核心模块的引入流程"><a href="#核心模块的引入流程" class="headerlink" title="核心模块的引入流程"></a>核心模块的引入流程</h2><p>在核心模块中，有些模块全部由C/C++编写；有些模块则由C/C++完成核心部分，其他部分由js实现包装或向外导出，以满足性能需求（脚本语言如js的开发速度优于静态语言如C/C++，但其性能弱于静态语言），如<code>buffer</code>、<code>crypto</code>、<code>fs</code>、<code>os</code>等。</p>
<p>即存在一种依赖层关系，文件模块可能依赖核心模块（Js），核心模块可能依赖内建模块（C/C++）。下面是引入<code>os</code>原生模块的流程。</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/2/1/16fff891e1381541?w=864&amp;h=862&amp;f=png&amp;s=99119" alt="P25"></p>
<h2 id="文件模块"><a href="#文件模块" class="headerlink" title="文件模块"></a>文件模块</h2><p>在运行时动态加载，包括了上述完整的路径分析、文件定位、编译执行这些过程，速度比核心模块慢。</p>
<ul>
<li>编译：如上面所说编译.js文件的过程中经历了头尾包装</li>
<li>加载：在运行时动态加载</li>
</ul>
<p>由开发者编写，包括普通JS模块和C/C++扩展模块。主要调用方向为普通JS模块调用C/C++扩展模块。</p>
<p><strong>C/C++扩展模块</strong></p>
<p>C/C++扩展模块属于文件模块的一类。主要提升性能，如js只有double型的数据类型，而进行位运算需要把double型转为int型，所以js层面做位运算效率不高。这时就需要C/C++扩展模块。</p>
<ul>
<li><p>编译：编译成.node文件</p>
</li>
<li><p>加载：通过<code>process.dlopen()</code>方法加载最后编译生成的文件然后执行。</p>
</li>
</ul>
<h2 id="模块调用栈"><a href="#模块调用栈" class="headerlink" title="模块调用栈"></a>模块调用栈</h2><p><img src="https://user-gold-cdn.xitu.io/2020/2/1/16fff89c26dfe60d?w=1058&amp;h=562&amp;f=png&amp;s=59670" alt="P33"></p>
<p>文件模块包括：JS模块和C/C++扩展模块；核心模块包括：js核心模块和C/C++内建模块。</p>
<p>文件模块中JS模块可能调用C/C++扩展模块，文件模块同时也可能调用js核心模块，js核心模块可能依赖C/C++内建模块。文件模块同时也可能直接调用C/C++内建模块。</p>
<h2 id="第三方文件模块（npm依赖包）"><a href="#第三方文件模块（npm依赖包）" class="headerlink" title="第三方文件模块（npm依赖包）"></a>第三方文件模块（npm依赖包）</h2><p>基本同普通文件模块，除了路径分析上的不同。</p>
<h1 id="前后端共用模块"><a href="#前后端共用模块" class="headerlink" title="前后端共用模块"></a>前后端共用模块</h1><ul>
<li><p>CommonJS规范：<code>Node.JS</code>遵循<code>CommonJS</code>的规范。 <code>module.exports = xxx</code>导出， <code>require()</code>引入。同步加载模块。</p>
</li>
<li><p>AMD：Requirejs对模块定义的规范化产出，异步模块定义，模块的加载不影响它后面语句的运行，依赖前置。<code>define</code>定义，<code>require</code>引入。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'clock'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">clock</span>)</span>&#123;</span><br><span class="line">  clock.start();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>CMD：Seajs对模块定义的规范化产出，同步模块定义，依赖就近。<code>define</code>定义，<code>require</code>引入。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> clock = <span class="built_in">require</span>(<span class="string">'clock'</span>);</span><br><span class="line">   clock.start();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>es6规范：<code>export</code>导出，<code>import</code>引入</p>
</li>
</ul>
<h2 id="兼容多种模块规范"><a href="#兼容多种模块规范" class="headerlink" title="兼容多种模块规范"></a>兼容多种模块规范</h2><p>在目前的项目中，一般的做法是：</p>
<p>babel将es6代码转成es5（CommonJS规范）。webpack做浏览器兼容CommonJS。</p>
<p>参考Nodejs，webpack主要实现<code>exports</code>和<code>require</code>函数（<code>__webpack_require__</code>），并传入<code>module</code>、<code>exports</code>和<code>__webpack_require__</code>参数。详细可看<a href="https://segmentfault.com/a/1190000010349749" target="_blank" rel="noopener">webpack模块化原理-commonjs</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p> - 《深入浅出nodejs》</p>
<p> - <a href="https://segmentfault.com/a/1190000010349749" target="_blank" rel="noopener">webpack模块化原理-commonjs</a></p>
]]></content>
      
        <categories>
            
            <category> 后端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[密码登录实现与https基本原理]]></title>
      <url>http://seminelee.github.io/2019/10/14/https/</url>
      <content type="html"><![CDATA[<p>本文将详细描述实现密码登录中所用到的加密传输、加密存储及设置Cookie的相关知识点。<br><a id="more"></a></p>
<h2 id="1-加密传输"><a href="#1-加密传输" class="headerlink" title="1 加密传输"></a>1 加密传输</h2><h3 id="1-1-http（超文本传输协议）明文传输"><a href="#1-1-http（超文本传输协议）明文传输" class="headerlink" title="1.1 http（超文本传输协议）明文传输"></a>1.1 http（超文本传输协议）明文传输</h3><p>http的缺点：</p>
<ul>
<li>通信使用明文会被窃听</li>
<li>不验证通信方的身份</li>
<li>无法证明报文完整性，可能已被篡改（中间人攻击，MITM）</li>
</ul>
<p><img src="/static/2019/10/https-1.png" alt="http明文传输"></p>
<blockquote>
<p><a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">中间人攻击</a>（Man-in-the-MiddleAttack，简称“MITM攻击”）是一种“间接”的入侵攻击，这种攻击模式是通过各种技术手段将受入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，这台计算机就称为“中间人”。<br>攻击方式：DNS欺骗（通过入侵DNS服务器、控制路由器等方法）、不可靠的代理服务器等</p>
</blockquote>
<h3 id="1-2-对称加密"><a href="#1-2-对称加密" class="headerlink" title="1.2 对称加密"></a>1.2 对称加密</h3><p>既然明文传输不安全，我们就使用对称加密的方式进行加密传输。对称加密即使用相同的密钥S加密和解密。<br><img src="/static/2019/10/https-2.png" alt="对称加密"></p>
<p>但是，密钥如果固定，客户端一旦泄漏密钥，则能用密钥解密。因此需要生成随机密钥。但怎么才能安全地告知对方密钥呢？<br>如果由服务器端直接告诉客户端该使用哪个密钥，密钥容易泄露，不能保证安全<br><img src="/static/2019/10/https-3.jpg" alt="对称加密"></p>
<h3 id="1-3-非对称加密-对称加密"><a href="#1-3-非对称加密-对称加密" class="headerlink" title="1.3 非对称加密+对称加密"></a>1.3 非对称加密+对称加密</h3><p>如何对协商过程进行加密？<br>密码学领域中，有一种称为“非对称加密”的加密算法<br>特点是私钥加密后的密文，只要是公钥，都可以解密，但是公钥加密后的密文，只有私钥可以解密。私钥只有一个人有，而公钥可以发给所有的人。<br>客户端用公钥对密钥S进行加密，发送给服务器。服务器收到后用私钥解密，得到密钥S。这样，客户端就能成功把密钥告知服务端了。因此，使用非对称加密算法进行对称加密算法协商过程，就能保证协商过程的安全了。<br><img src="/static/2019/10/https-4.png" alt="对称加密"></p>
<blockquote>
<p>为什么不能直接使用非对称加密，而是使用非对称加密算法进行对称加密算法协商过程？因为公钥每个人都知道，服务器用私钥加密，中间人可以用公钥解密获取信息。即只能保证客户端向服务器发送信息安全，不能保证服务器向客户端发送信息安全。</p>
</blockquote>
<p>但是问题又来了，客户端要怎么才能得到公钥？<br>如果由服务端直接向客户端发送公钥，公钥有可能被中间人调包。<br><img src="/static/2019/10/https-5.png" alt="对称加密"></p>
<p>但让每个客户端的每个浏览器默认保存所有网站的公钥也是不现实的。</p>
<h3 id="1-4-数字证书与数字签名"><a href="#1-4-数字证书与数字签名" class="headerlink" title="1.4 数字证书与数字签名"></a>1.4 数字证书与数字签名</h3><h4 id="1-4-1-数字证书"><a href="#1-4-1-数字证书" class="headerlink" title="1.4.1 数字证书"></a>1.4.1 数字证书</h4><p>因此，我们利用第三方机构（CA，证书授权中心）颁发数字证书。<br><img src="/static/2019/10/https-6.png" alt="对称加密"></p>
<p>CA使用它的私钥对我们的公钥进行加密后，再传给客户端。客户端再使用第三方机构的公钥进行解密。这样，浏览器只需要默认保存1个CA公钥（实际上可能还保存其他可信机构的公钥）就可以了。<br><img src="/static/2019/10/https-7.png" alt="对称加密"></p>
<p>但是，CA不可能只给你一家公司制作证书，它也可能会给中间人这样有坏心思的公司发放证书。这样的，中间人就有机会对你的证书进行调包，客户端在这种情况下是无法分辨出是接收的是你的证书，还是中间人的。因为不论中间人，还是你的证书，都能使用CA的公钥进行解密。<br><img src="/static/2019/10/https-8.png" alt="对称加密"></p>
<p>那么，客户端要如何才能正确鉴别对方的身份呢？</p>
<h4 id="1-4-2-数字签名"><a href="#1-4-2-数字签名" class="headerlink" title="1.4.2 数字签名"></a>1.4.2 数字签名</h4><p>客户端可以通过验证证书的数字签名来鉴别证书的来源。<br>先用hash函数生成证书内容的摘要（digest），使用私钥，对这个摘要加密，生成“数字签名”（signature）。<br><img src="/static/2019/10/https-9.png" alt="对称加密"><br>客户端拿到证书后，用CA公钥解密，根据证书上的方法自己生成一个摘要，如果生成的摘要与解密证书上的数字签名得到的摘要相同，那么说明这个证书是真实的，没有被篡改。然后，查看证书上的网站信息，如果与目前浏览的网站一致，则说明证书的来源正确，从而正确鉴别对方的身份。<br><img src="/static/2019/10/https-10.png" alt="对称加密"></p>
<h3 id="1-5-https（超文本传输安全协议）"><a href="#1-5-https（超文本传输安全协议）" class="headerlink" title="1.5 https（超文本传输安全协议）"></a>1.5 https（超文本传输安全协议）</h3><p>https = http + TLS/SSL<br>HTTP是应用层协议，TCP是传输层协议，在应用层和传输层之间，增加了一个安全套接层TLS。<br>上面讲的让客户端与服务器端安全地协商出一个对称加密算法。这就是HTTPS中的TLS协议主要干的活。如下图：<br><img src="/static/2019/10/https-11.jpg" alt="对称加密"><br>似乎无懈可击？<br>如果中间人使用CA证书，如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。但如果用户点击继续浏览此网站还是会被攻击成功。<br><img src="/static/2019/10/https-12.png" alt="对称加密"><br>而如果中间人使用自己伪造的证书，同样也会发出警告。如果用户点击信任此证书还是会被攻击成功。所以黑客只要诱导用户安装自己伪造的证书即可，例如使用各种钓鱼的不可描述网站。<br><img src="/static/2019/10/https-13.png" alt="对称加密"></p>
<h3 id="1-6-https-非对称加密"><a href="#1-6-https-非对称加密" class="headerlink" title="1.6 https+非对称加密"></a>1.6 https+非对称加密</h3><p>可以看出，https也挺安全了，但是对于传输密码还不够安全。<br>因此我们在使用https协议的同时，再使用RSA（非对称加密）进行加密和解密处理。大致如下：</p>
<ol>
<li>使用rsa生成非对称密钥对，私钥放在服务器，公钥放在客户端</li>
<li>客户端使用公钥对密码加密，发送给服务端</li>
<li>服务端使用私钥解密，得到密码</li>
</ol>
<p>接下来，直接把密码存入数据库？</p>
<h2 id="2-加密存储"><a href="#2-加密存储" class="headerlink" title="2 加密存储"></a>2 加密存储</h2><h3 id="2-1-为什么要加密存储"><a href="#2-1-为什么要加密存储" class="headerlink" title="2.1 为什么要加密存储"></a>2.1 为什么要加密存储</h3><p>千万不要用明文存储密码！<br>如果用明文存储密码（不管是存在数据库还是日志中），一旦数据泄露，所有用户的密码就毫无保留地暴露在黑客的面前，开头提到的风险就可能发生，那我们费半天劲加密传输密码也失去了意义。我们可以从之前的新闻“<a href="http://www.sohu.com/a/230309592_465914" target="_blank" rel="noopener">GitHub 无意中将一些明文密码记录在内部日志中</a>”得到教训。</p>
<h3 id="2-2-哈希算法加密密码"><a href="#2-2-哈希算法加密密码" class="headerlink" title="2.2 哈希算法加密密码"></a>2.2 哈希算法加密密码</h3><p>经常被大家用来加密的算法有MD5和SHA系列（如SHA1、SHA256、SHA384、SHA512等）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(<span class="string">'truepassword'</span>)</span><br></pre></td></tr></table></figure></p>
<p>但这样容易被破解。黑客会事先计算大量密码对应的各种哈希算法的哈希值，并把密码及对应的哈希值存入一个表格中（这种表格通常被称为彩虹表），在破解密码时只需要到事先准备的彩虹表里匹配即可。</p>
<h3 id="2-3-加“盐”提高安全性"><a href="#2-3-加“盐”提高安全性" class="headerlink" title="2.3 加“盐”提高安全性"></a>2.3 加“盐”提高安全性</h3><p>盐，即一个随机的字符串，往明文密码里加盐就是把明文密码和一个随机的字符串拼接在一起。<br>我们可以先往明文密码加盐，然后再对加盐之后的密码用哈希算法加密。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> salt = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">10000</span>).toString()</span><br><span class="line"><span class="keyword">const</span> encrypted = md5(<span class="string">`truepassword@<span class="subst">$&#123;salt&#125;</span>`</span>) <span class="comment">// 用@分割</span></span><br></pre></td></tr></table></figure></p>
<p>虽然加盐的算法能有效应对彩虹表的破解法，但它的安全级别并不高，因为计算哈希值耗时极短，黑客仍然可以用穷举法来破解，只是增加了一些耗时。</p>
<h3 id="2-4-用BCrypt或者PBKDF2增加破解的难度"><a href="#2-4-用BCrypt或者PBKDF2增加破解的难度" class="headerlink" title="2.4 用BCrypt或者PBKDF2增加破解的难度"></a>2.4 用BCrypt或者PBKDF2增加破解的难度</h3><p>这两个算法最大的特点是我们可以通过参数设置重复计算的次数，重复计算的次数越多耗时越长。如果计算一个哈希值需要耗时1秒甚至更多，那么黑客们采用暴利法破解密码将几乎不再可能。破解一个6位纯数字密码需要耗时11.5天，更不要说高安全级别的密码了。<br>而安全换了的是性能的损失，因为它的复杂性，导致了每次计算的耗时远远大于普通的加盐算法。<br>下面是使用<a href="https://www.npmjs.com/package/bcryptjs" target="_blank" rel="noopener"><code>bcryptjs</code></a>的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcryptjs'</span>)</span><br><span class="line"><span class="keyword">const</span> salt = bcrypt.genSaltSync(<span class="number">10</span>) <span class="comment">// rounds决定了加密复杂度</span></span><br><span class="line"><span class="keyword">const</span> hash = bcrypt.hashSync(<span class="string">'truepassword'</span>, salt)</span><br></pre></td></tr></table></figure></p>
<p>bcrypt加密后的字符串形如：$2a$10$asdjflkaydgigadfahgl.asdfaoygoqhgasldhf，其中：$是分割符，无意义；2a是bcrypt加密版本号；10是cost的值；而后的前22位是salt值；再然后的字符串就是密码的密文了；</p>
<h2 id="3-设置密码与验证密码"><a href="#3-设置密码与验证密码" class="headerlink" title="3 设置密码与验证密码"></a>3 设置密码与验证密码</h2><p>以上就是设置密码时会用到的加密传输与加密存储密码了。<br>小结一下，流程如下：</p>
<ol>
<li>使用https协议</li>
<li>利用crypto的RSA非对称加密密码并传输数据</li>
<li>用bcryptjs单向加密，并存储到数据库中</li>
</ol>
<p>当验证密码时，使用bcryptjs的API将解密得到的明文密码与数据库的密文相比较，即可以验证密码。<br>当验证通过时，就需要生成一个登录态，并写到cookie中。接下来，将详细说这一部分。</p>
<h2 id="4-设置Cookie"><a href="#4-设置Cookie" class="headerlink" title="4 设置Cookie"></a>4 设置Cookie</h2><h3 id="4-1-为什么要设置Cookie"><a href="#4-1-为什么要设置Cookie" class="headerlink" title="4.1 为什么要设置Cookie"></a>4.1 为什么要设置Cookie</h3><p>由于http协议本身是无状态的，因此协议本身是不支持“登录状态”这样的概念的，必须由项目自己来实现。</p>
<p>那么，如何识别用户的登录态？</p>
<p>session，指代多个有关联的http请求所构成的一个会话。登陆后服务端将sessionid（一般是用户id）设置到Cookie中。这个会话里的每一次请求都带上这个Cookie，服务端通过Cookie既可识别用户。</p>
<blockquote>
<p>把用户id设置到Cookie中，再通过用户id获取用户信息，比直接把所有用户信息设置到Cookie中更安全</p>
</blockquote>
<h3 id="4-2-生成sessionid"><a href="#4-2-生成sessionid" class="headerlink" title="4.2 生成sessionid"></a>4.2 生成sessionid</h3><p>为什么不直接把用户id设置到cookie中？<br>因为Cookie携带在HTTP头部中，可以被中间人获取，敏感信息不应该通过Cookie传输。明文的用户id容易被黑客猜测到用户id的生成逻辑（一般是按顺序排列的数字），从而假冒用户。</p>
<p>因此，使用保证唯一性和随机性的算法（如uuid等）生成sessionid，将sessionid与用户id的映射关系存入redis等数据库中，并设置过期时间。<br>客户端再次发起请求时，通过sessionid得到用户id，再通过用户id查询redis或memchache，获取用户信息。<br>同一个userid可以有多个sessionid。这使得用户可以同时在多个设备上登录。</p>
<p>或者使用对称加密算法，密钥放在服务器端，在sessionid中加上时间戳，解密后得到用户id和时间戳并校验时间戳。但这个方案一旦有某个sessionid被盗用，无法在有效期前删除该sessionid。</p>
<h3 id="4-3-设置Cookie的属性"><a href="#4-3-设置Cookie的属性" class="headerlink" title="4.3 设置Cookie的属性"></a>4.3 设置Cookie的属性</h3><ul>
<li>过期时间（<code>Expires</code>）或有效期（<code>Max-Age</code>）<br>持久性Cookie可以指定一个特定的过期时间（<code>Expires</code>）或有效期（<code>Max-Age</code>）。</li>
<li><code>Secure</code>和<code>HttpOnly</code><br>标记为 <code>Secure</code> 的Cookie只应通过被HTTPS协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过Cookie传输，因为Cookie有其固有的不安全性，Secure 标记也无法提供确实的安全保障。从 Chrome 52 和 Firefox 52 开始，不安全的站点（http:）无法使用Cookie的 Secure 标记。<br>为避免跨域脚本 (XSS) 攻击，通过JavaScript的 Document.cookie API无法访问带有 <code>HttpOnly</code> 标记的Cookie，它们只应该发送给服务端。</li>
<li><code>Domain</code> 和 <code>Path</code><br><code>Domain</code> 和 <code>Path</code> 标识定义了Cookie的作用域：即Cookie应该发送给哪些URL。<br><code>Domain</code> 标识指定了哪些主机可以接受Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了<code>Domain</code>，则一般包含子域名。<br><code>Path</code> 标识指定了主机下的哪些路径可以接受Cookie（该URL路径必须存在于请求URL中）。以字符 <code>%x2F</code> (“/“) 作为路径分隔符，子路径也会被匹配。</li>
<li><code>SameSite</code><br><code>SameSite</code> Cookie允许服务器要求某个cookie在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击（CSRF）。但目前SameSite Cookie还处于实验阶段，并不是所有浏览器都支持。</li>
</ul>
<p>详细看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener">HTTP Cookies</a></p>
<h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h2><ul>
<li><a href="http://showme.codes/2017-02-20/understand-https/" target="_blank" rel="noopener">【协议森林】也许，这样理解HTTPS更容易</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36603247" target="_blank" rel="noopener">如何加密传输和存储用户密码</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener">HTTP cookies</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">数字签名是什么？</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 网络知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[虚拟DOM的简单实现]]></title>
      <url>http://seminelee.github.io/2019/09/09/virtual-dom/</url>
      <content type="html"><![CDATA[<h1 id="1-什么是虚拟DOM"><a href="#1-什么是虚拟DOM" class="headerlink" title="1. 什么是虚拟DOM"></a>1. 什么是虚拟DOM</h1><p>虚拟DOM简而言之就是，用JS去按照DOM结构来实现的树形结构对象，你也可以叫做DOM对象</p>
<a id="more"></a>
<h1 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h1><ol>
<li>用JS对象模拟DOM（虚拟DOM）</li>
<li>把此虚拟DOM转成真实DOM并插入页面中（render）</li>
<li>如果有事件发生修改了虚拟DOM，比较两棵虚拟DOM树的差异，得到差异对象（补丁数组）（diff）</li>
<li>把差异对象（补丁数组）应用到真正的DOM树上（patch）</li>
</ol>
<h1 id="3-代码仓库"><a href="#3-代码仓库" class="headerlink" title="3. 代码仓库"></a>3. 代码仓库</h1><p>参考<a href="https://zh-hans.reactjs.org/docs/introducing-jsx.html" target="_blank" rel="noopener">React官网</a>，实现<code>createElement</code>等方法。为了省去热更新等配置，使用了<code>yarn create react-app my-app --typescript</code>构建项目。<br>详细直接看代码及注释<br><a href="https://github.com/seminelee/virtual-dom" target="_blank" rel="noopener">github</a></p>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
            <tag> 虚拟DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解React Native与小程序的底层框架]]></title>
      <url>http://seminelee.github.io/2019/05/08/rn-miniprogram/</url>
      <content type="html"><![CDATA[<p>本文是学习React Native与小程序官方开发指南的笔记与总结，以了解React Native和小程序的底层框架。<br><a id="more"></a></p>
<h1 id="Hybrid-App"><a href="#Hybrid-App" class="headerlink" title="Hybrid App"></a>Hybrid App</h1><p>在了解React Native与小程序前，我们先来了解一下Hybrid App。</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>Hybrid App（混合模式移动应用）是指介于web-app、native-app这两者之间的app，兼具“Native App良好用户交互体验的优势”和“Web App跨平台开发的优势”。</p>
<blockquote>
<p>Native App是一种基于智能手机本地操作系统如iOS、Android、WP并使用原生程式编写运行的第三方应用程序，也叫本地app。一般使用的开发语言为JAVA、C++、Objective-C。<br>Web App就是运行于网络和标准浏览器上，基于网页技术开发实现特定功能的应用。</p>
</blockquote>
<p>以下是与Web App和Native App的对比：</p>
<table>
<thead>
<tr>
<th></th>
<th>Web App</th>
<th>Hybrid App</th>
<th>Native App</th>
</tr>
</thead>
<tbody>
<tr>
<td>开发成本</td>
<td>低</td>
<td>中</td>
<td>高</td>
</tr>
<tr>
<td>维护更新</td>
<td>简单</td>
<td>简单</td>
<td>复杂</td>
</tr>
<tr>
<td>体验</td>
<td>差</td>
<td>优</td>
<td>优</td>
</tr>
<tr>
<td>安装</td>
<td>不需要</td>
<td>需要</td>
<td>需要</td>
</tr>
<tr>
<td>跨平台</td>
<td>优</td>
<td>优</td>
<td>差</td>
</tr>
</tbody>
</table>
<h2 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h2><p>Hybrid App的本质，其实是在原生的 App 中，使用 WebView 作为容器直接承载 Web页面，也有人说成是“套壳”。<br>其中，最核心的点就是 Native端 与 H5端 之间的双向通讯层，也可以理解为我们需要一套跨语言通讯方案，来完成 Native(Java/Objective-c/…) 与 JavaScript 的通讯。这个方案就是 <strong>JSBridge</strong>，而实现的关键便是作为容器的 <strong>WebView</strong>，一切的原理都是基于 WebView 的机制。<br><img src="/static/2019/07/hybrid-app-1.jpg" alt="Hybrid App"></p>
<blockquote>
<p>WebView是一个基于webkit引擎、展现web页面的控件。</p>
</blockquote>
<h2 id="现有方案"><a href="#现有方案" class="headerlink" title="现有方案"></a>现有方案</h2><p>现在比较流行的混合方案主要有三种，主要是在UI渲染机制上的不同：</p>
<ol>
<li>基于 WebView UI 的基础方案，市面上大部分主流 App 都有采用，例如微信JS-SDK，通过 JSBridge 完成 H5 与 Native 的双向通讯，从而赋予H5一定程度的原生能力。</li>
<li>基于 Native UI 的方案，例如 React-Native、Weex。在赋予 H5 原生API能力的基础上，进一步通过 JSBridge 将js解析成的虚拟节点树(Virtual DOM)传递到 Native 并使用 <strong>原生渲染</strong> 。</li>
<li>另外还有近期比较流行的小程序方案，也是通过更加定制化的 JSBridge，并使用 <strong>双线程</strong> 的模式隔离了JS逻辑与UI渲染，形成了特殊的开发模式，提高了页面性能及开发体验。</li>
</ol>
<p>以上的三种方案，其实同样都是基于 JSBridge 完成的通讯层，第二三种方案，其实可以看做是在方案一的基础上，继续通过不同的新技术进一步提高了应用的混合程度。</p>
<p>接下来，我们先看一下React Native的方案。</p>
<h1 id="React-Native的底层框架"><a href="#React-Native的底层框架" class="headerlink" title="React Native的底层框架"></a>React Native的底层框架</h1><h2 id="总体框架"><a href="#总体框架" class="headerlink" title="总体框架"></a>总体框架</h2><p><img src="/static/2019/07/react-native.jpeg" alt="React Native"></p>
<ul>
<li>js层<br>该层提供了各种供开发者使用的组件以及一些工具库（事件分发等）。</li>
<li>C++层<br>主要处理java/OC与js的通信（JSBridge）以及执行JavaScript（JS脚本引擎）。</li>
<li>Native层（Object C/Java层）<br>主要包括UI渲染器、网络通信等工具库。根据不同操作系统有不同的实现。</li>
</ul>
<h2 id="UI渲染"><a href="#UI渲染" class="headerlink" title="UI渲染"></a>UI渲染</h2><p>因为React Native的底层为React框架，同样地也体现了虚拟DOM的思想</p>
<ol>
<li>首先Js层通过jsx编写的Virtual Dom来构建Component</li>
<li>Native层将其转成真实DOM插入到原生 App 的页面中。</li>
<li>当有变更，通过diff算法生成差异对象</li>
<li>最终由 Native层将差异对象应用到原生App的页面元素上。</li>
</ol>
<blockquote>
<p>虚拟DOM具体实现思路：</p>
<ol>
<li>用JS对象模拟DOM（虚拟DOM）</li>
<li>把此虚拟DOM转成真实DOM并插入页面中（render）</li>
<li>如果有事件发生修改了虚拟DOM，比较两棵虚拟DOM树的差异，得到差异对象（补丁数组）（diff）</li>
<li>把差异对象（补丁数组）应用到真正的DOM树上（patch）<br>优点是能高效的改动DOM，避免了重新绘制DOM。</li>
</ol>
</blockquote>
<h2 id="通信机制"><a href="#通信机制" class="headerlink" title="通信机制"></a>通信机制</h2><p>主要是使用JSCore实现JS和Object C/Java交互。<br>大致步骤如下：</p>
<ul>
<li>把JSX代码解析成javaScript代码</li>
<li>读取JS文件，并利用利用JS脚本引擎执行</li>
<li>返回一个数组，数组中会描述OC/Java对象，描述对象属性和所需要执行的方法，这样就能让这个对象设置属性，并且调用方法。</li>
</ul>
<blockquote>
<p>JSCore，即JavaScriptCore，JS引擎的核心部分。<br>iOS使用的是内置的JavaScriptCore，Android使用的是 <a href="https://webkit.org" target="_blank" rel="noopener">https://webkit.org</a> 家的jsc.so。</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>RN既有Native的体验，又能使用前端开发者熟悉的React框架，并具有hybrid技术的优点，能跨平台开发，能远程更新代码，提高迭代频率和效率。<br>但还有以下不足：</p>
<ul>
<li>RN 所支持的样式是 CSS 的子集，会满足不了 Web 开发者日渐增长的需求；</li>
<li>RN 现有能力下还存在的一些不稳定问题，比如性能、Bug等。</li>
<li>RN 是把渲染工作全都交由客户端原生渲染，会有更接近原生的体验，但实际上一些简单的界面元素使用 Web 技术渲染完全能胜任。</li>
</ul>
<p>接下来，我们来看一下小程序的双线程的模式。</p>
<h1 id="小程序的底层框架"><a href="#小程序的底层框架" class="headerlink" title="小程序的底层框架"></a>小程序的底层框架</h1><h2 id="双线程模型"><a href="#双线程模型" class="headerlink" title="双线程模型"></a>双线程模型</h2><p>如下图，小程序的运行环境分成渲染层和逻辑层，WXML 模板和 WXSS 样式工作在渲染层，JS 脚本工作在逻辑层。小程序的渲染层和逻辑层分别由2个线程管理：渲染层的界面使用了WebView 进行渲染；逻辑层采用JsCore线程运行JS脚本。<br>一个小程序存在多个界面，所以渲染层存在多个WebView线程。这使得小程序更贴近原生体验，也避免了单个WebView的任务过于繁重。<br>这两个线程的通信会经由微信客户端（Native）做中转，逻辑层发送网络请求也经由Native转发。<br><img src="/static/2019/07/miniprogram.png" alt="小程序双线程模型"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>小程序的渲染层和逻辑层分离主要有两个原因：</p>
<ol>
<li>UI渲染跟 JavaScript 的脚本执行分别在两个线程，从而避免一些逻辑任务抢占UI渲染的资源。</li>
<li>为了解决管控与安全问题，提供一个沙箱环境来运行开发者的JavaScript 代码（逻辑层），从而阻止开发者使用一些浏览器提供的，诸如跳转页面、操作DOM、动态执行脚本的开放性接口。详情可以看官网的<a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0006a2289c8bb0bb0086ee8c056c0a" target="_blank" rel="noopener">管控与安全</a>。</li>
<li>渲染层和逻辑层的分离也给在不同的环境下（小程序与小程序开发者工具）运行提供了可能性。</li>
</ol>
<h2 id="UI渲染-1"><a href="#UI渲染-1" class="headerlink" title="UI渲染"></a>UI渲染</h2><p>与RN一样，小程序在页面渲染上也体现了虚拟DOM的思想。<br><img src="/static/2019/07/miniprogram-dom.png" alt="小程序页面渲染"></p>
<ol>
<li>首先，在渲染层，宿主环境会把WXML可以先转成JS对象，然后再渲染出真正的Dom树。</li>
<li>在逻辑层发生数据变更的时候，我们需要通过宿主环境提供的setData方法把数据从逻辑层传递到渲染层，</li>
<li>再经过对比前后差异，把差异应用在原来的Dom树上，渲染出正确的UI界面。</li>
</ol>
<p>在组件系统方面，小程序的大部分组件由Exparser组件框架实现，小部分原生组件由客户端参与组件的渲染，以提供更好的性能。<br>比如原生组件map<code>&lt;map latitude=&quot;39.92&quot; longtitude=&quot;116.46&quot;&gt;&lt;/map&gt;</code><br>在实际运行时，</p>
<ol>
<li>渲染层webview创建组件，插入到DOM树中后计算布局（位置与宽高）。</li>
<li>通过通信机制通知Native，Native会根据布局插入一块原生区域并渲染。</li>
<li>当webview得知位置或宽高发生变化时，通知Native做相应的调整。</li>
</ol>
<p>详细看<a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=000caab39b88b06b00863ab085b80a" target="_blank" rel="noopener">原生组件</a>。</p>
<h2 id="通信原理"><a href="#通信原理" class="headerlink" title="通信原理"></a>通信原理</h2><p>那么，渲染层与逻辑层是怎么与Native通信的呢？<br>在视图层与客户端的交互通信（基本上只是原生组件会用到）方面，</p>
<ul>
<li>iOS 利用WKWebView 的提供 messageHandlers 特性；</li>
<li>安卓则是往 WebView 的 window 对象注入一个原生方法，最终会封装成 WeiXinJSBridge 这样一个兼容层。</li>
</ul>
<p>在逻辑层与客户端原生通信机制方面，</p>
<ul>
<li>iOS平台可以往JavaScripCore框架注入一个全局的原生方法；</li>
<li>安卓方面则是跟渲染层一致的。</li>
</ul>
<h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><p>上面有提到渲染层和逻辑层的分离也给在不同的环境下运行提供了可能性。在开发者工具中，逻辑层实际上是使用一个隐藏着的<webview>标签来模拟JSCore的。并通过将JSCore中不支持的BOM对象局部变量化，使得开发者无法在小程序代码中正常使用BOM，从而避免不必要的错误。<br>在通讯机制方面，开发者工具底层维护着一个WebSocket服务器，用于在WebView与开发者工具之间建立可靠的消息通讯链路，使得接口调用，事件通知，数据交换能够正常进行，从而使小程序模拟器成为一个统一的整体。<br>详细可看官网上的<a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0000a24f9d0ac86b00867f43a5700a" target="_blank" rel="noopener">微信开发者工具</a></webview></p>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>小程序双线程模型中，渲染层和逻辑层分离，具有渲染快、加载快的优点；<br>但任何数据传递都是线程间的通信，也就是都会有一定的延时。这会使得各部分的运行时序变得复杂一些。详细可以看官网上的<a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0006a2289c8bb0bb0086ee8c056c0a" target="_blank" rel="noopener">天生的延时</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><p>RN与小程序都具有hybrid技术的优点，兼具“Native App良好用户交互体验的优势”和“Web App跨平台开发的优势”。<br>从框架来说，都使用Web 相关技术来编写业务代码；都实现了一套跨语言通讯方案，来完成 Native(Java/Objective-c/…)端 与 JavaScript （小程序中分为渲染层和逻辑层）的通讯。</p>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><p>从渲染底层来看，小程序使用浏览器内核来渲染界面（小部分原生组件由客户端参与渲染），即界面主要由成熟的 Web 技术渲染，辅之以大量的接口提供丰富的客户端原生能力；而 RN 则是用客户端原生渲染的。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/p/54019800" target="_blank" rel="noopener">Hybrid App技术解析 – 原理篇</a></li>
<li><a href="https://juejin.im/post/5a6460f8f265da3e4f0a446d" target="_blank" rel="noopener">React Native for Android 原理分析与实践：实现原理</a></li>
<li><a href="https://www.jianshu.com/p/5cc61ec04b39" target="_blank" rel="noopener">【React Native】从源码一步一步解析它的实现原理</a></li>
<li><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0004a2ef9b8f803b0086831c75140a" target="_blank" rel="noopener">小程序开发者文档</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> hybrid app </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> hybrid app </tag>
            
            <tag> React Native </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[认识 react Hooks]]></title>
      <url>http://seminelee.github.io/2019/03/04/react-hooks/</url>
      <content type="html"><![CDATA[<p>Hooks是React v16.7.0-alpha中加入的新特性。Hook是一种特殊的函数，允许您“钩入”React特性，让你在class以外使用state和其他React特性。<br>总结下来，Hooks主要有三种Hook，它们分别为我们带来了新的特性：<br><a id="more"></a></p>
<h1 id="state-Hook-让你可以在函数组件中使用state"><a href="#state-Hook-让你可以在函数组件中使用state" class="headerlink" title="state Hook 让你可以在函数组件中使用state"></a>state Hook 让你可以在函数组件中使用state</h1><p>Class有一定的学习成本，你必须了解this如何在JavaScript中工作，类也为今天的工具带来了不少的issue。比如，classes不能很好的被minify。<br>而state Hook 让你可以在函数组件中使用state，从而避免以上的问题。</p>
<p>用过React的同学可能知道“无状态组件”是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Example = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// You can use Hooks here!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>之前将它说成“无状态组件”，主要是因为无法像在class里一样使用state。<br>而state Hook可以让你在class以外使用state和其他React特性，现在你可以叫它做函数组件，而不是“无状态组件”了。代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个新的状态变量count</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>在这段代码中，我们引入了<code>useState</code>这个Hook。先将状态初始化为 <code>{ count: 0 }</code>, 然后当用户点击含有<code>this.setState()</code>的回调函数时，我们计数，改变这个状态。<br><strong>这样写的好处是什么呢？</strong> 这样，我们就不用写class，也避免了一切class所带来的问题。</p>
<p><code>useState</code>就是一种Hook，我们继续来看其他Hook。</p>
<h1 id="Effect-Hook-让你可以根据相关部分将一个组件分割成更小的函数"><a href="#Effect-Hook-让你可以根据相关部分将一个组件分割成更小的函数" class="headerlink" title="Effect Hook 让你可以根据相关部分将一个组件分割成更小的函数"></a>Effect Hook 让你可以根据相关部分将一个组件分割成更小的函数</h1><p>然而随着开发的进展组件会变得越来越大、越来越混乱，每个生命周期钩子中都包含了一堆互不相关的逻辑。最终的结果是强相关的代码被分离，反而是不相关的代码被组合在了一起。这显然会导致大量错误。<br>Effect Hook 让你可以根据相关部分将一个组件分割成更小的函数，而不是根据生命周期，从而避免以上问题。</p>
<h2 id="挂载和更新时调用effect"><a href="#挂载和更新时调用effect" class="headerlink" title="挂载和更新时调用effect"></a>挂载和更新时调用effect</h2><p>在很多时候，我们想要执行相同的 side effect，不管组件是刚刚挂载，或是刚刚更新。从概念上讲，我们想要它在每次 render 之后执行。<br>我们在刚刚的例子中再引入<code>useEffect</code>Hook，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 与 componentDidMount 和 componentDidUpdate 类似:</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过浏览器自带的 API 更新页面标题</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>在这段代码中，每一次更新<code>count</code>，我们都会通过<code>document.title</code>更新页面标题。<code>useEffect</code>中的代码会在第一次 render 和 之后的每次 update 后运行。就相当于在<code>componentDidMount</code>、<code>componentDidUpdate</code>中写一样。<br><strong>那使用它的好处在哪呢？</strong> 我们可以想一下，如果用class来写上面的代码，则需要在两个生命周期中重复这段代码，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而使用<code>useEffect</code>的话，React 会记录下你传给 <code>useEffect</code> 的这个方法，然后在进行了 DOM 更新之后调用这个方法，这种写法就避免了重复代码了。</p>
<h2 id="卸载时清理effect"><a href="#卸载时清理effect" class="headerlink" title="卸载时清理effect"></a>卸载时清理effect</h2><p>在 React class 中，典型的做法是在 <code>componentDidMount</code> 里创建订阅，然后在 <code>componentWillUnmount</code> 中清除它。<br>那用Effect Hook要怎么做呢？在<code>useEffect</code>的方法中返回执行清理的函数就可以了。看下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    <span class="comment">// 明确在这个 effect 之后如何清理它</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Loading...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">'Online'</span> : <span class="string">'Offline'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>那使用它的好处在哪呢？</strong> 明显，这让我们让添加和移除订阅的逻辑彼此靠近。它们是同一个 effect 的一部分！<br><strong>那React在什么时候清理 effect呢？</strong> React 在每次组件 unmount 的时候执行清理。然而，正如我们之前了解的那样，effect 会在 每次 render 时运行，而不是仅仅运行一次。这也就是为什么 React 也会在下次运行 effect 之后清理上一次 render 中的 effect。</p>
<p>如果有多个Effect时，Effect Hook的优势更明显。可以看下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatusWithCounter</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 关于计数器的state与effect</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 关于是否在线的state与effect</span></span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>个人觉得比起在class中把逻辑拆分到<code>componentDidMount</code>和<code>componentWillUnmount</code>，这的确更加清晰了。</p>
<h1 id="自定义-Hook-让你跨组件复用stateful-logic"><a href="#自定义-Hook-让你跨组件复用stateful-logic" class="headerlink" title="自定义 Hook 让你跨组件复用stateful logic"></a>自定义 Hook 让你跨组件复用stateful logic</h1><p>之前，跨组件复用stateful logic(包含状态的逻辑)十分困难。<a href="https://react.docschina.org/docs/render-props.html" target="_blank" rel="noopener">render props</a> 和 <a href="https://react.docschina.org/docs/higher-order-components.html" target="_blank" rel="noopener">高阶组件</a>都要求你重新构造你的组件，这可能会非常麻烦。<br>而自定义 Hook 就是用来解决这个问题的。<br>我们将上面的例子中的<code>FriendStatus</code>改一下，改成能被复用的组件<code>useFriendStatus</code>，和复用这个组件的stateful logic的两个组件，<code>FriendStatus</code>和<code>FriendListItem</code>，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFriendStatus</span>(<span class="params">friendID</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Loading...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">'Online'</span> : <span class="string">'Offline'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li style=&#123;&#123; <span class="attr">color</span>: isOnline ? <span class="string">'green'</span> : <span class="string">'black'</span> &#125;&#125;&gt;</span><br><span class="line">      &#123;props.friend.name&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>两个组件使用相同的Hook共享状态吗?</strong> 不。自定义Hook是一种重用有状态逻辑的机制(例如设置订阅和记住当前值)，但是每次使用自定义Hook时，它内部的所有状态和效果都是完全隔离的。<br><strong>自定义Hook如何获得隔离状态的?</strong> 因为我们直接调用<code>useFriendStatus</code>，从React的角度来看，我们的组件只调用<code>useState</code>和<code>useEffect</code>。正如我们之前学到的，我们可以在一个组件中多次调用<code>useState</code>和<code>useEffect</code>，它们将是完全独立的。</p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>这里只简单总结了React Hook几个新特性，更多详情可以看官网</p>
<ul>
<li><a href="https://react.docschina.org/docs/hooks-intro.html" target="_blank" rel="noopener">Introducing Hooks</a></li>
<li><a href="https://react.docschina.org/docs/hooks-state.html" target="_blank" rel="noopener">Using the State Hook</a></li>
<li><a href="https://react.docschina.org/docs/hooks-effect.html" target="_blank" rel="noopener">Using the Effect Hook</a></li>
<li><a href="https://react.docschina.org/docs/hooks-custom.html" target="_blank" rel="noopener">Building Your Own Hooks</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解浏览器与Nodejs中的event loop]]></title>
      <url>http://seminelee.github.io/2019/01/26/event-loop/</url>
      <content type="html"><![CDATA[<h1 id="event-loop是什么"><a href="#event-loop是什么" class="headerlink" title="event loop是什么"></a>event loop是什么</h1><p>event loop即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。<br><a id="more"></a></p>
<h1 id="浏览器中的事件循环"><a href="#浏览器中的事件循环" class="headerlink" title="浏览器中的事件循环"></a>浏览器中的事件循环</h1><h2 id="主线程、执行栈、任务队列"><a href="#主线程、执行栈、任务队列" class="headerlink" title="主线程、执行栈、任务队列"></a>主线程、执行栈、任务队列</h2><p>Javascript 有一个 main thread <strong>主线程</strong> 和 call-stack <strong>执行栈</strong>。所有的任务都会被放到执行栈等待主线程执行。<br><strong>执行栈</strong> 也就是在其它编程语言中所说的“调用栈”，是一种拥有 LIFO（后进先出）数据结构的栈，被用来存储代码运行时创建的所有执行上下文。当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。<br><strong>任务队列</strong> Task Queue，即队列，是一种先进先出的一种数据结构。</p>
<h2 id="同步任务和异步任务"><a href="#同步任务和异步任务" class="headerlink" title="同步任务和异步任务"></a>同步任务和异步任务</h2><p>Javascript单线程任务被分为同步任务和异步任务。</p>
<ul>
<li>同步任务会在执行栈中按照顺序等待主线程依次执行</li>
<li>异步任务会进入Event Table并注册函数。当指定的事情完成时，Event Table会将这个函数移入任务队列中。等待主线程空闲的时候（执行栈被清空），任务队列的任务按顺序被读取到栈内等待主线程的执行。<br>如图：<br><img src="/static/2019/02/eventloop-1.png" alt="同步任务和异步任务"></li>
</ul>
<h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><p>除了广义的同步任务和异步任务，我们对任务有更精细的定义。在高层次上，JavaScript中有宏任务（MacroTask）和微任务（MicroTask）。</p>
<ul>
<li>MacroTask（宏任务）包括script全部代码、setTimeout、setInterval、I/O、UI Rendering等；</li>
<li>MicroTask（微任务）包括Process.nextTick（Node独有）、Promise、Object.observe(废弃)等。</li>
</ul>
<p>JS 引擎首先在宏任务队列中取出第一个任务<code>执行script</code>，执行完毕后取出微任务队列中的所有任务顺序执行；之后再取宏任务，如此循环，直至两个队列的任务都取完。<br>如图：<br><img src="/static/2019/02/eventloop-2.png" alt="宏任务和微任务"></p>
<h2 id="总的来说"><a href="#总的来说" class="headerlink" title="总的来说"></a>总的来说</h2><ol>
<li>整体script作为第一个宏任务进入主线程。</li>
<li>同步任务被放到执行栈，异步任务会进入Event Table并注册函数，其回调函数按类别被放到宏任务队列和微任务队列中。</li>
<li>执行完所有同步任务后，开始读取任务队列中的结果。检查微任务队列，如果有任务则按顺序执行。</li>
<li>执行完所有微任务后，开始下一个宏任务。如此循环，直到两个队列（宏任务队列和微任务队列）的任务都执行完。</li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'宏事件3'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'宏事件1'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'微事件1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'微事件2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'宏事件2'</span>);</span><br></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">宏事件1</span><br><span class="line">宏事件2</span><br><span class="line">微事件1</span><br><span class="line">微事件2</span><br><span class="line">宏事件3</span><br></pre></td></tr></table></figure></p>
<p>具体过程是这样的：</p>
<ol>
<li><code>执行script</code>任务放到宏任务队列和执行栈中，主线程执行script，<code>setTimeout回调函数</code>放到宏任务队列中，打印<code>宏事件1</code>，<code>Promise then1</code> 放到微任务队列中，打印<code>宏事件2</code>，<code>执行script</code>任务完毕，执行栈清空。</li>
<li>执行微任务队列的<code>Promise then1</code>，<code>Promise回调函数1</code>放到执行栈中，主线程执行<code>Promise回调函数1</code>，打印<code>微事件1</code>。回调函数返回<code>undefined</code>，此时又有then的链式调用，又放入微任务队列中，打印<code>微事件2</code>。检查微任务队列为空。</li>
<li>宏任务队列的<code>执行script</code>任务完毕，<code>setTimeout回调函数</code>被放到执行栈中，主线程执行，打印<code>setTimeout</code>。执行栈清空，宏任务队列清空。</li>
</ol>
<h2 id="例子2-加上async-await"><a href="#例子2-加上async-await" class="headerlink" title="例子2:加上async/await"></a>例子2:加上async/await</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async2 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure>
<p>首先，我们需要先理解<code>async/await</code>。<code>async/await</code>实际上是<code>promsie</code>的语法糖。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async await</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以理解成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome 73版本（新规范）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> RESOLVE(async2).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// chrome 73版本以下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(async2).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>在新规范中，<code>RESOLVE(async2)</code> 对于<code>async2</code>为<code>promise</code>直接返回<code>async2</code>，那么<code>async2</code>的<code>then</code>方法就会被马上调用，其回调就立即进入任务队列。</li>
<li>而<code>Promise.resolve(async2)</code>，尽管该<code>promise</code>确定会<code>resolve</code>为<code>async2</code>，但这个过程本身是异步的，也就是现在进入任务队列的是新 <code>promise</code> 的 <code>resolve</code>过程，所以该 <code>promise</code> 的 <code>then</code> 不会被立即调用，而要等到当前任务队列执行到前述 <code>resolve</code> 过程才会被调用，然后其回调（也就是继续 <code>await</code> 之后的语句）才加入任务队列，所以时序上就晚了。</li>
</ul>
<p>因此，在chrome 73版本中，打印的结果是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">async2 end</span><br><span class="line">Promise</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure></p>
<p>在chrome 73版本以下，打印的结果是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">async2 end</span><br><span class="line">Promise</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">async1 end</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure></p>
<h1 id="Nodejs中的event-loop"><a href="#Nodejs中的event-loop" class="headerlink" title="Nodejs中的event loop"></a>Nodejs中的event loop</h1><h2 id="先了解一下Nodejs"><a href="#先了解一下Nodejs" class="headerlink" title="先了解一下Nodejs"></a>先了解一下Nodejs</h2><h3 id="Nodejs的特点"><a href="#Nodejs的特点" class="headerlink" title="Nodejs的特点"></a>Nodejs的特点</h3><p>Node.js 最大的特点就是使用 <strong>异步式 I/O</strong> 与 <strong>事件驱动</strong> 的架构设计。<br>对于高并发的解决方案，传统的架构是多线程模型，而Node.js 使用的是 <strong>单线程</strong> 模型，对于所有 I/O 都使用非阻塞的异步式的请求方式，避免了频繁的线程切换。<strong>异步式I/O</strong> 是这样实现的：由于大多数现代内核都是多线程的，所以它们可以处理在后台执行的多个操作。Node.js 在执行的过程中会维护一个事件队列，程序在执行时进入 <strong>事件循环</strong> 等待下一个事件到来。当事件到来时，事件循环将操作交给系统内核，当一个操作完成后内核会告诉Nodejs，对应的回调会被推送到事件队列，等待程序进程进行处理。</p>
<h3 id="Nodejs的架构"><a href="#Nodejs的架构" class="headerlink" title="Nodejs的架构"></a>Nodejs的架构</h3><p><img src="/static/2019/02/nodejs-1.jpg" alt="nodejs架构"><br>Node.js使用V8作为JavaScript引擎，使用高效的libev和libeio库支持事件驱动和异步式 I/O。Node.js的开发者在libev和libeio的基础上还抽象出了层libuv。对于POSIX1操作系统，libuv通过封装libev和libeio来利用 epoll 或 kqueue。在 Windows下，libuv 使用了 Windows的 IOCP机制，以在不同平台下实现同样的高性能。<br>Event Loop就是在libuv中实现的。</p>
<blockquote>
<p>epoll、kqueue、IOCP都是多路复用IO接口，即支持多个同时发生的异步I/O操作的应用程序编程接口。其中epoll为Linux独占，而kqueue则在许多UNIX系统上存在，包括Mac OS X。</p>
</blockquote>
<h3 id="Nodejs的运行机制"><a href="#Nodejs的运行机制" class="headerlink" title="Nodejs的运行机制"></a>Nodejs的运行机制</h3><p><img src="/static/2019/02/nodejs.png" alt="nodejs运行机制"><br>Node.js的运行机制如下:</p>
<ul>
<li>V8 引擎解析 JavaScript 脚本。</li>
<li>解析后的代码，调用 Node API。</li>
<li>libuv 库负责 Node API 的执行。它将不同的任务分配给不同的线程，形成一个 Event Loop（事件循环），以异步的方式将任务的执行结果返回给 V8 引擎。</li>
<li>V8 引擎再将结果返回给用户。</li>
</ul>
<h2 id="event-loop的6个阶段"><a href="#event-loop的6个阶段" class="headerlink" title="event loop的6个阶段"></a>event loop的6个阶段</h2><p>当Node.js启动时，它初始化事件循环，处理提供的输入脚本，这些脚本可能进行异步API调用、调度计时器或调用process.nextTick()，然后开始处理事件循环。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     pending callbacks │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure></p>
<ul>
<li>timers: 执行setTimeout和setInterval中到期的callback。</li>
<li>pending callback: 上一轮循环中少数的callback会放在这一阶段执行。</li>
<li>idle, prepare: 仅在内部使用。<code>process.nextTick()</code>在这一阶段执行。</li>
<li>poll: 最重要的阶段，执行pending callback，在适当的情况下会阻塞在这个阶段。</li>
<li>check: 执行setImmediate的callback。</li>
<li><p>close callbacks: 执行close事件的callback，例如socket.on(‘close’[,fn])或者http.server.on(‘close, fn)。</p>
<blockquote>
<p>setImmediate()是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数</p>
</blockquote>
<p>event loop的每一次循环都需要依次经过上述的阶段。每个阶段都有自己的FIFO的callback队列（在timer阶段其实使用一个最小堆而不是队列来保存所有元素，比如timeout的callback是按照超时时间的顺序来调用的，并不是先进先出的队列逻辑），每当进入某个阶段，都会从所属的队列中取出callback来执行。当队列为空或者被执行callback的数量达到系统的最大数量时，进入下一阶段。这六个阶段都执行完毕称为一轮循环。</p>
</li>
</ul>
<h3 id="timers"><a href="#timers" class="headerlink" title="timers"></a>timers</h3><p>在timers阶段，会执行setTimeout和setInterval中到期的callback。执行这两者回调需要设置一个毫秒数，理论上来说，应该是时间一到就立即执行callback回调，但是由于system的调度可能会延时，达不到预期时间。如下例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someAsyncOperation</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Assume this takes 95ms to complete</span></span><br><span class="line">  fs.readFile(<span class="string">'/path/to/file'</span>, callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeoutScheduled = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> delay = <span class="built_in">Date</span>.now() - timeoutScheduled;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;delay&#125;</span>ms have passed since I was scheduled`</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// do someAsyncOperation which takes 95 ms to complete</span></span><br><span class="line">someAsyncOperation(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> startCallback = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something that will take 10ms...</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">Date</span>.now() - startCallback &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// do nothing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>当进入事件循环时，它有一个空队列（<code>fs.readFile()</code>尚未完成），因此定时器将等待剩余毫秒数，当到达95ms（假设<code>fs.readFile()</code>需要95ms）时，<code>fs.readFile()</code>完成读取文件并且其完成需要10毫秒的回调被添加到轮询队列并执行。因此，原本设置100ms后执行的回调函数，会在约105ms后执行。<br>P.S. timers的源码<a href="https://github.com/nodejs/node/blob/master/deps/uv/src/timer.c" target="_blank" rel="noopener">node/deps/uv/src/timer.c</a>的uv__run_timers函数。</p>
<h3 id="pending-callbacks"><a href="#pending-callbacks" class="headerlink" title="pending callbacks"></a>pending callbacks</h3><p>此阶段执行某些系统操作（例如TCP错误类型）的回调。 例如，如果TCP socket ECONNREFUSED在尝试connect时receives，则某些* nix系统希望等待报告错误。 这将在pending callbacks阶段执行。</p>
<h3 id="poll（轮询）"><a href="#poll（轮询）" class="headerlink" title="poll（轮询）"></a>poll（轮询）</h3><p>执行pending callback，在适当的情况下会阻塞在这个阶段。<br>poll阶段有两个主要功能：</p>
<ul>
<li>执行I/O（连接、数据进入/输出）回调。</li>
<li>处理轮询队列中的事件。</li>
</ul>
<p>当事件循环进入poll阶段并且在timers中没有可以执行定时器时，</p>
<ul>
<li>如果poll队列不为空，则事件循环将遍历其同步执行它们的callback队列，直到队列为空，或者达到system-dependent（系统相关限制）。</li>
<li>如果poll队列为空，会检查是否有setImmediate()回调需要执行，如果有则马上进入执行check阶段以执行回调。</li>
</ul>
<p>如果timers中有可以执行定时器且 poll 队列为空时，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。</p>
<h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p>此阶段执行<code>setImmediate</code>的callback。<code>setImmediate()</code>实际上是一个特殊的计时器，它在事件循环的一个单独阶段运行。它使用一个libuv API，该API在poll阶段完成后执行callback。</p>
<blockquote>
<p><code>setImmediate()</code>和<code>setTimeout()</code>是相似的，但根据它们被调用的时间以不同的方式表现。</p>
<ul>
<li><code>setImmediate()</code>设计用于在当前poll阶段完成后check阶段执行脚本 。</li>
<li><code>setTimeout()</code> 安排在经过最小（ms）后运行的脚本，在timers阶段执行</li>
</ul>
</blockquote>
<p>举个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>其结果是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">immediate</span><br><span class="line">timeout</span><br></pre></td></tr></table></figure></p>
<p>主要原因是在I/O阶段读取文件后，事件循环会先进入poll阶段，发现有<code>setImmediate</code>需要执行，会立即进入check阶段执行<code>setImmediate</code>的回调。然后再进入timers阶段，执行<code>setTimeout</code>，打印timeout。</p>
<h3 id="close-callbacks"><a href="#close-callbacks" class="headerlink" title="close callbacks"></a>close callbacks</h3><p>如果套接字或句柄突然关闭(例如<code>socket.destroy()</code>)，那么’close’事件将在这个阶段发出。否则，它将通过<code>process.nextTick()</code>发出。</p>
<blockquote>
<p><code>process.nextTick()</code>方法将 callback 添加到next tick队列。 一旦当前事件轮询队列的任务全部完成，在next tick队列中的所有callbacks会被依次调用。即，当每个阶段完成后，如果存在 nextTick 队列，就会清空队列中的所有回调函数，并且优先于其他 microtask 执行。</p>
</blockquote>
<h1 id="Nodejs与浏览器的Event-Loop差异"><a href="#Nodejs与浏览器的Event-Loop差异" class="headerlink" title="Nodejs与浏览器的Event Loop差异"></a>Nodejs与浏览器的Event Loop差异</h1><ul>
<li>Node 端，microtask 在事件循环的各个阶段之间执行</li>
<li>浏览器端，microtask 在事件循环的 macrotask 执行完之后执行</li>
</ul>
<p><img src="/static/2019/02/eventloop-3.png" alt="Nodejs与浏览器的Event Loop差异"></p>
<p>举个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer1'</span>)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer2'</span>)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>浏览器端运行结果：<br><img src="/static/2019/02/eventloop-browser.gif" alt="浏览器端运行结果："><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timer1</span><br><span class="line">promise1</span><br><span class="line">timer2</span><br><span class="line">promise2</span><br></pre></td></tr></table></figure></p>
<p>node端（v10.15.1)运行结果<br><img src="/static/2019/02/eventloop-node.gif" alt="node端运行结果："><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timer1</span><br><span class="line">timer2</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br></pre></td></tr></table></figure></p>
<ol>
<li>全局脚本（main()）执行，将 2 个 timer 依次放入 timer 队列，main()执行完毕，调用栈空闲，任务队列开始执行；</li>
<li>首先进入 timers 阶段，执行 timer1 的回调函数，打印 timer1，并将 promise1.then 回调放入 microtask 队列，同样的步骤执行 timer2，打印 timer2；</li>
<li>至此，timer 阶段执行结束，event loop 进入下一个阶段之前，执行 microtask 队列的所有任务，依次打印 promise1、promise2</li>
</ol>
<p>在node新版本（v11）中，执行结果变成与浏览器一致：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timer1</span><br><span class="line">promise1</span><br><span class="line">timer2</span><br><span class="line">promise2</span><br></pre></td></tr></table></figure></p>
<p>详情看<a href="https://juejin.im/post/5c3e8d90f265da614274218a" target="_blank" rel="noopener">又被node的eventloop坑了，这次是node的锅</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules</a></li>
<li><a href="https://v8.js.cn/blog/fast-async/" target="_blank" rel="noopener">更快的异步函数和 Promise</a></li>
<li>《Node.js开发指南》</li>
<li><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="noopener">The Node.js Event Loop, Timers, and process.nextTick()</a></li>
<li><a href="https://mp.weixin.qq.com/s/KEl_IxMrJzI8wxbkKti5vg" target="_blank" rel="noopener">一次弄懂Event Loop</a></li>
<li><a href="https://cnodejs.org/topic/5a9108d78d6e16e56bb80882" target="_blank" rel="noopener">不要混淆nodejs和浏览器中的event loop</a></li>
<li><a href="http://www.cnblogs.com/fundebug/p/diffrences-of-browser-and-node-in-event-loop.html" target="_blank" rel="noopener">浏览器与Node的事件循环(Event Loop)有何区别?</a></li>
<li><a href="https://juejin.im/post/5c3e8d90f265da614274218a" target="_blank" rel="noopener">又被node的eventloop坑了，这次是node的锅</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Koa </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从浏览器中输入网址到网页显示的探索之旅]]></title>
      <url>http://seminelee.github.io/2018/12/15/tcp/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解网络的全貌，对于经常和网络技术打交道的人来说，还是很有必要的。最近看了《网络是怎么连接的》，记录一下读书笔记。<br>现在就让我们开启从浏览器中输入网址到网页显示的探索之旅吧！<br><a id="more"></a></p>
<h2 id="浏览器生成消息"><a href="#浏览器生成消息" class="headerlink" title="浏览器生成消息"></a>浏览器生成消息</h2><h3 id="对URI进行解析"><a href="#对URI进行解析" class="headerlink" title="对URI进行解析"></a>对URI进行解析</h3><p>用户在浏览器中输入网址后，浏览器的第一步工作就是对URI进行解析。<br>比如通过对<a href="http://www.wxample.com/dir1/file1.html" target="_blank" rel="noopener">http://www.wxample.com/dir1/file1.html</a> 进行拆分，解析，就能知道要访问的是 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 这个web服务器上路径是/dir1/file1.html的文件了。</p>
<h3 id="生成HTTP请求消息"><a href="#生成HTTP请求消息" class="headerlink" title="生成HTTP请求消息"></a>生成HTTP请求消息</h3><p>确定了web服务器和文件名后，浏览器就根据这些信息来生成HTTP请求消息了。<br>http协议定义了客户端和服务器之间交互的消息内容和步骤。根据http协议的规定，请求消息和响应消息是这样的：<br><img src="/static/2018/12/http.png" alt="http消息"></p>
<h3 id="向DNS服务器查询Web服务器的IP地址"><a href="#向DNS服务器查询Web服务器的IP地址" class="headerlink" title="向DNS服务器查询Web服务器的IP地址"></a>向DNS服务器查询Web服务器的IP地址</h3><p>生成HTTP消息之后，浏览器还需要根据域名查询IP地址，才能委托操作系统发送消息。<br>我们的计算机的操作系统的socket库（socket库是用于调用网络功能的程序组件集合）中，存在DNS解析器。浏览器程序中调用解析器后，会委托给操作系统的协议栈执行发送消息的操作，然后通过网卡将消息发送给DNS服务器。然后DNS服务器会返回响应消息，其中就包含查询到的IP地址。解析器会取出IP地址，并将其写入浏览器指定的内存地址中。如下图：<br><img src="/static/2018/12/dns.png" alt="DNS解析"><br>那DNS服务器是怎么查询ip地址的呢？<br>DNS服务器中的所有信息都是按照域名以分层次的结构来保存的，最顶层为根域。比如，查询<code>www.example.com</code>对应的ip地址，客户端会先访问最近的一台DNS服务器，该服务器会在保存的记录中查找与查询的域名匹配的记录，如果有，就返回给客户端。如果没有，则从根域开始向下查找。根域DNS服务器中没有<code>www.example.com</code>这个域名，根据域名结构知道是属于com域的，则返回com域的DNS服务器的ip地址，以此类推，最后返回<code>www.example.com</code>的ip地址。</p>
<h3 id="委托协议栈发送消息"><a href="#委托协议栈发送消息" class="headerlink" title="委托协议栈发送消息"></a>委托协议栈发送消息</h3><p>知道了ip地址后，浏览器就可以委托操作系统的协议栈向目标ip发送消息了。浏览器将按照指定的顺序来调用Socket库中的程序组件。</p>
<ol>
<li>创建套接字 <code>&lt;描述符&gt; = socket(&lt;使用IPv4&gt;, ...);</code></li>
<li>将管道连接到服务器端的套接字上 <code>connect(&lt;描述符&gt;, &lt;服务器的IP地址和端口号&gt;, ...);</code></li>
<li>收发数据 <code>write(&lt;描述符&gt;, &lt;发送数据&gt;, ...);</code> <code>&lt;接收数据长度&gt; = read(&lt;描述符&gt;, ...);</code></li>
<li>断开管道并删除套接字 <code>close(&lt;描述符&gt;);</code></li>
</ol>
<p>那协议栈具体是怎么工作的呢？我们来继续探索。</p>
<h2 id="协议栈通过TCP协议发送消息"><a href="#协议栈通过TCP协议发送消息" class="headerlink" title="协议栈通过TCP协议发送消息"></a>协议栈通过TCP协议发送消息</h2><p><img src="/static/2018/12/app-tcp.png" alt="消息收发操作"></p>
<blockquote>
<p>浏览器、邮件等一般应用程序收发数据时用TCP<br>DNS查询等收发较短的控制数据时用UDP</p>
</blockquote>
<h3 id="创建套接字"><a href="#创建套接字" class="headerlink" title="创建套接字"></a>创建套接字</h3><p>套接字的实体就是通信控制信息。在协议栈的内部有一块用于存放控制信息的内存空间，例如通信对象的IP地址、端口号、通信操作的进行状态等。这个内存空间就是套接字的实体。可以用<code>netstat</code>命令显示套接字内容，如下图<br><img src="/static/2018/12/netstat.png" alt="nestat"><br>创建套接字的过程就是：</p>
<ol>
<li>协议栈收到应用程序创建套接字的申请</li>
<li>分配用于存放套接字的内存空间</li>
<li>在内存空间中写入初始状态的控制信息</li>
<li>把表示这个套接字的描述符返回给应用程序</li>
</ol>
<p>而远方的服务器在系统启动时就创建了套接字，等待客户端连接。</p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>因为套接字中只有初始状态的控制信息，浏览器调用socket库的<code>connect</code>时需要把服务器的IP地址和端口号等控制信息告知协议栈，客户端再将我们客户端的IP地址和端口号等信息（TCP头部）告知服务器。这个交换控制信息的过程就建立了连接。这个过程也就是TCP的“三次握手”。<br><img src="/static/2018/12/tcp.jpg" alt="三次握手"></p>
<p>这个过程具体是这样的：</p>
<ol>
<li><p>客户端创建TCP头部。<br>客户端创建包含控制信息的头部（TCP头部），其中就有客户端和服务器的端口号。有了端口号，客户端的套接字就知道应该连接服务器的哪个套接字。并把头部中的控制位字段的 <strong>SYN比特设置为1</strong>，以表示连接。</p>
<p>以下为TCP头部主要字段，字段具体的设置将会在下面章节提及。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>发送方端口号</td>
<td>发送网络包的程序的端口号</td>
</tr>
<tr>
<td>接收方端口号</td>
<td>网络包的接收方程序的端口号</td>
</tr>
<tr>
<td>序号</td>
<td>发送数据的顺序编号，发送方告诉接收方 这是所有发送数据的第几个字节</td>
</tr>
<tr>
<td>ACK号</td>
<td>接收数据的顺序编号，接受方告诉发送方 已经收到了所有发送数据的第几个字节</td>
</tr>
<tr>
<td>控制位</td>
<td>该字段的每个比特分别为：URG、ACK（接收有效，通常表示已收到数据）、PSH、RST（异常中断）、SYN（连接）、FIN（断开连接）</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>客户端将信息传递给IP模块并委托它发送，到达服务器后服务器返回响应。<br>通过网络到达服务器后，服务器的IP模块会把数据传递给TCP模块，TCP模块会根据头部的信息（端口号）找到对应的套接字，套接字会写入相关信息。然后，服务器的TCP模块返回响应，与步骤1的客户端一样在TCP头部设置端口号和 <strong>SYN比特</strong>，此外，还 <strong>设置ACK号并将ACK控制位设为1</strong>，表示已经接收到网络包。</li>
<li>客户端收到响应的网络包。<br>网络包通过IP模块到达TCP模块，并通过TCP头部信息（控制位SYN比特是否为1）确认连接服务器是否成功。如果成功，则在套接字中写入服务器的IP地址、端口号等，并将状态（state）改为连接完毕（established）。然后客户端 <strong>设置ACK号并将ACK比特设为1</strong>，返回给服务器，表示已经收到网络包。服务器收到这个网络包后，连接操作就完成了。</li>
</ol>
<h3 id="收发数据"><a href="#收发数据" class="headerlink" title="收发数据"></a>收发数据</h3><p>当控制流程从<code>connect</code>返回到应用程序的时候，接下来就是调用socket库的<code>write</code>将要发送的数据交给协议栈，协议栈收到数据后执行发送操作。</p>
<ol>
<li>发送的时机。<br>协议栈并不是一收到数据就发送出去的，而是会将数据存放在内部的发送缓冲区，直到一定量才会发送。这个数值根据两个因素决定：每个网络包能容纳的数据长度；应用程序发送数据的频率。这个值在不同操作系统上的设置是不同的。如果长度优先，则效率高，而延迟长；如果时间优先，则效率降低，延迟减少。此外，应用程序还可以指定选项，比如浏览器一般会使用不等待填满缓冲区直接发送的选项。</li>
<li>对较大的数据进行拆分<br>当HTTP请求消息很长（如提交表单数据的POST请求），超过MSS长度时，发送缓冲区中的数据会被以MSS长度为单位拆分，添加TCP头部，放进单独的网络包中。<blockquote>
<p>MTU：一个网络包的最大长度，以太网中一般为1500字节<br>MSS：数据包的最大长度，理论上为MTU除去头部长度</p>
</blockquote>
</li>
<li>使用ACK号确认是否收到网络包<br>确认的原理是这样的：<br>在建立连接的第一次握手时，在将SYN设为1的同时，设置序号字段的值（序号的初始值）。<br>TCP在拆分数据时，会计算这块数据相当于所有数据中的第几个字节（从初始值开始计算），并把这个数写到TCP头部的序号字段中。接收方收到网络包时，会计算数据长度(数据长度 ＝ 网络包长度 - 头部长度)，并把目前收到的数据总长度写入TCP头部的ACK号字段中返回给发送方。<br>这样，接收方就能这样检查：上次接收到第n字节，这次如果收到序号为n+1的包，则没有遗漏。发送方也能确认接收方目前接收到n个数据，这次应该发送序号为n+1的包了。<br>另外，发送过的包都会保存在发送缓冲区中，如果对方没有返回对应的ACK号，就会重新发送这些包。</li>
<li>接收HTTP响应消息<br>浏览器在发送请求消息后，会调用<code>read</code>来委托协议栈获取响应消息。像上面说过的接收方，协议栈在接收到所有数据后会检查数据块是否丢失，如果没有就返回ACK号，并将数据块按顺序连接起来，最后交给应用程序。</li>
</ol>
<h3 id="断开"><a href="#断开" class="headerlink" title="断开"></a>断开</h3><p>收发数据完毕后，服务器和客户端都可以先发起断开，这里以从服务器断开管道并删除套接字为例子说明。断开的过程也就是TCP的“四次挥手”。<br><img src="/static/2018/12/tcp-2.jpg" alt="四次挥手"></p>
<ol>
<li>服务器的应用程序调用socket库的<code>close</code>程序，协议栈会生成包含断开信息的TCP头部，即将控制位中的<strong>FIN比特设为1</strong>，委托IP模块向客户端发送数据。同时服务器的套接字中也会记录断开操作（改变state等）。</li>
<li>客户端收到FIN为1的TCP头部，客户端的协议栈会将套接字的state设为断开，然后<strong>返回一个ACK号</strong>，告诉服务器已经收到了。之后就等待应用程序来获取数据。</li>
<li>应用程序如上面“接收HTTP响应消息”所述调用<code>read</code>来读取数据，如果协议栈已经收到所有数据了就能马上读取了，否则则继续等待协议栈。</li>
<li>最后，应用程序调用<code>close</code>来结束操作。这时协议栈会跟步骤1中的服务器一样，<strong>生成FIN比特为1</strong>的包，通过IP模块发送。服务器收到之后<strong>返回ACK号</strong>。到这里就结束了。</li>
</ol>
<p>和服务器的通信结束后，客户端等待一段时间就可以删除该套接字了。</p>
<h2 id="IP与以太网的包收发操作"><a href="#IP与以太网的包收发操作" class="headerlink" title="IP与以太网的包收发操作"></a>IP与以太网的包收发操作</h2><p>喝杯茶继续。<br>接下来我们来探索IP与以太网是怎么进行包收发操作的。<br>我们在上面的章节中经常提及协议栈的IP模块，IP模块到底做了什么工作呢？IP模块负责给包添加两个头部：</p>
<ol>
<li>IP头部：IP用的头部，包含IP地址</li>
<li>MAC头部：以太网用的头部，包括MAC地址</li>
</ol>
<h3 id="生成IP头部"><a href="#生成IP头部" class="headerlink" title="生成IP头部"></a>生成IP头部</h3><p>主要字段如下</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>标志</td>
<td>表示是否允许分片，以及当前包是否为分片包</td>
</tr>
<tr>
<td>协议号</td>
<td>表示协议的类型，如TCP：06，UDP：11</td>
</tr>
<tr>
<td>发送方IP地址</td>
<td>网络包发送方的IP地址</td>
</tr>
<tr>
<td>接收方IP地址</td>
<td>网络包接收方的IP地址</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<p>其中，接收方IP地址就是TCP模块告知的，而发送方IP地址则需要通过判断发送所使用的网卡，并填写该网卡的IP地址。那如何确定使用哪一个网卡发送呢？IP模块会根据路由表来确定把包交给哪块网卡。在我们可以通过<code>route print</code>显示路由表。</p>
<p><img src="/static/2018/12/route-print.png" alt="路由表"><br>首先，会对套接字中的目的地ip与Network Destination进行比较，找到匹配的那一行；然后查看该行，Gateway即要转发到的下一个路由器（最近的网络转发设备）的ip地址，Interface就是使用的网卡的ip地址。这样，我们就知道该用哪个网卡发送包，即IP头部的发送方ip地址字段了。</p>
<h3 id="生成MAC头部"><a href="#生成MAC头部" class="headerlink" title="生成MAC头部"></a>生成MAC头部</h3><p>以太网在判断网络包目的地时和TCP/IP的方式不同，需要知道MAC地址才能在以太网中将包发往目的地。因此还需要加上MAC头部。<br>MAC头部主要字段</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>接收方MAC地址</td>
<td>网络包接收方的MAC地址</td>
</tr>
<tr>
<td>发送方MAC地址</td>
<td>网络包发送方的MAC地址</td>
</tr>
<tr>
<td>以太类型</td>
<td>使用的协议类型，如0800：IP协议、0806ARP协议等</td>
</tr>
</tbody>
</table>
<p>刚刚说到通过查路由表可以知道要转发到的下一个路由器的ip地址和使用的网卡ip地址，我们根据这两个ip地址查询得到的MAC地址就是接收方的MAC地址和发送方的MAC地址。这里我们需要使用ARP。<br>具体是这样的，在以太网中，我们可以通过广播的方法把包发给同一个子网中的所有设备。ARP就是利用广播向所有设备提问：“这个IP地址xxx.xxx.xxx.xxx是谁的？请把你的MAC地址告诉我。”然后就会有设备回答：“这个IP地址是我的，我的MAC地址是XX-XX-XX-XX-XX-XX。”这样，我们就能得到对应的MAC地址了。</p>
<h3 id="网卡把包转换成电-光信号发送出去"><a href="#网卡把包转换成电-光信号发送出去" class="headerlink" title="网卡把包转换成电/光信号发送出去"></a>网卡把包转换成电/光信号发送出去</h3><p>网卡接收到网络包之后，就会把IP模块生成的网络包转换成电或光信号，这样就在网线上传输了。这里就不详细说了。</p>
<h3 id="路由器的包转发操作"><a href="#路由器的包转发操作" class="headerlink" title="路由器的包转发操作"></a>路由器的包转发操作</h3><p>包到达路由器后，路由器会根据路由表再一次判断要转发到的下一个路由器的ip地址，改写MAC头部中的接收方MAC地址，然后转发到下一个路由器。这个过程不断重复，最终网络包就会被送到目的地了。<br>在转发前，当包的长度大于输出端口的MTU（一个包能传输的最大数据长度）时，且IP头部的标志字段显示可以分片，路由器会使用分片功能拆分大网络包，并更新IP头部。如果包过大且不允许分包，路由器会丢弃这个包，并通过ICMP消息通知对方。</p>
<h2 id="请求到达服务器，响应返回浏览器"><a href="#请求到达服务器，响应返回浏览器" class="headerlink" title="请求到达服务器，响应返回浏览器"></a>请求到达服务器，响应返回浏览器</h2><p>在到达服务器前，可能网络包还会经过防火墙，又或者是经过缓存服务器时直接从缓存服务器中读出数据，这里就不详细说了。</p>
<h3 id="服务器的接收操作"><a href="#服务器的接收操作" class="headerlink" title="服务器的接收操作"></a>服务器的接收操作</h3><ol>
<li>到达服务器后，服务器的网卡将接收到的信号转换成数字信息，校验信号是否失真，检查包的MAC头部的接收方MAC地址。检查完成后，网卡会通过中断将网络包到达的事件通知到CPU。然后网卡驱动会根据MAC头部的协议类型把包交给相应的协议栈。</li>
<li>协议栈IP模块会先检查IP头部，检查包是否分片。如果是分片的包，则把包暂存在内存，等所有分片的包全部到达后再还原成原始包。然后检查IP头部的协议号字段，把包交给相应的模块。</li>
<li>TCP模块会先检查包的TCP头部，然后根据发送方IP、发送方端口号、接收方IP及接收方端口号找到对应的套接字。如果能找到相应的套接字则返回ACK号（第二次握手），最后建立连接（完成三次握手）。建立连接之后收到的包，TCP模块会检查TCP头部的序号，如果正常则把包放进缓冲区，最后还原成原始包。<blockquote>
<p>我们在3.1有提到，服务器在启动时就创建套接字等待连接。每次有新的客户端发起连接（第一次握手）时，服务端开始接收连接操作。协议栈会给等待连接的套接字复制一个副本，然后将控制信息写入这个新的套接字中。这个套接字与等待连接的套接字的端口号是一样的，所以还需要其他信息来做区别。</p>
</blockquote>
</li>
<li>在TCP完成所有数据的接收操作后，控制流程会转移到服务器程序，对收到的数据进行处理。</li>
<li>当数据收发完成后，便进行断开操作。</li>
</ol>
<h3 id="浏览器接受响应消息"><a href="#浏览器接受响应消息" class="headerlink" title="浏览器接受响应消息"></a>浏览器接受响应消息</h3><p>服务器发送的响应消息到达客户端后，经过网卡、协议栈，最后到达浏览器。<br>接下来，浏览器会根据http头部的Content-Type字段、文件扩展名等判断数据类型，然后将数据显示出来就可以了。不同类型等数据显示操作的过程不一样，这里就不探讨了。<br>浏览器显示网页内容成功！用户访问完成！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>《网络是怎么连接的》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 网络知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tcp </tag>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue实现原理——实现双向绑定mvvm 学习笔记]]></title>
      <url>http://seminelee.github.io/2018/07/21/vue-3/</url>
      <content type="html"><![CDATA[<h2 id="实现数据绑定的几种方法"><a href="#实现数据绑定的几种方法" class="headerlink" title="实现数据绑定的几种方法"></a>实现数据绑定的几种方法</h2><ul>
<li>发布者－订阅者模式</li>
<li>脏值检查：如angular.js，在指定事件触发时，通过脏值检测的方式比对数据是否有变更，来决定是否更新视图。这些事件有：DOM事件（输入文本、点击按钮）、XHR响应事件、浏览器Location变更事件、Timer事件（$timeout、$interval）、执行$digest()或apply()。</li>
<li>数据劫持：如vue.js，采用数据劫持结合发布者－订阅者模式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>、<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</li>
</ul>
<a id="more"></a>
<h2 id="实现vue的双向绑定"><a href="#实现vue的双向绑定" class="headerlink" title="实现vue的双向绑定"></a>实现vue的双向绑定</h2><p>主要通过<code>Object</code>的<code>defineProperty</code>属性，重写data的<code>set</code>和<code>get</code>函数来实现的。<br><img src="/static/2018/07/mvvm-1.png" alt="双向绑定"><br>下面是一个实现的例子，主要实现<code>v-model</code>、<code>v-bind</code>和<code>v-click</code>三个命令。</p>
<h3 id="最后实现结果"><a href="#最后实现结果" class="headerlink" title="最后实现结果"></a>最后实现结果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-click</span>=<span class="string">"increment"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> myVue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    number: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.number++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="mvvm实例"><a href="#mvvm实例" class="headerlink" title="mvvm实例"></a>mvvm实例</h3><p><code>myVue</code>构造函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line">myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$options = options</span><br><span class="line">  <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el) <span class="comment">// 根节点dom</span></span><br><span class="line">  <span class="keyword">this</span>.$data = options.data</span><br><span class="line">  <span class="keyword">this</span>.$methods = options.methods</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._binding = &#123;&#125; <span class="comment">// 绑定的订阅者</span></span><br><span class="line">  <span class="keyword">this</span>._observe(<span class="keyword">this</span>.$data) <span class="comment">// 监听属性</span></span><br><span class="line">  <span class="keyword">this</span>._compile(<span class="keyword">this</span>.$el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Observer-监听器"><a href="#Observer-监听器" class="headerlink" title="Observer 监听器"></a>Observer 监听器</h3><p>监听每个数据的变化，并且在监听到变化时通知订阅者。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">myVue.prototype._observe = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      value = obj[key]</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._observe(value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>._binding[key] = &#123;</span><br><span class="line">        _watchers: []</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> binding = <span class="keyword">this</span>._binding[key]</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        <span class="keyword">get</span>: function() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'获取属性'</span> + key + <span class="string">': '</span> + value)</span><br><span class="line">          <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'设置属性'</span> + key + <span class="string">': '</span> + newVal)</span><br><span class="line">          value = newVal</span><br><span class="line">          <span class="comment">// 通知该属性的所有订阅者更新数据</span></span><br><span class="line">          binding._watchers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">            item.update()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h3><p>用来绑定更新函数，实现对DOM元素的更新<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">el, vm, exp, attr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.el = el 　<span class="comment">// 指令对应的DOM元素</span></span><br><span class="line">  <span class="keyword">this</span>.vm = vm <span class="comment">// 指令所属的myVue实例</span></span><br><span class="line">  <span class="keyword">this</span>.exp = exp <span class="comment">// myVue实例更新的属性</span></span><br><span class="line">  <span class="keyword">this</span>.attr = attr <span class="comment">// DOM元素绑定的属性值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.update()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新视图</span></span><br><span class="line">Watcher.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Compile解析"><a href="#Compile解析" class="headerlink" title="Compile解析"></a><code>Compile</code>解析</h3><p>解析<code>v-bind</code>、<code>v-model</code>、<code>v-click</code>等指令，并对view与model进行绑定<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">myVue.prototype._compile = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nodes = app.children</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = nodes[i]</span><br><span class="line">    <span class="keyword">if</span> (node.children.length) &#123;</span><br><span class="line">      <span class="keyword">this</span>._compile(node)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// v-click</span></span><br><span class="line">    <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-click'</span>)) &#123;</span><br><span class="line">      <span class="keyword">var</span> methodName = node.getAttribute(<span class="string">'v-click'</span>)</span><br><span class="line">      node.onclick = _this.$methods[methodName].bind(_this.$data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// v-model</span></span><br><span class="line">    <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName === <span class="string">'INPUT'</span> || node.tagName === <span class="string">'TEXTAREA'</span>)) &#123;</span><br><span class="line">      <span class="keyword">var</span> dataName = node.getAttribute(<span class="string">'v-model'</span>)</span><br><span class="line">      <span class="comment">// 添加订阅者</span></span><br><span class="line">      _this._binding[dataName]._watchers.push(<span class="keyword">new</span> Watcher(node, _this, dataName, <span class="string">'value'</span>))</span><br><span class="line">      node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _this.$data[dataName] = <span class="keyword">this</span>.value <span class="comment">// 使data与dom的值保持一致</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// v-bind</span></span><br><span class="line">    <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-bind'</span>)) &#123;</span><br><span class="line">      <span class="keyword">var</span> dataName = node.getAttribute(<span class="string">'v-bind'</span>)</span><br><span class="line">      <span class="comment">// 添加订阅者</span></span><br><span class="line">      _this._binding[dataName]._watchers.push(<span class="keyword">new</span> Watcher(node, _this, dataName, <span class="string">'innerHTML'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/seminelee/mvvm-demo" target="_blank" rel="noopener">mvvm-demo</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/DMQ/mvvm" target="_blank" rel="noopener">剖析vue实现原理，自己动手实现mvvm</a></li>
<li><a href="https://mp.weixin.qq.com/s/MGsEGejaADVHGlZFYQgCnQ" target="_blank" rel="noopener">面试题：你能写一个 Vue 的双向数据绑定吗？</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《数据结构与算法JavaScript描述》算法部分学习心得]]></title>
      <url>http://seminelee.github.io/2018/07/18/algorithms/</url>
      <content type="html"><![CDATA[<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>最近读了《数据结构与算法JavaScript描述》，除去书中一些代码错误之外，是一本让我有所收获的书。这里会说一些书中提及的算法及一点自己的理解，希望以后能熟练运用这些算法解决更复杂的问题。<br><a id="more"></a></p>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序是处理大数据集最快的排序算法之一。很多编程语言的排序函数都用到了快速排序，比如Chrome 的 JavaScript 引擎V8的<code>Array.sort()</code>就使用快速排序和插入排序的结合。<br>快速排序的算法简单描述：</p>
<ol>
<li>先确定一个“支点”（pivot）</li>
<li>将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧</li>
<li>然后对左右两侧不断重复这个过程，直到所有排序完成。</li>
</ol>
<p>如下图的例子：<br><img src="/static/2018/07/quickSort-1.jpeg" alt="快速排序"><br>用递归的思想可以这样实现，时间复杂度O(nlog2n)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> pivot = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">const</span> left = []</span><br><span class="line">  <span class="keyword">const</span> right = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">      left.push(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt;= arr[pivot] &amp;&amp; i !== pivot) &#123;</span><br><span class="line">      right.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat(arr[pivot], quickSort(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">3</span>]</span><br><span class="line">quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p>但是，这个实现的方法声明了一些数组，空间复杂度较大，内存占用较多。<br>下面是更好的原地排序的实现方法。<br>先看动图<br><img src="/static/2018/07/quickSort-2.gif" alt="快速排序"><br>具体实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pivot = arr[left] <span class="comment">// 支点</span></span><br><span class="line">  <span class="keyword">let</span> p = left</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = left + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      swap(arr[++p], arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(pivot, arr[p])</span><br><span class="line">  <span class="keyword">return</span> p <span class="comment">// 返回支点所在位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left = <span class="number">0</span>, right = arr.length - <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = partition(arr, left, right)</span><br><span class="line">    quickSort(arr, left, p - <span class="number">1</span>)</span><br><span class="line">    quickSort(arr, p + <span class="number">1</span>, right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 交换函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = b</span><br><span class="line">  b = a</span><br><span class="line">  a = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="检索算法"><a href="#检索算法" class="headerlink" title="检索算法"></a>检索算法</h2><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><p>对于查找数据来说，顺序查找是最容易理解的方法，也属于暴力查找技巧的一种，适合于元素随机排列的数组。<br>具体实现如下，时间复杂度O(n)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seqSearch</span>(<span class="params">arr, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === data) &#123;</span><br><span class="line">      <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因为在执行查找时可能会访问到数据结构里的所有元素，这种查找方法效率较低，尤其是数据量较大的情况下。<br>有一种优化的方法是使用自组织数据。这种策略具体是：通过将频繁查找到的元素置于数据集的起始位置来最小化查找次数。我们可以在程序运行过程中由程序自动组织数据，如下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于未排序数组，使用自组织数据，并通过简单的顺序查找快速找到元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seqSearch</span>(<span class="params">arr, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        swap(arr[i], arr[i - <span class="number">1</span>]) <span class="comment">// 查找到的元素向前移动一位，逐渐将经常查找的元素移到最前</span></span><br><span class="line">        <span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h3><p>而对于有序的数据，二分查找算法比顺序查找算法更高效。<br>二分查找算法简单描述：</p>
<ol>
<li>将数组的第一个位置设置为下边界，最后一个元素设置为上边界</li>
<li>若下边界小于等于上边界则将中点(mid)设置为(上边界 + 下边界) / 2</li>
<li>如果mid小于查询值，则将下边界设置为 mid + 1，重复步骤2、3；如果mid大于查询值，则将上边界设置为mid - 1，重复步骤2、3；否则返回mid</li>
</ol>
<p>具体实现如下，时间复杂度O(log2n)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binSearch</span>(<span class="params">arr, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> upperBound = arr.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> lowerBound = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(lowerBound &lt;= upperBound) &#123;</span><br><span class="line">    <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor((lowerCound + upperBound) / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (data &gt; arr[mid]) &#123;</span><br><span class="line">      lowerBound = mid + <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; arr[mid]) &#123;</span><br><span class="line">      upperBound = mid - <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对于查找频繁的无序数据集，可以先进行一次快速排序然后实现二分查找算法。</p>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>我们经常会遇到要对数组去重的情况。最容易理解的实现是遍历数组，进行顺序查找。具体实现如下，时间复杂度O(n^2)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> uqArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (uqArr.indexOf(arr[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">      uqArr.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uqArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>时间复杂度更低的实现方式是利用散列表结构，但空间复杂度较高，用空间换时间。具体实现如下，时间复杂度O(n)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueHash</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> uqArr = []</span><br><span class="line">  <span class="keyword">let</span> item</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    item = arr[i]</span><br><span class="line">    <span class="keyword">if</span>(!hash[item]) &#123;</span><br><span class="line">      hash[item] = <span class="literal">true</span></span><br><span class="line">      uqArr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uqArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面的基础上，用开链法区分数据类型，解决如果数组的某元素是<code>__proto__</code>和碰撞的问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueHash2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hash = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">let</span> uqArr = []</span><br><span class="line">  <span class="keyword">let</span> item</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    item = arr[i]</span><br><span class="line">    <span class="keyword">if</span>(!hash[item][<span class="keyword">typeof</span> item]) &#123;</span><br><span class="line">      hash[item][<span class="keyword">typeof</span> item] = <span class="literal">true</span></span><br><span class="line">      uqArr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uqArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="高级算法"><a href="#高级算法" class="headerlink" title="高级算法"></a>高级算法</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>我们可以通过与递归比较来理解动态规划：</p>
<ul>
<li>递归：从顶部开始将问题分解，通过解决掉所有分解出小问题的方式，来解决整个问题</li>
<li>动态规划：从底部开始解决问题，将所有小问题解决掉，然后合并成一个整体解决方案，从而解决掉整个大问题</li>
</ul>
<p>下面看一个简单的例子：<br>要实现斐波那契数列(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55…)的计算，用递归的思想可以这样实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recurFib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> recurFib(n - <span class="number">1</span>) + recurFib(n - <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是较容易理解的一种实现方式。但是，我们会发现，太多值在递归调用中被重新计算，当要计算的n较大时，执行效率很低。<br>这时，我们可以发现这个“大问题”是可以通过解决若干个“小问题”来解决的。而解决“小问题”有一个固定的公式，就是：<code>Fib(n) = Fib(n - 1) + Fib(n - 2)</code>。从而想到，用动态规划来实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynFib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fib = n &lt; <span class="number">2</span> ? n : <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>)</span><br><span class="line">    val[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    val[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      val[i] = val[i - <span class="number">1</span>] + val[i - <span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val[n]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种实现方式用数组保存了中间结果，效率更高。<br>以后遇到能用递归解决的问题，如果有子问题结构，可以考虑尝试用动态规划解决。</p>
<h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>贪心算法的策略是：总是会选择当下的最优解，而不去考虑这一次的选择会不会对未来的选择造成影响。通过做出一系列的局部“最优”选择，有可能带来最终的整体“最优”选择，也有可能是“次优”选择。<br>下面是商店找零的例子，最优解是令使用的硬币数最少。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeChange</span>(<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> coins = []</span><br><span class="line">  <span class="keyword">if</span> (money % <span class="number">.25</span> &lt; money) &#123;</span><br><span class="line">    coins[<span class="number">3</span>] = <span class="built_in">parseInt</span>(money / <span class="number">.25</span>)</span><br><span class="line">    money = money % <span class="number">.25</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (money % <span class="number">.1</span> &lt; money) &#123;</span><br><span class="line">    coins[<span class="number">2</span>] = <span class="built_in">parseInt</span>(money / <span class="number">.1</span>)</span><br><span class="line">    money = money % <span class="number">.1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (money % <span class="number">.05</span> &lt; money) &#123;</span><br><span class="line">    coins[<span class="number">1</span>] = <span class="built_in">parseInt</span>(money / <span class="number">.05</span>)</span><br><span class="line">    money = money % <span class="number">.05</span></span><br><span class="line">  &#125;</span><br><span class="line">  coins[<span class="number">0</span>] = <span class="built_in">parseInt</span>(money / <span class="number">.01</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(coins[<span class="number">0</span>] + <span class="string">'个1美分'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(coins[<span class="number">1</span>] + <span class="string">'个5美分'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(coins[<span class="number">2</span>] + <span class="string">'个10美分'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(coins[<span class="number">3</span>] + <span class="string">'个25美分'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这种情况下，这种方案总是能找到最优解。但如果硬币的面额改为：.25, .6, .5, .4, .1。当遇到1时，按照贪心算法将分解为<code>.6 + .4 * 1</code>，而最优解应该是<code>.5 * 2</code>。<br>这里只举出几个简单的例子，关于动态规划和贪心算法还有更多的应用场景，这里不一一叙述了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>《数据结构与算法JavaScript描述》</li>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/52" target="_blank" rel="noopener">JavaScript专题之解读 v8 排序源码</a></li>
<li>v8 array源码 (<a href="https://github.com/v8/v8/blob/master/src/js/array.js" target="_blank" rel="noopener">https://github.com/v8/v8/blob/master/src/js/array.js</a>)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序学习笔记之代码构成与框架结构]]></title>
      <url>http://seminelee.github.io/2018/05/24/applet-1/</url>
      <content type="html"><![CDATA[<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>小程序的项目代码文件大致分为JSON配置文件、WXML模板文件、WXSS样式文件、JS脚本逻辑文件。<br>小程序的框架MINA的核心是一个响应的数据绑定系统，也体现了MVVM的开发模式。小程序并不是“正宗”的MVVM，它是单向绑定的。<br><a id="more"></a></p>
<h2 id="代码构成"><a href="#代码构成" class="headerlink" title="代码构成"></a>代码构成</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>官方提供的quickstart例子的项目目录如下<br>wx_quickstart<br>├── app.js<br>├── app.json<br>├── app.wxss<br>├── pages<br>│   ├── index<br>│   │   ├── index.js<br>│   │   ├── index.wxml<br>│   │   └── index.wxss<br>│   └── logs<br>│       ├── logs.js<br>│       ├── logs.json<br>│       ├── logs.wxml<br>│       └── logs.wxss<br>├── project.config.json<br>└── utils<br>    └── util.js<br>可以看到，文件大致分为这4种</p>
<ol>
<li>.json 后缀的 JSON 配置文件</li>
<li>.wxml 后缀的 WXML 模板文件</li>
<li>.wxss 后缀的 WXSS 样式文件</li>
<li>.js 后缀的 JS 脚本逻辑文件</li>
</ol>
<h3 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h3><p>以下是一个包含了所有配置选项的app.json。<br>配置了页面文件的路径、窗口表现、设置网络超时时间、设置多tab等。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/index"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>: &#123;</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"Demo"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="attr">"list"</span>: [&#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"首页"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"日志"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"networkTimeout"</span>: &#123;</span><br><span class="line">    <span class="attr">"request"</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">"downloadFile"</span>: <span class="number">10000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"debug"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><p>wxml (WeiXin Markup Language)是框架设计的一套标签语言，结合基础组件、事件系统，可以构建出页面的结构。它的作用和<code>html</code>一样，都是负责页面的结构。<br>基础组件包括：视图容器、基础内容、表单组件、导航、媒体组件、地图、画布、开放能力等。详细可以看官方文档的<a href="https://developers.weixin.qq.com/miniprogram/dev/component/" target="_blank" rel="noopener">组件</a>介绍。<br>wxml的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/" target="_blank" rel="noopener">能力</a>主要有以下几点：</p>
<ol>
<li>数据绑定<br>使用 Mustache 语法（双大括号）将变量包起来，可以在双大括号内进行简单的运算，如三元运算等</li>
<li>列表渲染<br>在组件上使用<code>wx:for</code>控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。</li>
<li>条件渲染<br>在框架中，使用<code>wx:if</code>来判断是否需要渲染该代码块</li>
<li>模板<br>wxml提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。</li>
<li>事件<br>wxml的冒泡事件有：<code>touchstart</code>、<code>tap</code> 、<code>longpress</code>、<code>transitionend</code>、<code>touchforcechange</code>等，触摸类事件支持捕获阶段。<br>可以在组件中绑定一个事件处理函数，事件绑定的写法以 key、value 的形式。key是<code>bind</code>则是普通的事件绑定，如<code>bindtap</code>或<code>bind:tap</code>；<code>catch</code>事件绑定可以阻止冒泡事件向上冒泡；<code>capture-bind</code>在捕获阶段监听事件；<code>capture-catch</code>则中断捕获阶段和取消冒泡阶段。</li>
</ol>
<h3 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h3><p>wxss (WeiXin Style Sheets)是一套样式语言，用于描述<code>WXML</code>的组件样式。它的作用和<code>css</code>一样，都是负责页面的样式。<br>与<code>css</code>相比，wxss的特性有</p>
<ol>
<li><p>尺寸单位<br>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx (iphone6) 。即，以750rpx为基准，对于不同大小的屏幕放大或缩小。因此，设计师可以用 iPhone6 作为视觉稿的标准。<br><img src="/static/2018/05/applet-wxss.jpeg" alt="rpx"></p>
</li>
<li><p>样式导入<br>使用@import语句可以导入外联样式表。</p>
</li>
<li>选择器<br>比起<code>css</code>，只支持部分选择器，包括<code>.class</code>、<code>#id</code>、<code>element</code>、<code>element, element</code>、<code>::after</code>、<code>::before</code></li>
<li>全局样式与局部样式<br>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</li>
<li>本地资源无法通过 css 获取<br>因此，在设置<code>background-image</code>属性时，可以使用网络图片，或者 base64，或者使用<image>标签代替；在设置<code>@font-face</code>的<code>src</code>属性时，需要把字体文件转换成base64，可以到<a href="https://transfonter.org/" target="_blank" rel="noopener">https://transfonter.org/</a>转换。</image></li>
</ol>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>需要注意的一点是：小程序的js运行环境是JsCore，不是浏览器，不能使用window与document对象。<br><code>zepto</code>/<code>jquery</code>会使用到window对象和document对象，所以也无法使用。</p>
<blockquote>
<p>JsCore（JavaScriptCore）<br>对JS进行解析和提供执行环境。iOS7后苹果推出，极大地方便了我们对js的操作。我们可以脱离webview直接运行我们的js。JSCore 只是实现了标准 JavaScript 语言，所以也自然就没有浏览器对象（BOM）等。微信小程序框架的native端与js端通过JsCore来相互通信。</p>
</blockquote>
<h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><h3 id="MINA"><a href="#MINA" class="headerlink" title="MINA"></a>MINA</h3><p>小程序的框架MINA的核心是一个响应的数据绑定系统，也体现了MVVM的开发模式(例如 React, Vue)的思想。<br>下面就是MVVM的框架结构<br><img src="/static/2018/05/applet-mvvm.jpeg" alt="mvvm"></p>
<ul>
<li>View：视图</li>
<li>ViewModel：与视图数据绑定；获取Model的变更，在必要时更新View</li>
<li>Model：数据（与后端的沟通、AJAX请求以及对数据的处理）</li>
</ul>
<p>小程序的框架结构如下：<br><img src="/static/2018/05/applet-structure.jpeg" alt="structure"><br>渲染的过程是这样的：</p>
<ol>
<li>提供了JavsScript运行环境（JsCore），由JavaScript编写的业务代码完成逻辑层的处理</li>
<li>通过数据传输接口（注册Page时的data属性及后续的setData方法调用）将逻辑层的数据传输给视图层。</li>
<li>视图层由WXML语言编写的模板通过“数据绑定”与逻辑层传输过来的数据merge成展现结果并展现</li>
<li>视图的样式控制由WXSS语言编写的样式规则进行配置</li>
</ol>
<h3 id="与Vue的区别"><a href="#与Vue的区别" class="headerlink" title="与Vue的区别"></a>与Vue的区别</h3><p>最大的区别就是，小程序并不是“正宗”的MVVM。在数据绑定上，它是单向绑定的。而vue是双向的。<br>如要实现一个提供一个输入框，并且把用户的输入同步显示到视图，如下图<br><img src="/static/2018/05/applet-vue.jpeg" alt="vue"><br>在vue中是这样实现的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在小程序中是这样实现的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>你输入的是：&#123;&#123;inputValue&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span>  <span class="attr">bindinput</span>=<span class="string">"bindKeyInput"</span> <span class="attr">placeholder</span>=<span class="string">"输入同步到view中"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    inputValue: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  bindKeyInput: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      inputValue: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>因为，微信小程序的JS逻辑层与视图层分散在两个不同的上下文环境中（JS逻辑跑在JsCore中，视图层的渲染包括模板渲染、样式应用、事件派发却都在native环境中）。所以数据对象(view-model)在两层间没有共享，并且同步通信的成本太高。<br>因此，微信小程序在初始化之后，再对原来的数据对象进行任何更改，都始终不会生效，需要调用<code>setData</code>。以及，在事件冒泡的阻止上，微信小程序在监听时即决定是否阻止事件冒泡。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/" target="_blank" rel="noopener">微信公众平台－小程序</a></li>
<li><a href="https://www.zhihu.com/question/50920642?sort=created" target="_blank" rel="noopener">微信小程序底层的实现原理是怎样的？</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> hybrid app </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web安全中常见攻击及防御小总结]]></title>
      <url>http://seminelee.github.io/2018/03/19/security/</url>
      <content type="html"><![CDATA[<p>最近在看一本很经典的书《白帽子讲Web安全》（安利，道哥写得很有趣），再联想起平时工作中的一些Web安全的措施，决定记录、总结一下。</p>
<a id="more"></a>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h3 id="什么是XSS"><a href="#什么是XSS" class="headerlink" title="什么是XSS"></a>什么是XSS</h3><p>XSS（Cross Site Scripting），全称跨站脚本攻击，即一种允许恶意web用户将代码植入到网站页面中的漏洞，是代码注入的一种。<br>它一般分为这几种类型：</p>
<ul>
<li>反射型XSS：被动的，非持久性的。黑客通常需要诱骗用户点击一个恶意链接，以达到攻击目的。url还可以通过短网址服务将之缩短，从而隐藏自己。</li>
<li>存储型/持久型XSS：主动的，持久的。黑客通常是在自己的网站中写一个包含恶意代码的网页（比如博客）。所有访问这个网页的用户都会在他们的浏览器中执行这段代码，由此黑客达到攻击目的。</li>
<li>DOM Bases XSS：通过修改页面的DOM节点形成的XSS</li>
</ul>
<h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ol>
<li><p>httponly<br>httponly是http返回头中set-cookie字段的一个属性。设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由<code>document.cookie</code>、<code>XMLHttpRequest</code>和Request APIs进行访问，以防范XSS后的Cookie挟持攻击。下面是一个例子：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   header(<span class="string">'set-cookie: USER=123;PW=123456;HttpOnly'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>返回头将包括：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: USER=123;PW=123456;HttpOnly</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入检查<br>对输入进行格式检查，即’XSS Filter’。php有一些内置过滤函数<code>htmlentities</code>，<code>htmlspecialchars</code>，<code>strip_tags</code>等。但这些函数不一定能过滤完整。这时候可以通过正则匹配（类似“白名单”的做法），检查请求中的参数。nodejs方面，网上有很多开源的检查格式的实现，如<a href="https://www.npmjs.com/package/better-validator" target="_blank" rel="noopener">better-validate</a>。</p>
</li>
<li>输出检查<br>对于在HTML中输出，在PHP中，可以使用<code>htmlentities</code>或<code>htmlspecialchars</code>转换所有html标签或格式化特殊符号（&amp;、’、”、&lt;、&gt;）；对于在Javascript中输出，进行JavaScript编码（使用’\’对特殊字符进行转义，除数字字母之外，小于127的字符编码使用16进制’\xHH’的方式进行编码，大于用unicode）；对于在CSS中输出，进行CSS编码（类似JavaScript编码）；对于在地址中输出，在js中，可以使用encodeURI()函数。</li>
</ol>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="什么是CSRF"><a href="#什么是CSRF" class="headerlink" title="什么是CSRF"></a>什么是CSRF</h3><p>CSRF（Cross Site Request Forgery），跨站点请求伪造。举一个例子：攻击者诱使用户访问一个页面，以该用户身份在第三方站点里执行操作，比如删除某博客的文章。</p>
<blockquote>
<p>CSRF和XSS的区别<br>XSS：用户过分信任网站，放任网站代码执行，使恶意脚本将代码植入到网站页面中（着重于脚本）<br>CSRF：网站过分信任用户，放任伪造的合法用户的请求执行网站的某些功能（着重于伪造）</p>
</blockquote>
<h3 id="CSRF进阶"><a href="#CSRF进阶" class="headerlink" title="CSRF进阶"></a>CSRF进阶</h3><ol>
<li>浏览器的cookie策略：<br>浏览器的cookie分为两种：一种是session cookie，没有指定expire，保存在浏览器进程的内存空间中，浏览器关闭后就会失效；另一种是third-party cookie（本地cookie），保存在本地，只有到了指定的expire时间后cookie才会失效。<br>在<code>&lt;img&gt;</code>、<code>&lt;frame&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;link&gt;</code>等标签中，session cookie会被发送，而third-party cookie则视浏览器策略而定。有些浏览器默认禁止了发送third-party cookie，而有些则不会拦截，容易被CSRF攻击者利用。不会拦截的浏览器有：Firefox3、Opera、Google Chrome、Android等。</li>
<li>P3P头的副作用<br>P3P Header（The Platform for Privacy Preferences）是W3C指定的一项标准。如果网站返回给浏览器的HTTP头中含有P3P头，则允许浏览器发送第三方cookie，即使是上面提及的禁止在<code>&lt;frame&gt;</code>、<code>&lt;script&gt;</code>等中发送第三方cookie的浏览器如IE等。</li>
</ol>
<h3 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h3><ol>
<li><p>referer<br>referer是http请求头的一个字段，用于告诉服务器请求是从哪个页面链接过来的。可以通过判断referer字段而防范XSS。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$refererUrl = parse_url($_SERVER[<span class="string">'HTTP_REFERER'</span>]);</span><br><span class="line">$host = $refererUrl[<span class="string">'host'</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_REFERER'</span>]) || $referurl[<span class="string">'host'</span>] !== <span class="string">'www.example.com'</span>) &#123;</span><br><span class="line">   <span class="keyword">exit</span>(<span class="string">'非本站请求!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而，referer的值是由浏览器提供的。某些浏览器，如IE6、FireFox2，目前有漏洞被黑客利用篡改referer值。可见，这种方法并非万无一失。而且，服务器并非什么时候都能拿到referer。用户可以限制referer的发送，浏览器在某些情况（https跳转到http）也不会发送referer。<br>并且，我们知道，服务器端脚本可以轻易伪造referer，这种防范方法显然不够。我们可以通过验证码进行验证，也可以在客户端通过<code>document.referer</code>更准确地判断网页的真实来路。</p>
</li>
<li>在请求地址中添加token并验证<br>在客户端，对于get请求，就把token作为url一个参数，如<code>http://url?csrftoken=tokenvalue</code>；对于post请求，则在页面表单中加入<code>&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;</code>。在服务端，拦截验证这个token，拒绝没有token或者token不正确的请求。如token可以在用户登录后产生并放在session，每次请求时把请求中的token和session里的token比对。或者用加密算法生成token，再在服务端中验证其合法性。<br>但这种方法需在每个请求中都加入token，比较麻烦，而且容易暴露。黑客可以从请求中（或者通过referer）获取token然后发动CSRF攻击。为了避免这一点，还需在添加token的时候增加一个判断：如果是链接到本站才加上token。</li>
<li><p>在http头中自定义属性并验证<br>这种方法也是使用token进行验证，不同的是，这种方法通过XMLHttpRequest这个类把token放进http头中自定义的csrftoken这个属性里。这样通过XMLHttpRequest请求的地址就不会被记录到浏览器的地址栏，也不用担心token会透过referer泄漏到其他网站中去。这种方法的局限性是通常只用于Ajax方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://example.com'</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'token'</span>, <span class="string">'XXXXXXXXXX'</span>)</span><br><span class="line"><span class="comment">// 其他设置</span></span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自定义一些header属性进行跨域请求时，可能会遇到”not allowed by Access-Control-Allow-Headers in preflight response”，你可能需要在你的服务端设置”Access-Control-Allow-Headers”。</p>
</blockquote>
</li>
<li>验证码<br>验证码强制用户必须与应用进行交互，通常能很好地遏制CSRF攻击。如php的写法：前端页面将随机生成的验证码存在<code>$_SESSION[&#39;authcode&#39;]</code>中，后端对比<code>$_SESSION[&#39;authcode&#39;]</code>和<code>$_POST[&#39;authcode&#39;]</code>。这种方法的局限性在于加重了用户操作的繁琐性。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>《白帽子讲Web安全》</li>
<li><a href="https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/" target="_blank" rel="noopener">CSRF 攻击的应对之道</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《Web性能权威指南》之读书笔记]]></title>
      <url>http://seminelee.github.io/2018/01/14/http/</url>
      <content type="html"><![CDATA[<h2 id="TCP的构成"><a href="#TCP的构成" class="headerlink" title="TCP的构成"></a>TCP的构成</h2><p>因特网有两个核心协议：IP和TCP。IP(Internet Protocol，因特网协议)，负责联网主机之间的路由选择和寻址；TCP(Transmission Control Protocol，传输控制协议)，负责在不可靠的传输信道之上提供可靠的抽象层。它向应用层隐藏了大多数网络通信的复杂细节，如丢包重发、按序发送、拥塞控制及避免、数据完整等。<br><a id="more"></a></p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>握手机制：每次传输应用数据之前，都必须经历一次完整的往返（三次握手）</li>
<li>拥塞崩溃：在复杂网络中，IP网关容易受到拥塞崩溃。可能是往返时间超过了所有主机的最大中断间隔，主机会把每个分组都发送好几次。相应的主机会在网络中制造越来越多的数据报副本，使得网络陷入瘫痪。最终，所有交换节点的缓冲区都将被填满，多出来的分组必须删掉。</li>
<li>流量控制：在三次握手后，TCP连接的每一方都要通告自己的接收窗口大小(rwnd)，其中包含能够保存数据的缓冲区空间大小信息。</li>
<li>慢启动：为了预防任何一端向潜在网络过多发送数据，TCP连接传输的最大数据量取rwnd和cwnd(拥塞窗口大小)中的最小值。当TCP开始在一个网络中传输数据或发现数据丢失并开始重发时，首先慢慢的对网路实际容量进行试探，避免由于发送了过量的数据而导致阻塞。主机发送了一个报文后就要停下来等待应答，每收到一个应答，拥塞窗口就增加一段长度，直至等于设定的阈值。</li>
</ul>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li>增大TCP的初始拥塞窗口：这使TCP在第一次往返就传输较多数据，随后的速度提升也很明显。</li>
<li>慢启动重启：在连接空闲时禁用慢启动可以改善瞬时发送数据的长TCP连接的性能</li>
<li>启用窗口缩放：这能增大最大接受窗口大小，让高延迟的连接达到更好的吞吐量</li>
<li>TCP快速打开：允许在第一个SYN分组（第一次握手）中发送应用程序数据</li>
</ul>
<h2 id="传输层安全-TLS"><a href="#传输层安全-TLS" class="headerlink" title="传输层安全(TLS)"></a>传输层安全(TLS)</h2><p>SSL(Secure Sockets Layer，安全套接字层)3.0升级版即TLS(Transport Layer Security，传输层安全)1.0。TLS位于TCP（传输层）上一层（会话层）。它不会影响上层（应用层）协议，但能够保证上层协议的网络通信安全。</p>
<h3 id="加密、身份验证与完整性"><a href="#加密、身份验证与完整性" class="headerlink" title="加密、身份验证与完整性"></a>加密、身份验证与完整性</h3><ul>
<li>加密：混淆数据的机制。TLS规定的握手机制使用非对称密钥加密。详细过程在T下面一节提及。</li>
<li>身份验证：验证身份标识有效性的机制。允许通信两端互相验明正身。这个验证首先建立“认证机构信任链”。</li>
<li>完整性：检测消息是否被篡改或伪造的机制。使用MAC(Message Authentication Code，消息认证码)签注每一条消息。只要发送TLS记录，就会生成一个MAC值并附加到该消息中，接收端通过计算和验证这个MAC值来判断消息的完整性和可靠性。</li>
</ul>
<h3 id="TLS握手"><a href="#TLS握手" class="headerlink" title="TLS握手"></a>TLS握手</h3><ol>
<li>TLS握手在可靠的传输层(TCP)上运行，即首先要完成TCP的“三次握手”。</li>
<li>TCP连接建立后，客户端以纯文本形式发送一些规格说明，包括TLS协议的版本、支持的加密套件等。</li>
<li>服务端根据客户端的规格说明，并附上自己的证书，将响应发送给客户端。也可以发送一个请求，要求客户端提供证书等。</li>
<li>假设两端确定了共同的版本和加密套件，客户端也把自己的证书提供给服务器。然后，客户端会生成一个新的对称密钥，用服务端的公钥加密，加密后发送给服务器。</li>
<li>服务器用自己的私钥解密出客户端发来的对称密钥，通过验证消息的MAC检测消息完整性，再返回客户端一个加密的“finished”消息。</li>
<li>客户端用它之前生成的对称密钥解密这条消息，验证MAC，如果一切顺利，则建立信道并开始发送应用数据。</li>
</ol>
<h3 id="信任链与证书颁发机构"><a href="#信任链与证书颁发机构" class="headerlink" title="信任链与证书颁发机构"></a>信任链与证书颁发机构</h3><p>如何验证通信两端的身份？最常见的方案是通过CA(Certificate Authorrity，证书颁发机构)验证。<br>CA是证书拥有者和依赖证书的一方共同信任的第三方。浏览器指定可信任的CA，然后CA会审计和验证站点的证书有没有被滥用或冒充，或者需不需要撤销该站点的证书</p>
<h2 id="Web性能要点"><a href="#Web性能要点" class="headerlink" title="Web性能要点"></a>Web性能要点</h2><p>限制Web性能的主要因素是客户端与服务器之间的网络往返延迟。这正是TCP握手机制、流量和拥塞控制、由丢包导致的队首拥塞等底层协议特点影响性能的直接后果。</p>
<h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>大多数浏览器替我们自动完成了这些优化：</p>
<ul>
<li>资源预取和排定优先次序</li>
<li>DNS预解析：通过学习导航历史、用户鼠标悬停等</li>
<li>TCP预连接</li>
<li>页面预渲染：在隐藏的标签页中预先渲染整个页面</li>
</ul>
<p>对开发者的优化建议：</p>
<ul>
<li>优化页面结构：CSS和JS等重要资源应该尽早在文档中出现；应该尽早交付CSS，从而解除阻塞并让JS执行等</li>
<li>在文档中嵌入提示，以触发浏览器的优化机制：如<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 预解析域名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//xxx.com"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 预取得关键性资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"subresource"</span> <span class="attr">href</span>=<span class="string">"/xxx.js"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 预取得导航要用的资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"/xxx.jpeg"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 预渲染特定页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"//xxx/xxx.html"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="HTTP1-X"><a href="#HTTP1-X" class="headerlink" title="HTTP1.X"></a>HTTP1.X</h2><h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p>HTTP1.1 的一个主要改进就是引入了持久HTTP连接。<br>一个新TCP连接发送的HTTP请求所花的总时间，最少等于两次网络往返的时间：一次用于握手，一次用于请求和响应。而添加对HTTP持久连接的支持，重用底层的连接，就可以避免第二次TCP连接时的三次握手，消除另一次TCP慢启动的往返，节约整整一次网络延迟。因此：</p>
<ul>
<li>没有持久连接：每次请求都会导致两次往返延迟</li>
<li>有持久连接：只有第一次请求会导致两次往返延迟，后续请求只会导致一次往返延迟</li>
</ul>
<h3 id="HTTP管道"><a href="#HTTP管道" class="headerlink" title="HTTP管道"></a>HTTP管道</h3><p>持久连接可以让我们重用已有的连接来完成多次应用请求，这多次请求必须严格满足先进先出(FIFO)的队列顺序。而HTTP管道则可以让我们把FIFO队列从客户端（请求队列）迁移到服务器（响应队列）。</p>
<ul>
<li>没有HTTP管道：客户端发起请求，服务器处理请求，然后响应回传，然后客户端再发起请求，服务器再处理请求</li>
<li>HTTP管道：服务器并行处理请求，消除了发送请求和响应的等待时间，然后串行地返回响应。</li>
</ul>
<p>因为协议的局限性，不能实现多路复用（一个连接上的多个响应数据交错到达），只能串行地返回响应。因此有可能导致以下问题：</p>
<ul>
<li>队首阻塞：如客户端同时发送两个请求（先HTML后CSS），而且CSS资源先准备就绪，服务器也会先发送HTML响应，然后再交付CSS</li>
<li>一个慢响应就会阻塞所有后续请求</li>
<li>响应失败可能终止TCP连接，从而强迫客户端重新发送对所有后续资源的请求，导致重复处理<br>等等</li>
</ul>
<h3 id="使用多个TCP连接"><a href="#使用多个TCP连接" class="headerlink" title="使用多个TCP连接"></a>使用多个TCP连接</h3><p>由于协议不支持多路复用，一个接一个地发送请求实在太慢，浏览器开发商允许我们并行打开多个TCP连接。大多数浏览器支持主机打开6个连接。</p>
<h3 id="域名分区"><a href="#域名分区" class="headerlink" title="域名分区"></a>域名分区</h3><p>对于包含多资源的页面，6个并行的连接可能仍然不够用。因此，我们可以不只通过一个主机提供所有资源，而是手工将所有资源分散到多个子域名，从而突破浏览器的连接限制，实现更高的并行能力。<br>然而，这样做的缺点是：每个新主机名都要求有一次额外的DNS查询，每多一个套接字都会多消耗两端的资源；需要手工分离资源，并托管到多个主机</p>
<h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h3><ul>
<li>度量和控制协议开销：服务器和客户端可以扩展首部，且协议没有对首部大小作限制。因此，应减少要传输到首部数据（高度重复且未压缩）</li>
<li>连接与拼合：把多个js文件（或其他资源）组合为一个文件；把多张图片组合为一个更大的复合图片（图片精灵）。这种做法的缺点：降低了初始启动的速度、更新资源的速度、内存占用的问题。解决：首次绘制的CSS单独出来、递增地交付较小的js块等</li>
<li>嵌入资源：体积小、只用一次的资源可以直接嵌入页面中。如script和style块、数据URI(base64)等。</li>
</ul>
<h2 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h2><p>HTTP2.0的目的就是通过支持请求与响应的多路复用来减少延迟，通过压缩HTTP首部字段将协议开销降至最低，同时增加对请求优先级和服务器端推送的支持。</p>
<h3 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h3><p>HTTP2.0性能增强的核心，全在于新增的二进制分帧层（headers帧和data帧），它定义了如何封装HTTP消息并在客户端与服务器之间传输。<br>HTTP2.0把HTTP协议通信的基本单位缩小为一个一个的帧，这些帧对应着逻辑流中的消息。相应地，很多流可以并行地在同一个TCP连接上交换消息。</p>
<h3 id="多向请求与响应"><a href="#多向请求与响应" class="headerlink" title="多向请求与响应"></a>多向请求与响应</h3><p>如2.3所说，在HTTP1.x中，如果客户端想发送多个并行的请求以及改进性能，那么必须使用多个TCP连接。这是因为HTTP1.x的交付模型保证每个连接每次只交付一个响应（不支持多路复用），这也导致了队首阻塞，降低TCP连接的效率。<br>HTTP2.0的二进制分帧层则突破了这些限制，实现了多向请求和响应：客户端和服务器可以把HTTP消息分解为互不依赖的帧，然后乱序发送，最后再在另一端把它们重新组合起来。这实现了只使用一个连接即可并行交错地发送多个请求或响应，且请求/响应之间互不影响，消除了不必要的延迟，减少页面加载的时间。</p>
<h3 id="请求优先级"><a href="#请求优先级" class="headerlink" title="请求优先级"></a>请求优先级</h3><p>每个流都可以带有一个31比特的优先值。HTTP2.0通过优化这些帧的交错和传输顺序，进一步提升性能。</p>
<ul>
<li>0表示最高优先级</li>
<li>2^31 - 1 表示最低优先级<br>浏览器会基于资源的类型以及它在页面中的位置排定请求的优先次序，甚至通过之前的访问来学习优先级模式。<h3 id="其他优化-1"><a href="#其他优化-1" class="headerlink" title="其他优化"></a>其他优化</h3></li>
<li>每个来源一个连接：不再像HTTP1.x一样依赖多个TCP连接，客户端与服务器之间只需要一个连接即可</li>
<li>流量控制：在同一个TCP连接上传输多个数据流，就意味着要共享带宽。流量控制基于每一跳、窗口更新帧等进行</li>
<li>服务器推送：服务器可以对一个客户端请求发送多个响应。即对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。</li>
<li>首部压缩：压缩首部元数据，使用“首部表”来跟踪和存储之前发送的键－值对。这个首部表在连接存续期内始终存在并由客户端和服务器共同更新。这样，第二个（及之后）请求只需要发送变化了的部分首部，几乎不会改变的通用键－值对只需发送一次。</li>
</ul>
<h2 id="经典的性能优化最佳实践"><a href="#经典的性能优化最佳实践" class="headerlink" title="经典的性能优化最佳实践"></a>经典的性能优化最佳实践</h2><p>传输层/网络层方面</p>
<ul>
<li>减少DNS查找</li>
<li>重用TCP连接，尽可能使用持久连接，消除TCP握手和慢启动延迟</li>
<li>减少HTTP重定向，特别是不同域名之间的重定向</li>
<li>使用CDN（内容分发网络）把数据放到离用户地理位置更近的地方</li>
<li>去掉不必要的资源</li>
</ul>
<p>应用层(HTTP)方面</p>
<ul>
<li>在客户端缓存资源(cache)</li>
<li>传输压缩过的内容</li>
<li>消除不必要的请求开销，减少请求的首部数据</li>
<li>并行处理请求和响应，HTTP2.0的优化</li>
<li>针对协议版本采取优化措施</li>
</ul>
<h2 id="浏览器API与协议"><a href="#浏览器API与协议" class="headerlink" title="浏览器API与协议"></a>浏览器API与协议</h2><p>前面讨论过TCP、HTTP的性能特点，现在理解如何最恰当地利用浏览器的网络PI、协议和服务，给应用带来性能提升。</p>
<h3 id="浏览器网络概述"><a href="#浏览器网络概述" class="headerlink" title="浏览器网络概述"></a>浏览器网络概述</h3><ul>
<li>自动化的套接字池管理</li>
<li>网络安全与沙箱：管理所有打开的套接字池并强制施加连接数限制；格式化所有请求，自动完成响应解码；执行TLS握手和必要的证书检查；同源策略。</li>
<li>资源与客户端状态缓存</li>
<li>应用PI与协议：XMLHttpRequest、Sever-Sent-Event、WebSocket等</li>
</ul>
<h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p>XMLHttpRequest(XHR)是浏览器提供的应用API，让开发人员能通过JavaScript实现数据传输，实现浏览器的异步通信。</p>
]]></content>
      
        <categories>
            
            <category> 网络知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa学习笔记]]></title>
      <url>http://seminelee.github.io/2018/01/07/koa/</url>
      <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><a href="http://koajs.com/" target="_blank" rel="noopener">Koa</a>是一种Web框架。<br>由Express原班人马打造的koa，致力于成为一个更小、更健壮、更富有表现力的Web框架。使用koa编写web应用，通过组合不同的generator，可以免除重复繁琐的回调函数嵌套，并极大地提升常用错误处理效率。Koa没有捆绑任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>
<blockquote>
<p>Koa is a new web framework designed by the team behind Express, which aims to be a smaller, more expressive, and more robust foundation for web applications and APIs. Through leveraging generators Koa allows you to ditch callbacks and greatly increase error-handling. Koa does not bundle any middleware within core, and provides an elegant suite of methods that make writing servers fast and enjoyable.</p>
</blockquote>
<a id="more"></a>
<p>Koa需要node 7.6.0以上的版本，以支持ES6和<code>async</code>方法。</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>下面是官网的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="Koa应用程序"><a href="#Koa应用程序" class="headerlink" title="Koa应用程序"></a>Koa应用程序</h2><p>在执行<code>new Koa()</code>时创建的对象被称为Koa应用对象。<br>应用对象是带有node http服务的Koa接口。它可以处理中间件的注册，将http请求分发到中间件，进行默认错误处理，以及应对上下文，请求和响应对象进行配置。<br>上面的代码架设了一个http服务，监听3000端口。</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>Koa 是一个中间件框架，可以采用两种不同的方法来实现中间件：</p>
<ul>
<li>async function</li>
<li>common function</li>
</ul>
<p>上面的代码用的是async function(node v7.6+)。<br>中间件通常带有两个参数(ctx, next)，ctx是一个请求的上下文(context)，next是调用执行下游中间件的函数，在代码执行完成后通过<code>then</code>方法返回一个<code>Promise</code>。</p>
<h3 id="级联代码"><a href="#级联代码" class="headerlink" title="级联代码"></a>级联代码</h3><p>Koa 中间件以一种非常传统的方式级联起来，如下面的例子，代码执行的顺序如注释。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// (1) 进入路由</span></span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="comment">// (5) 再次进入 x-response-time 中间件，记录2次通过此中间件「穿越」的时间</span></span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start</span><br><span class="line">  ctx.set(<span class="string">'X-Response-Time'</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>)</span><br><span class="line">  <span class="comment">// (6) 返回 ctx.body</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// (2) 进入 logger 中间件</span></span><br><span class="line">  <span class="keyword">const</span> start = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  <span class="comment">// (4) 再次进入 logger 中间件，记录2次通过此中间件「穿越」的时间</span></span><br><span class="line">  <span class="keyword">const</span> ms = <span class="built_in">Date</span>.now() - start</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;ms&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="comment">// (3) 进入 response 中间件，没有捕获到下一个符合条件的中间件，传递到 upstream</span></span><br><span class="line">  ctx.body = <span class="string">'Hello World'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p>
<p>一开始，用户的请求通过x-response-time和logger中间件。这两个中间件记录了一些请求细节。然后“穿过”response 中间件一次，最终结束请求，返回“Hello World”。<br>当程序运行到<code>await next()</code>时，代码流会暂停执行这个中间件到剩余代码，转而切换到下一个被定义的中间件执行代码，这样切换控制权的方式，被称为downstream，当没有下一个中间件执行downstream的时候，代码会逆序执行（回到<code>await next()</code>执行下一行）。</p>
<p>“级联”这个词许多人也许在CSS中听说过，如果你不能理解为什么在这里使用这个词，可以将这种路由结构想象成LESS的继承嵌套书写方式。<br>下面的“洋葱”图更能形象地表达。用户的请求先后经过登陆管理，状态码重定向，错误处理，cache缓存中间件，session会话中间件，routes路由中间件，应用。响应逆向经过这些步骤传递出去。<br><img src="/static/2018/01/cascading.png" alt="级联模型"></p>
<h2 id="Context-内容"><a href="#Context-内容" class="headerlink" title="Context(内容)"></a>Context(内容)</h2><p>每个中间件都接受一个Koa的<code>Context</code>对象。<code>Context</code>将 node 的<code>request</code>和<code>response</code>对象封装到单个对象中。<code>ctx</code>通常用作上下文对象的参数名称。</p>
<h3 id="ctx-request"><a href="#ctx-request" class="headerlink" title="ctx.request"></a>ctx.request</h3><p>Koa提供了一个<code>Request</code>对象作为<code>Context</code>的<code>request</code>属性，即<code>ctx.request</code>。 Koa的<code>Request</code>对象提供了用于处理 http请求的方法，该请求委托给 node<code>http</code>模块的<a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage" target="_blank" rel="noopener">IncomingMessage</a>。<br>下面是一个检查请求客户端xml支持的示例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.assert(ctx.request.accepts(<span class="string">'xml'</span>), <span class="number">406</span>);</span><br><span class="line">  <span class="comment">// 相当于:</span></span><br><span class="line">  <span class="comment">// if (!ctx.request.accepts('xml')) ctx.throw(406);</span></span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="ctx-response"><a href="#ctx-response" class="headerlink" title="ctx.response"></a>ctx.response</h3><p>Koa提供了一个<code>Response</code>对象作为<code>Context</code>的<code>response</code>属性，即<code>ctx.response</code>。 Koa的<code>Response</code>对象提供了用于处理<code>http</code>响应的方法，该响应委托给<a href="https://nodejs.org/api/http.html#http_class_http_serverresponse" target="_blank" rel="noopener">ServerResponse</a>。<br>下面是一个使用Koa的｀Response｀对象将文件作为响应体流式传输的示例（返回一个页面)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> next()</span><br><span class="line">  ctx.response.type = <span class="string">'html'</span></span><br><span class="line">  ctx.response.body = fs.createReadStream(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>更详细的API参阅<a href="https://github.com/demopark/koa-docs-Zh-CN/blob/master/api/request.md" target="_blank" rel="noopener">请求 API 参考</a>, <a href="https://github.com/demopark/koa-docs-Zh-CN/blob/master/api/response.md" target="_blank" rel="noopener">响应 API 参考</a>和<a href="https://github.com/koajs/koa/blob/master/docs/api/context.md" target="_blank" rel="noopener">上下文 API 参考</a>。</p>
<h2 id="koa-router"><a href="#koa-router" class="headerlink" title="koa-router"></a>koa-router</h2><p><a href="https://www.npmjs.com/package/koa-router" target="_blank" rel="noopener">koa-router</a>是koa的路由中间件。<br>可以先看一下原生路由和<code>koa-router</code>的基本用法的对比。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生路由</span></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.request.path !== <span class="string">'/'</span>) &#123;</span><br><span class="line">    ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">    ctx.response.body = <span class="string">'&lt;a href="/"&gt;Index Page&lt;/a&gt;'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.response.body = <span class="string">'Hello World'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// koa-route</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">'/'</span>, ctx =&gt; &#123;</span><br><span class="line">    ctx.response.body = <span class="string">'Hello World'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="string">'/about'</span>, ctx =&gt; &#123;</span><br><span class="line">    ctx.response.type = <span class="string">'html'</span></span><br><span class="line">    ctx.response.body = <span class="string">'&lt;a href="/"&gt;Index Page&lt;/a&gt;'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods())</span><br></pre></td></tr></table></figure>
<h3 id="router-get-put-post-patch-delete-del-⇒-Router"><a href="#router-get-put-post-patch-delete-del-⇒-Router" class="headerlink" title="router.get|put|post|patch|delete|del ⇒ Router"></a>router.get|put|post|patch|delete|del ⇒ Router</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router</span><br><span class="line">  .get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    ctx.body = <span class="string">'Hello World!'</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .post(<span class="string">'/users'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .put(<span class="string">'/users/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .del(<span class="string">'/users/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// router.all() can be used to match against all methods</span></span><br><span class="line">  .all(<span class="string">'/users/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="多个中间件"><a href="#多个中间件" class="headerlink" title="多个中间件"></a>多个中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.get(</span><br><span class="line">  <span class="string">'/users/:id'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> User.findOne(ctx.params.id).then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">      ctx.user = user;</span><br><span class="line">      <span class="keyword">return</span> next();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ctx.user);</span><br><span class="line">    <span class="comment">// =&gt; &#123; id: 17, name: "Alex" &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> forums = <span class="keyword">new</span> Router()</span><br><span class="line"><span class="keyword">const</span> posts = <span class="keyword">new</span> Router()</span><br><span class="line">posts</span><br><span class="line">  .get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .get(<span class="string">'/:pid'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">forums.use(<span class="string">'/forums/:fid/posts'</span>, posts.routes(), posts.allowedMethods())</span><br><span class="line"></span><br><span class="line"><span class="comment">// responds to '/forums/123/posts' and '/forums/123/posts/123'</span></span><br><span class="line">app.use(forums.routes())</span><br></pre></td></tr></table></figure>
<h3 id="路由前缀"><a href="#路由前缀" class="headerlink" title="路由前缀"></a>路由前缀</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  prefix: <span class="string">'/users'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, ...) <span class="comment">// responds to '/users'</span></span><br><span class="line">router.get(<span class="string">'/:id'</span>, ...) <span class="comment">// responds to '/users/:id'</span></span><br></pre></td></tr></table></figure>
<h3 id="URL参数"><a href="#URL参数" class="headerlink" title="URL参数"></a>URL参数</h3><p>命名的路由参数会被捕获，并被添加到<code>ctx.params</code>里<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/:category/:title'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.params)</span><br><span class="line">  <span class="comment">// =&gt; &#123; category: 'programming', title: 'how-to-node' &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>关于<code>koa-router</code>更多介绍参阅<a href="https://www.npmjs.com/package/koa-router" target="_blank" rel="noopener">koa-router</a>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/demopark/koa-docs-Zh-CN" target="_blank" rel="noopener">koa中文文档</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank" rel="noopener">Koa 框架教程</a></li>
<li><a href="https://www.npmjs.com/package/koa-router" target="_blank" rel="noopener">koa-router</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Koa </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript异步编程之promise与async]]></title>
      <url>http://seminelee.github.io/2017/12/16/promise-2/</url>
      <content type="html"><![CDATA[<h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><p>我们知道，JavaScript语言的执行环境是“单线程”。这种模式的坏处是只要有一个任务耗时很长，后面的任务都必须排队等待。常见的浏览器无响应往往就是因为某一段JS代码长时间运行导致整个页面卡在这个地方，其他任务无法执行。<br><a id="more"></a><br>为了解决这个问题，JavaScript语言将任务的执行模式分成：同步(Synchronous)和异步(Asynchronous)。同步模式就是上面讲到的模式。异步模式则是：每一个任务有一个或多个回调函数(callback)。前一个任务结束后，不是执行后一个任务，而是执行回调函数。后一个任务则是不等前一个任务结束就执行。执行顺序与任务的排列顺序是不一致的、异步的。比如Ajax操作，异步执行http请求。</p>
<h2 id="常见的几种“异步模式”编程"><a href="#常见的几种“异步模式”编程" class="headerlink" title="常见的几种“异步模式”编程"></a>常见的几种“异步模式”编程</h2><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>这是异步编程最基本的方法。如果f1是一个很耗时的任务，可以考虑改写f1，把依赖f1返回结果的f2写成f1的回调函数。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// f1 code</span></span><br><span class="line">        callback()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// f2 code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1(f2)</span><br></pre></td></tr></table></figure></p>
<p>优点：简单、容易理解和部署；<br>缺点：各个部分高度耦合，流程很混乱；每个任务只能制定一个回调函数。</p>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>事件监听：任务的执行不取决于代码的顺序，而取决于某个事件是否发生。用这种方法修改上面的写法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery的写法</span></span><br><span class="line">f1.on(<span class="string">'done'</span>, f2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// f1 code</span></span><br><span class="line">        f1.trigger(<span class="string">'done'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>优点：容易理解；可以绑定多个事件，每个事件可以指定多个回调函数；有利于实现模块化<br>缺点：整个程序都要变成事件驱动型，运行流程不清晰</p>
<h3 id="发布-订阅"><a href="#发布-订阅" class="headerlink" title="发布/订阅"></a>发布/订阅</h3><p>发布/订阅模式(观察者模式)：假设存在一个信号中心，某个任务执行完成，就像信号中心发布一个信号(事件)，其他任务可以向信号中心订阅这个信号(事件)，从而知道什么时候自己可以开始执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// f1 code</span></span><br><span class="line">        jQuery.publish(<span class="string">'done'</span>) <span class="comment">// 发布</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jQuery.subscribe(<span class="string">'done'</span>, f2) <span class="comment">// 订阅</span></span><br><span class="line"><span class="comment">// jQuery.unsubscribe('done', f2) // 取消订阅</span></span><br></pre></td></tr></table></figure></p>
<p>与事件监听类似，但优于事件监听。优点：可以通过查看信息中心，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>
<h3 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h3><p>Promises对象是CommonJS工作组提出的一种规范，Es6将其写进了语言标准，原生提供了<code>Promise</code>对象。Promise接受一个函数作为参数，该函数的两个参数分别是resolve和reject。这两个函数就是就是回调函数。</p>
<ul>
<li>resolve函数：在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</li>
<li>reject函数：在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。<br>Promise实例生成以后，可以用<code>then</code>方法指定<code>resolved</code>状态和<code>reject</code>状态的回调函数。<br>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const f1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    if (/* 异步操作成功 */) &#123;</span><br><span class="line">        resolve(&apos;success&apos;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        reject(&apos;fail&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">f1.then(f2)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>优点：回调函数变成了链式写法，使程序流程变得很清楚；如果一个任务已经完成，再添加回调函数，该回调函数会立即执行，所以不用担心是否错过了某个事件或信号。</p>
<h2 id="Promise基本API和常见问题"><a href="#Promise基本API和常见问题" class="headerlink" title="Promise基本API和常见问题"></a>Promise基本API和常见问题</h2><h3 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then(onFulfilled, onRejected)</span><br><span class="line"></span><br><span class="line">promise.then(f2).then(f3)</span><br></pre></td></tr></table></figure>
<p>对Promise添加<code>onFulfilled</code>和<code>onRejected</code>回调，并返回的是一个新的Promise实例，且返回值将作为参数传入这个新Promise的<code>resolve</code>函数。因此我们可以使用链式写法。如上面的例子。</p>
<h3 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h3><p>该方法用于指定发生错误时的回调函数。<br><code>reject</code>方法的作用，等同于抛错。<code>promise</code>对象的错误，会一直向后传递，直到被捕获。即错误总会被下一个<code>catch</code>所捕获。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch(onRejected)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>如果没有使用<code>catch</code>方法指定处理错误的回调函数，<code>Promise</code>对象抛出的错误不会传递到外层代码，即不会有任何反应（Chrome会抛错），这是<code>Promise</code>的另一个缺点。</p>
<h3 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h3><p>该方法用于将多个Promise实例，包装成一个新的Promise实例。Promise.all方法接受一个数组（或具有Iterator接口）作参数，数组中的对象（p1、p2、p3）均为promise实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3])</span><br></pre></td></tr></table></figure></p>
<ul>
<li>当p1, p2, p3状态都变为fulfilled，p的状态才会变为fulfilled，并将三个promise返回的结果，按参数的顺序（而不是 resolved的顺序）存入数组，传给p的回调函数。</li>
<li>当p1, p2, p3其中之一状态变为rejected，p的状态也会变为rejected，并把第一个被reject的promise的返回值，传给p的回调函数。<h3 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h3>该方法同样是将多个Promise实例，包装成一个新的Promise实例<br>不同于<code>all</code>的是：当p1, p2, p3中有一个实例的状态发生改变（变为fulfilled或rejected），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3])</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="一些常见的问题"><a href="#一些常见的问题" class="headerlink" title="一些常见的问题"></a>一些常见的问题</h3><ol>
<li>reject 和 catch 的区别</li>
</ol>
<ul>
<li>promise.then(onFulfilled, onRejected)<br>在onFulfilled中发生异常的话，在onRejected中是捕获不到这个异常的。</li>
<li>promise.then(onFulfilled).catch(onRejected)<br>.then中产生的异常能在.catch中捕获。所以还是建议这种写法</li>
</ul>
<ol start="2">
<li><p>如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误。如下面的代码，这样写才能保证taskB正常执行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">    .then(taskA)</span><br><span class="line">    .catch(onRejectedA)</span><br><span class="line">    .then(taskB)</span><br><span class="line">    .catch(onRejectedB)</span><br><span class="line">    .then(finalTask)</span><br></pre></td></tr></table></figure>
</li>
<li><p>每次调用<code>then</code>都会返回一个新创建的<code>promise</code>对象，而<code>then</code>内部只是返回的数据。<br>如下面的代码，第一种方法中，then的调用几乎是同时开始执行的，且传给每个then的value都是100，这种方法应当避免。方法二才是正确的链式调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1：对同一个promise对象同时调用 then 方法</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"finally: "</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// finally: 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2：对 then 进行 promise chain 方式进行调用</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"finally: "</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// finally: 400</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在异步回调中抛错，不会被catch到</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'Uncaught Exception!'</span> <span class="comment">// 异步回调中抛错</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);       <span class="comment">//This is never called</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>promise</code>状态变为resove或reject，就凝固了，不会再改变</p>
</li>
</ol>
<h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h2><p><code>Promise</code>让我们告别回调函数，写出更优雅的异步代码。但在实践过程中，我们发现Promise也有不完美的地方。ES7中提出了Async/Await，它能使得我们在编写异步代码时变得像同步一样的方式来编写。</p>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul>
<li><code>async</code>表示这是一个<code>async</code>函数，而<code>await</code>只能在这个函数里面使用。</li>
<li><code>await</code>表示在这里等待<code>await</code>后面的操作执行完毕，再执行下一句代码。</li>
<li><code>await</code>后面紧跟着的最好是一个耗时的操作或者是一个异步操作(当然非耗时的操作也可以的，但是就失去意义了)</li>
</ul>
<h3 id="与Promise对比"><a href="#与Promise对比" class="headerlink" title="与Promise对比"></a>与Promise对比</h3><p>下面是<a href="https://github.com/axios/axios" target="_blank" rel="noopener">Axios</a>库向GraphQL服务器发送一个请求的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise写法</span></span><br><span class="line">axios.get(<span class="string">`url`</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.data)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    f1(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Async/Await写法</span></span><br><span class="line"><span class="keyword">async</span> fetchData(url) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">`url`</span>)</span><br><span class="line">    <span class="keyword">const</span> data = response.data</span><br><span class="line">    f1(data)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，async/await与Promise一样，是非阻塞的。但async/await使得异步代码看起来像同步代码，这正是它的魔力所在。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="noopener">Javascript异步编程的4种方法</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Promise对象</a></li>
<li><a href="https://segmentfault.com/a/1190000007032448" target="_blank" rel="noopener">初探Promise</a></li>
<li><a href="https://www.jianshu.com/p/a138a525c287" target="_blank" rel="noopener">ES7 and ES8 特性</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Es6 </tag>
            
            <tag> Es7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记之php的运行机制与原理]]></title>
      <url>http://seminelee.github.io/2017/11/19/php/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常用php写cgi，但是发现自己并不理解它的运行原理，所以学习一下。</p>
<h2 id="PHP是什么"><a href="#PHP是什么" class="headerlink" title="PHP是什么"></a>PHP是什么</h2><p>PHP是一种适用于Web开发的动态语言，是一个用C语言实现，包含大量组件的软件框架。<br><a id="more"></a></p>
<ul>
<li><p>多进程模型：PHP是多进程模型。不同请求间互不干涉，即一个请求挂掉不会对全盘服务造成影响。（使用进程控制函数，创建子进程，执行程序，处理信号等）。PHP也能支持多线程模型。</p>
<blockquote>
<p>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。<br>区别：<br>（1）进程具有独立的空间地址，一个进程崩溃后，在保护模式下不会对其它进程产生影响。<br>（2）线程只是一个进程的不同执行路径，线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉。</p>
</blockquote>
</li>
<li><p>弱类型语言：和C、C++、C#、Java等不同，PHP是一种弱类型的语言。即一个变量的类型并不是一开始就确定不变的，运行中才会确定并可能发生隐式或显示的类型转换。</p>
</li>
<li>引擎(Zend) + 组件(ext)的模式降低内部耦合</li>
<li>中间层(sapi)隔绝web server和PHP</li>
<li>语法简单灵活，没有太多规范</li>
</ul>
<h2 id="PHP的核心架构"><a href="#PHP的核心架构" class="headerlink" title="PHP的核心架构"></a>PHP的核心架构</h2><p><img src="/static/2017/12/php.jpeg" alt="PHP的核心架构"><br>从下向上如下：</p>
<ol>
<li>Zend引擎：Zend整体用C语言实现，是PHP的内核部分。它将PHP代码翻译，实现了基本的数据结构，内存分配机制及管理，提供了相应的api供外部调用，是一切的核心。</li>
<li>Extensions：围绕Zend引擎，extensions通过组件式的方式提供各种基础服务，我们常见的各种内置函数、标准库等都是通过extension来实现，用户也可以根据需要实现自己的extension。</li>
<li>Sapi：Aerver Application Programming Interface，即服务端应用编程接口，是PHP和web server的中间层。Sapi通过钩子函数，使PHP能和外部交互数据，这也将PHP和上层应用解耦。</li>
<li>上层应用：就是我们平时编写的PHP程序，通过不同的sapi方式得到各种各样的应用模式</li>
</ol>
<h3 id="Sapi"><a href="#Sapi" class="headerlink" title="Sapi"></a>Sapi</h3><p>我们常见的Sapi有：</p>
<ol>
<li>apache2handler：以apache作为webserver，采用mod_PHP模式运行时候的处理方式，也是现在应用最广泛的一种。</li>
<li>fast-cgi：这是webserver和PHP直接的另一种交互方式，也就是大名鼎鼎的fastcgi协议，在最近fastcgi+PHP得到越来越多的应用，也是异步webserver所唯一支持的方式。nginx就是通过php-fpm(fast-cgi)来解析php的。</li>
<li>cli：命令行调用的应用模式</li>
</ol>
<h3 id="php-apache和php-nginx的区别"><a href="#php-apache和php-nginx的区别" class="headerlink" title="php+apache和php+nginx的区别"></a>php+apache和php+nginx的区别</h3><p>apache是通过mod_php来解析php的；nginx是通过php-fpm(fast-cgi)来解析php的。</p>
<ol>
<li>PHP解释器是否嵌入Web服务器进程内部执行<br>mod_php通过嵌入PHP解释器到Apache进程中，只能与Apache配合使用。这种方式的弊端是内存占用大，如处理CSS、JS等静态文件完全没有必要加载解释器；而cgi和fast-cgi以独立的进程的形式出现，只要对应的Web服务器实现cgi或者fast-cgi协议，就能够处理PHP请求。</li>
<li>单个进程处理的请求数量<br>mod_php和fast_cgi的模式在每个进程的生命周期内能够处理多个请求，而cgi 的模式处理一个请求就马上销毁进程，在高并发的场景下cgi 的性能非常糟糕。而fast-cgi也有启动多个进程，占用内存的缺点。<blockquote>
<p>cgi和fast-cgi是通信协议V1.0和V2.0，而php-cgi和php-fpm是实现了这种协议的程序。所以处理具体请求的是php-cgi或php-fpm，它们遵循fast-cgi协议。</p>
</blockquote>
</li>
</ol>
<p>综上，如果对性能有极高的要求，可以将静态请求和动态请求分开，这时Nginx+php-fpm是比较好的选择。</p>
<h2 id="PHP的执行流程"><a href="#PHP的执行流程" class="headerlink" title="PHP的执行流程"></a>PHP的执行流程</h2><p><img src="/static/2017/12/php-1.jpeg" alt="PHP的核心架构"><br>拿到一段代码后，经过词法解析、语法解析等阶段后，源程序会被翻译成一个个指令（opcodes）,然后ZEND虚拟机顺次执行这些指令完成操作。PHP本身是用C实现的，因此最终调用的也是C的函数，实际上，我们可以把PHP看做一个C开发的软件。</p>
<h2 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h2><p>PHP是一门弱类型语言，本身不严格区分变量的类型。PHP变量可以分为简单类型(int、string、boolean)、集合类型(array、resource、object)和常量(const)。所有变量在底层都是同一种结构zval。<br>zval主要由三部分组成：</p>
<ul>
<li>type：指定变量的类型</li>
<li>refcount&amp;is_ref：用来实现引用计数</li>
<li>value：存储变量的实际数据(核心)。因为要存储多种类型，所以zvalue是一个union，也由此实现了弱类型。</li>
</ul>
<h2 id="和node-js比较"><a href="#和node-js比较" class="headerlink" title="和node.js比较"></a>和node.js比较</h2><h3 id="多进程和单进程"><a href="#多进程和单进程" class="headerlink" title="多进程和单进程"></a>多进程和单进程</h3><p> 上面有提到，PHP是多进程模型。因此，如果PHP代码损坏，不会拖垮整个服务器。 PHP代码只运行在自己的进程范围中，当某个请求显示错误时，它只对特定的请求产生影响；而在Node.js环境中，所有的请求均在单一的进程服务中，当某个请求导致未知错误时，整个服务器都会受到影响。<br>以下是PHP和Node.js对处理Http请求时的模型。<br>php+apache模型<br><img src="/static/2017/12/php-2.jpeg" alt="PHP_apache"><br>node.js模型<br><img src="/static/2017/12/php-3.jpeg" alt="node.js"></p>
<h3 id="多线程和单线程"><a href="#多线程和单线程" class="headerlink" title="多线程和单线程"></a>多线程和单线程</h3><p> Node.js 他用的是JavaScript引擎，那么注定它是单线程 ，使用异步方法开辟多个任务，无需像php等待上个任务线程使用结束之后给下个使用；PHP也是单线程但是它借用Apache服务器提供多线程服务。<br> <img src="/static/2017/12/php-4.png" alt="运行机制对比"></p>
<h3 id="在高并发、大数据量时处理方式不同"><a href="#在高并发、大数据量时处理方式不同" class="headerlink" title="在高并发、大数据量时处理方式不同"></a>在高并发、大数据量时处理方式不同</h3><p> php： 优化sql，用组件，用缓存，为了让线程尽快结束，进行下一次任务（上下衔接依次执行）；<br> node：单线程、异步、事件驱动。因为运行速度很快并不会等待，所以如果后面用到前面返回的结果，就需要把后面的封装起来，作为一个回调函数执行。<br> <img src="/static/2017/12/php-5.png" alt="高并发时处理对比"></p>
]]></content>
      
        <categories>
            
            <category> 后端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react学习笔记之入门]]></title>
      <url>http://seminelee.github.io/2017/11/05/react-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前居然一直没有学习过react，还是趁着周末学习一下这个流行的框架。虽然fb随时又可能不给我们用了？！= =但是学习一下这个框架的思想也是好的。<br>React是2014年f8大会上被提出的，能用来解决一个大型应用的数据变更的问题。它不是完整的MVC、MVVM框架，只负责view层。它实现的原理是虚拟DOM的机制，数据单向绑定，这使它能快速响应复杂的数据变更和交互。它推崇组件化开发，这也满足了复杂场景下的高性能要求。<br><a id="more"></a></p>
<h2 id="虚拟DOM与JSX"><a href="#虚拟DOM与JSX" class="headerlink" title="虚拟DOM与JSX"></a>虚拟DOM与JSX</h2><p>这是<a href="https://reactjs.org/" target="_blank" rel="noopener">官网</a>上的一个例子<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1&gt;Hello, world!&lt;<span class="regexp">/h1&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></p>
<p><code>ReactDOM.render</code>用于将模版转为HTML语言，并插入指定的DOM节点。上面的<code>&lt;h1&gt;</code>实质上不是真的HTML标签，而是一个虚拟DOM。上面的代码就是把渲染结果<code>&lt;h1&gt;</code>标签插入到id为root的节点中。<br>这种HTML与Javascrpt混写的语法叫JSX。它实质上是一个语法糖，每一个XML标签都会被JSX转换工具转换成纯Javascript代码。上面的代码不使用JSX可以这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用JSX</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    React.createElement(<span class="string">'h1'</span>, <span class="literal">null</span>, <span class="string">'Hello, world!'</span>),</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>我们可以看到，使用JSX，组件的结构和组件之间的关系看上去更加清晰。<br>它的的基本语法规则是遇到HTML标签（以<code>&lt;</code>开头），就用HTML规则解析；遇到代码块（以<code>{</code>开头），就用JavaScript规则解析。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>接下来我们来尝试封装组件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">"title"</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;App name=<span class="string">"semine"</span> /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">44px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>React.createClass</code>方法用于生成一个组件类。这里用了ES6的<code>class</code>关键字更为清晰。<code>App</code>就是一个组件类，模版插入<code>&lt;App /&gt;</code>时，会自动生成<code>App</code>的一个实例。所有的组件类都必须有自己的<code>render</code>方法，用于输出组件。<br>样式方面，也可以用内嵌样式的写法。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> styleObj = &#123;</span><br><span class="line">            color: <span class="string">'#ff0000'</span>,</span><br><span class="line">            fontSize: <span class="string">'44px'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;styleObj&#125;</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><ul>
<li>Mounted 被render解析生成对应的DOM节点，并被插入浏览器的DOM结构的一个过程</li>
<li>Update 当组件的state（状态）改变，一个mounted的组件被重新render的过程</li>
<li>Unmounted 一个mounted的组件对应的DOM节点在DOM结构中被移除的过程</li>
</ul>
<p>每一个状态React都封装了对应的hook（钩子）函数</p>
<ul>
<li>mounting：getInitialState(ES6不支持这个方法，改为在构造函数中声明)-&gt;componentWillMount-&gt;render-&gt;componentDidMount</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        alert(<span class="string">'init'</span>)</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            color: <span class="string">'blue'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        alert(<span class="string">'will'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">                &lt;div style=&#123;<span class="keyword">this</span>.state&#125;&gt;state&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        alert(<span class="string">'did'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                color: <span class="string">'red'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的state可以这样理解：就是将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染UI</p>
<ul>
<li>Updating：componentWillReceiveProps(需要接受新的props时)-&gt;shouldComponentUpdate(对比新旧的props和state，判断是否需要update)-&gt;componentWillUpdate-&gt;render-&gt;componentDidUpdate</li>
<li>Unmounting：componentWillUnmount</li>
</ul>
<h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.clickHandler = <span class="keyword">this</span>.clickHandler.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听点击事件</span></span><br><span class="line">    clickHandler(e) &#123;</span><br><span class="line">        e.stopPropagation()</span><br><span class="line">        e.preventDefault()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> tip = <span class="keyword">this</span>.refs.tip</span><br><span class="line">        <span class="keyword">if</span> (tip.style.display === <span class="string">'none'</span>) &#123;</span><br><span class="line">            tip.style.display = <span class="string">'inline'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tip.style.display = <span class="string">'none'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.clickHandler&#125;&gt;显示|隐藏&lt;<span class="regexp">/button&gt;&lt;span ref="tip"&gt;点击按钮&lt;/</span>span&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Input extends Component &#123;</span></span><br><span class="line"><span class="regexp">    constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">        super(props)</span></span><br><span class="line"><span class="regexp">        this.changeHandler = this.changeHandler.bind(this)</span></span><br><span class="line"><span class="regexp">        this.state = &#123;</span></span><br><span class="line"><span class="regexp">            inputContent: ''</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 监听改变事件</span></span><br><span class="line"><span class="regexp">    changeHandler(e) &#123;</span></span><br><span class="line"><span class="regexp">        e.stopPropagation()</span></span><br><span class="line"><span class="regexp">        e.preventDefault()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            inputContent: e.target.value</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    render() &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input type="text" onChange=&#123;this.changeHandler&#125;/</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.inputContent&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends Component &#123;</span></span><br><span class="line"><span class="regexp">    render() &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Input /</span>&gt;</span><br><span class="line">                &lt;TestButton /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure>
<p>其中，从组件获取真实DOM的节点，我们用到了<code>ref</code>属性<br>另外，之前<code>React.createClass</code>中事件是默认绑定到当前类中，但是使用es6语法的话，this指向div的支撑实例（backing instance），需要手动绑定this才会指向当前类</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>React写的时候感觉语法限制没有那么多，跟vue也有一些相似之处，比如<code>ref</code>。但我更喜欢它更清晰地传达了虚拟DOM的思想。<br>找回努力学习的感觉吧少女！期待下次更新&gt; &lt;</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">React 入门实例教程</a></li>
<li><a href="http://www.imooc.com/learn/504" target="_blank" rel="noopener">React 入门</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imweb2017会议个人总结]]></title>
      <url>http://seminelee.github.io/2017/09/17/imweb/</url>
      <content type="html"><![CDATA[<h2 id="PWA与AMP-移动Web的现在与未来"><a href="#PWA与AMP-移动Web的现在与未来" class="headerlink" title="PWA与AMP-移动Web的现在与未来"></a>PWA与AMP-移动Web的现在与未来</h2><p>比起native app，移动web的优势有这些：</p>
<ol>
<li>跨平台 reach更多的用户</li>
<li>即时更新 更灵活 有错误也可以补救</li>
<li>native app要为不同平台设计与开发 移动web工作量小一点</li>
</ol>
<p>如今在移动互联网中，手机流量远胜于Desktop，而且比起移动Web更集中于Apps，并且是Top3的App。如何尝试扭转这个趋势呢？</p>
<a id="more"></a>
<h3 id="AMP-Accelerated-Mobile-Pages"><a href="#AMP-Accelerated-Mobile-Pages" class="headerlink" title="AMP(Accelerated Mobile Pages)"></a>AMP(Accelerated Mobile Pages)</h3><p>AMP是一个Github上开源的项目，它的目的是加速移动网络的网页加载从而提升体验。<br>它主要包括这三个方面：</p>
<ul>
<li>AMP runtime。它新定义了一套HTML标签，如amp-img, amp-video。使用这些tag可以确保加载的顺滑。同时amp也负责管理资源何时加载，避免不必要的流量。</li>
<li>AMP validator 是一个校验器。为了确保网页能够达到所要求的极速，AMP对网页里能使用的东西做了严格的限制。比如不允许使用自己的JS，不允许外部加载CSS。校验器是为了帮助你检查你的网页是否达到了这些要求。</li>
<li>Google AMP cache 提供了第三方的缓存。这样从Google的搜索结果里进入AMP网页就可以做到预加载甚至预渲染，从来带来极速体验，就像前面的范例视频那样。当然，任何第三方都可以提供自己的缓存。</li>
</ul>
<p>同时，由于这些限制，AMP目前主要针对静态内容的页面，如交互少，对JS依赖也少的新闻网站、博客等。</p>
<h3 id="PWA-Progressive-Web-Apps"><a href="#PWA-Progressive-Web-Apps" class="headerlink" title="PWA(Progressive Web Apps)"></a>PWA(Progressive Web Apps)</h3><p>PWA是Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。<br>一个PWA应用首先是一个网页。可以通过Web技术编写出一个网页应用，随后添加上 App Manifest 和 Service Worker来实现PWA的安装和离线等功能。<br>为了让 PWA 应用被添加到主屏幕, 使用 manifest.json 定义应用的名称, 图标等等信息。然后在 HTML 文件当中引入配置。<br>Service Worker主要是解决离线应用的问题。Service Worker 可以使你的应用先访问本地缓存资源，所以在离线状态时，在没有通过网络接收到更多的数据前，仍可以提供基本的功能。它的生命周期大致如下：</p>
<ol>
<li>register 注册</li>
<li>install 安装</li>
<li>activated 抓取资源写入缓存，激活</li>
<li>idle 空闲</li>
<li>active 监听activate事件，遍历cache，如果有更新，清除旧缓存，更新资源</li>
<li>terminate 销毁</li>
</ol>
<p>详细API可在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers" target="_blank" rel="noopener">MDN</a>上查看。详细例子可看github上google给的<a href="https://github.com/GoogleChrome/samples/tree/gh-pages/service-worker/basic" target="_blank" rel="noopener">sample</a></p>
<h2 id="TypeScript和BuckleScript"><a href="#TypeScript和BuckleScript" class="headerlink" title="TypeScript和BuckleScript"></a>TypeScript和BuckleScript</h2><h3 id="TypeScript-高效可扩展的JavaScript"><a href="#TypeScript-高效可扩展的JavaScript" class="headerlink" title="TypeScript-高效可扩展的JavaScript"></a>TypeScript-高效可扩展的JavaScript</h3><p>TypeScript是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。</p>
<h3 id="BuckleScript"><a href="#BuckleScript" class="headerlink" title="BuckleScript"></a>BuckleScript</h3><p>BuckleScript是把已经存在将近30年的语言 OCaml 编译成可读的 JS编译成可读的JavaScript的很好的编译器。它具有闪电一样的编译速度，且比TypeScript有更好的类型安全（能够保证一旦编译通过就不会有类型错误）。</p>
<h2 id="从HTTP到Socket，深入浅出现代前端抓包技术"><a href="#从HTTP到Socket，深入浅出现代前端抓包技术" class="headerlink" title="从HTTP到Socket，深入浅出现代前端抓包技术"></a>从HTTP到Socket，深入浅出现代前端抓包技术</h2><p>代理本地抓包只能适用于双网卡和同一wifi环境下的情况，因此尝试在node.js接入层抓包</p>
<h2 id="框架工具"><a href="#框架工具" class="headerlink" title="框架工具"></a>框架工具</h2><ul>
<li>Tree-Shaking 删除冗余，包括dead code、无用的模块。webpack2 也引入了tree-shaking 的能力</li>
</ul>
<h2 id="面向未来的直播技术－WebRTC"><a href="#面向未来的直播技术－WebRTC" class="headerlink" title="面向未来的直播技术－WebRTC"></a>面向未来的直播技术－WebRTC</h2><p>目前的直播技术</p>
<ul>
<li>HLS协议 移动兼容性高，但延迟高</li>
<li>Flv.js b站开源的视频播放器，原理是通过media source Extensions实现，在PC端兼容性高，但是在移动端兼容性差</li>
<li>WebRTC(Web Real-Time Communication) 兼容主流的PC端浏览器，延迟低,但移动端兼容性不好。</li>
</ul>
<h2 id="XSS魅影危机之从编码说起"><a href="#XSS魅影危机之从编码说起" class="headerlink" title="XSS魅影危机之从编码说起"></a>XSS魅影危机之从编码说起</h2><ul>
<li>服务层 ngnix、apache等等防御模块</li>
<li>浏览器层 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-XSS-Protection" target="_blank" rel="noopener">X-XSS-Protection</a>、<a href="https://www.w3.org/TR/CSP/" target="_blank" rel="noopener">CSP</a></li>
<li>代码层 encoder、filter</li>
<li>底线 HttpOnly(为Cookie提供了一个新属性，用以阻止客户端脚本访问Cookie)、域分离</li>
</ul>
<h3 id="encoder"><a href="#encoder" class="headerlink" title="encoder"></a>encoder</h3><ul>
<li>过滤参数，转义”、&lt;、&gt;等，进行html属性编码、js编码</li>
<li>encodeurl url编码</li>
</ul>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>需要特殊字符的情况，如富文本编辑器等<br>黑白名单过滤原则</p>
<h2 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h2><p>Javascript 一开始就是解释性语言，后来引入了JIT技术（即时编译），但由于弱类型等编译速度较慢。<br>WebAssembly是用来编写高性能的、浏览器无关的 Web 组件的一种字节码规范。它通过静态类型变量实现性能提升，并且允许任何语言编译到它制定的AST tree。更适合用于写模块，承接各种复杂的计算，如图像处理、3D运算、语音识别、视音频编码解码这种工作</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.zhihu.com/question/36380698/answer/105498519" target="_blank" rel="noopener">如何评价AMP (Accelerated Mobile Pages) Project？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25459319" target="_blank" rel="noopener">PWA 入门: 写个非常简单的 PWA 页面</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 会议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> imweb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于js+rem的移动端自适应方案小总结]]></title>
      <url>http://seminelee.github.io/2017/09/03/rem/</url>
      <content type="html"><![CDATA[<h2 id="用rem作单位"><a href="#用rem作单位" class="headerlink" title="用rem作单位"></a>用rem作单位</h2><p>rem是CSS3引进的一个新的单位。W3C关于rem的定义是：等于根元素上的font-size的计算值。比如，当html的font-size为16px时，1rem=16px。<br>它的兼容性也较高，支持的浏览器有iOS Safari9.3+、Android Browser4.4+、Chrome49+、Firefox52+、IE11等，符合一般项目的浏览器兼容要求。<br><a id="more"></a><br><img src="/static/2017/09/rem.jpeg" alt="适配"></p>
<p>根据rem的特性，我们可以想到，我们能在设置元素的width、height等属性时使用rem作为单位，用js根据屏幕的分辨率，改变根元素html的font-size的值，从而实现元素相对于屏幕等比缩放。</p>
<h2 id="用less写单位转换"><a href="#用less写单位转换" class="headerlink" title="用less写单位转换"></a>用less写单位转换</h2><p>如果设置每一个元素的属性时都需要手动计算rem就会很麻烦，于是我们可以用less写一个类pxtorem<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">50px</span>;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">@base</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pxtorem</span>(<span class="variable">@pro</span>, <span class="variable">@px</span>) &#123;</span><br><span class="line">    <span class="attribute">@&#123;pro&#125;</span>: (<span class="variable">@px</span> / <span class="variable">@base</span>) * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*较特殊的calc函数*/</span></span><br><span class="line"><span class="selector-class">.pxtoremcalc</span>(<span class="variable">@pro</span>, <span class="variable">@per</span>, <span class="variable">@px</span>) &#123;</span><br><span class="line">    <span class="attribute">@&#123;pro&#125;</span>: calc(<span class="string">~"@&#123;per&#125; - "</span>(<span class="variable">@px</span> / <span class="variable">@base</span>) * <span class="number">1rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="selector-class">.pxtorem</span>(width, <span class="number">120px</span>);</span><br><span class="line">    <span class="selector-class">.pxtorem</span>(height, <span class="number">100%</span>, <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>或者也可以用sass写一个pxtorem函数。因为less不支持函数，所以如果用less需要先安装插件<a href="https://github.com/seven-phases-max/less-plugin-functions" target="_blank" rel="noopener">less-plugin-functions</a>。详细用法看链接的readme.md</p>
<h2 id="用js改变根元素的font-size值"><a href="#用js改变根元素的font-size值" class="headerlink" title="用js改变根元素的font-size值"></a>用js改变根元素的font-size值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFont</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> baseWidth = <span class="number">800</span>; <span class="comment">// 设计稿宽度</span></span><br><span class="line">    <span class="keyword">var</span> baseHeight = <span class="number">1232</span>; <span class="comment">// 设计稿高度</span></span><br><span class="line">    <span class="keyword">var</span> htmlFont = <span class="number">50</span>; <span class="comment">// 预设的根元素html的font-size值</span></span><br><span class="line">    <span class="keyword">var</span> scale = <span class="built_in">Math</span>.min(<span class="built_in">window</span>.innerWidth / baseWidth, <span class="built_in">window</span>.innerHeight / baseHeight);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>)[<span class="number">0</span>].style.fontSize = scale * htmlFont + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>,setFont,<span class="literal">false</span>)</span><br><span class="line">setFont();</span><br></pre></td></tr></table></figure>
<p>其中，800px是设计稿的宽度，50px是预设的html的font-size值。设置50px是因为减少小数位，以及方便通过rem单位的值看出px单位的值，比如，0.12rem即为24px。之后，判断屏幕宽高与设计稿宽高的比，取相差较大的那个进行缩放。比如，屏幕宽度为320时，html的font-size就会设置为320 / 800 * 50 + ‘px’ 即20px。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在此方案中，可灵活使用rem单位，对于不希望等比缩放的属性如font-size可使用px为单位。而对于图片，针对retina屏幕引起的问题，常见的解决方案有根据设备的dpr用图片服务器生成1x、2x、3x的图片等，这里暂不做探究。</p>
]]></content>
      
        <categories>
            
            <category> HTML&amp;CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Less </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS将HTML导出PDF]]></title>
      <url>http://seminelee.github.io/2017/09/03/html2pdf/</url>
      <content type="html"><![CDATA[<h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><p>基于jsPDF和html2canvas两个包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install jspdf –save-dev</span><br><span class="line">npm install html2canvas –save-dev</span><br></pre></td></tr></table></figure></p>
<ul>
<li>jspdf github地址：<a href="https://github.com/MrRio/jsPDF" target="_blank" rel="noopener">https://github.com/MrRio/jsPDF</a></li>
<li>html2canvas github地址：<a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener">https://github.com/niklasvh/html2canvas</a></li>
</ul>
<a id="more"></a>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ol>
<li>算出页数和每一页的宽度和高度</li>
<li>创建一个jsPDF实例。循环，调用html2canvas方法，渲染每一页page为canvas，并获取图片数据插入pdf中。插入之后，调用jsPDF.addPage()方法，加一页。然后，改变dom的css属性top，使其向上移动一页的距离，进入下一页。</li>
<li>当到达最后一页，获取最后一页的图片数据之后调用jsPDF.save()方法，保存pdf文件。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jsPDF <span class="keyword">from</span> <span class="string">'jspdf'</span></span><br><span class="line"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> <span class="string">'html2canvas'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author   <span class="variable">seminelee</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime </span>2017-09-01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param    <span class="type">&#123;object&#125;</span>   </span>dom          dom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param    <span class="type">&#123;number&#125;</span>   </span>domWidth     dom宽度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param    <span class="type">&#123;number&#125;</span>   </span>domHeight    dom高度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param    <span class="type">&#123;number&#125;</span>   </span>windowWidth  window.innerWidth</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param    <span class="type">&#123;number&#125;</span>   </span>windowHeight window.innerHeight</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param    <span class="type">&#123;string&#125;</span>   </span>fileName     导出文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return   <span class="type">&#123;function&#125;</span>              </span>[description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html2pdf = <span class="function"><span class="keyword">function</span>(<span class="params">dom, domWidth, domHeight, windowWidth, windowHeight, fileName</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pageNum = <span class="built_in">Math</span>.ceil(domHeight / windowHeight);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> a4Width = <span class="number">592.28</span>;</span><br><span class="line">    <span class="keyword">const</span> a4Height = <span class="number">841.89</span>;</span><br><span class="line">    <span class="keyword">const</span> imgWidth = domWidth / windowWidth * a4Width;</span><br><span class="line">    <span class="keyword">const</span> imgHeight = domHeight / windowHeight * a4Height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pdf = <span class="keyword">new</span> jsPDF(<span class="string">''</span>, <span class="string">'pt'</span>, <span class="string">'a4'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i= <span class="number">0</span>; i &lt; pageNum; i++) &#123;</span><br><span class="line">        dom.style.top = (- i * windowHeight) + <span class="string">'px'</span>;</span><br><span class="line">        html2canvas(dom, &#123;</span><br><span class="line">            onrendered: <span class="function">(<span class="params">canvas</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> pageData = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">                pdf.addImage(pageData, <span class="string">'JPEG'</span>, <span class="number">0</span>, <span class="number">0</span>, imgWidth, imgHeight );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i == pageNum <span class="number">-1</span>) &#123;</span><br><span class="line">                    pdf.save(fileName)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pdf.addPage();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    dom.style.top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> html2pdf;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Canvas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解webpack中间件]]></title>
      <url>http://seminelee.github.io/2017/07/23/webpack-1/</url>
      <content type="html"><![CDATA[<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>webpack-dev-server是一个小型的Node.js Express服务器，它使用webpack-dev-middleware来服务于webpack的包。在实际操作中，它将在localhost:8080(或其他端口)启动一个express静态资源web服务器，并且以监听模式自动运行webpack，并通过socket.io服务实时监听资源的变化并自动刷新页面（热更新）。<br><a id="more"></a></p>
<h2 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h2><p>webpack-dev-middleware是一个中间件。<br>什么是中间件？中间件(middleware)是一个函数，它可以访问请求对象、响应对象和web应用中处于请求－响应循环流程中的中间件。它的功能包括：执行任何代码、修改请求和响应对象、终结请求－响应循环和调用堆栈中的下一个中间件。<br>具体来说，过程是这样的：webpack本身只负责打包编译的功能，webpack-dev-server是协助我们开发的服务器，它通过webpack-dev-middleware作为中间件，从请求和响应的过程中取得webpack编译好的资料，进行热更新。</p>
<h2 id="webpack-hot-middleware"><a href="#webpack-hot-middleware" class="headerlink" title="webpack-hot-middleware"></a>webpack-hot-middleware</h2><p>webpack-hot-middleware是给webpack-dev-middleware用的，就是让我们的服务器加上热更新的功能。它会订阅监听开发服务器，当更新或异动发生的时候就透过webpack的HMR API来更新。<br>总的来说，webpack-dev-middleware ＋ webpack-hot-middleware ＝ 有热更新功能的webpack开发服务器</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://segmentfault.com/a/1190000005614604?_ea=868190" target="_blank" rel="noopener">手把手深入理解 webpack dev middleware 原理與相關 plugins</a></li>
<li><a href="http://madole.github.io/blog/2015/08/26/setting-up-webpack-dev-middleware-in-your-express-application/" target="_blank" rel="noopener">Setting Up Webpack Dev Middleware in Express</a></li>
<li><a href="http://www.expressjs.com.cn/guide/using-middleware.html" target="_blank" rel="noopener">Express官网－使用中间件</a></li>
<li><a href="https://zhaoda.gitbooks.io/webpack/content/development.html" target="_blank" rel="noopener">Webpack中文指南－开发环境</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自动化构建工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单总结vue-cli中的webpack配置]]></title>
      <url>http://seminelee.github.io/2017/07/09/webpack-2/</url>
      <content type="html"><![CDATA[<h2 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h2><p>随着移动互联的浪潮到来，Webapp模式、SPA受到越来越多的关注。如何在开发环境中组织好碎片化、多格式的代码和资源，并保证他们在浏览器端快速、优雅地加载和更新需要一个模块化的系统。<br><a href="http://webpack.github.io/" target="_blank" rel="noopener">Webpack</a>就是这样的模块化系统。它有以下几个特点：</p>
<ul>
<li>分块传输，按需进行懒加载；</li>
<li>各种格式的资源都是JavaScript模块，可以用<code>require</code>加载；</li>
<li>对代码进行静态分析，分析各模块的类型和依赖关系并交给适合的加载器处理。<a id="more"></a>
</li>
</ul>
<p>具体地说，Webpack的配置主要包括这几个方面：</p>
<ul>
<li>入口：指定我们代码的入口点。它的值是一个字符串或者一个对象（多个入口）。</li>
<li>加载器：因为Webpack本身只能处理JavaScript模块，如果要处理其他类型的文件，就需要使用 loader(加载器)进行转换。加载器将资源转换成JavaScript模块，在打包之前提供预处理。</li>
<li>插件：提供加载器无法做到的其他扩展功能。</li>
<li>出口：包括打包后的文件放置的路径及它们的文件名称。</li>
</ul>
<h2 id="vue-cli版本"><a href="#vue-cli版本" class="headerlink" title="vue-cli版本"></a>vue-cli版本</h2><p>2.8.1<br>（没有使用ESLint，没有安装单元测试，e2e测试）</p>
<h2 id="相关的配置文件目录"><a href="#相关的配置文件目录" class="headerlink" title="相关的配置文件目录"></a>相关的配置文件目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── ...</span><br><span class="line">├── build</span><br><span class="line">│   ├── build.js</span><br><span class="line">│   ├── check-versions.js</span><br><span class="line">│   ├── dev-client.js</span><br><span class="line">│   ├── dev-server.js</span><br><span class="line">│   ├── utils.js</span><br><span class="line">│   ├── vue-loader.conf.js</span><br><span class="line">│   ├── webpack.base.conf.js</span><br><span class="line">│   ├── webpack.dev.conf.js</span><br><span class="line">│   └── webpack.prod.conf.js</span><br><span class="line">├── config</span><br><span class="line">│   ├── dev.env.js</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── prod.env.js</span><br><span class="line">├── ...</span><br><span class="line">├── package.json</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="comment">// 开发环境</span></span><br><span class="line">        <span class="string">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</span><br><span class="line">        <span class="comment">// 生产环境</span></span><br><span class="line">        <span class="string">"build"</span>: <span class="string">"node build/build.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 配置分离，将配置定义在config/下，然后合并成最终的配置，以避免webpack.config.js臃肿</span></span><br><span class="line">        <span class="string">"webpack-merge"</span>: <span class="string">"^2.6.1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="config-index-js"><a href="#config-index-js" class="headerlink" title="config/index.js"></a>config/index.js</h3><p>这个文件里是webpack的基础配置，描述了开发环境和生产环境的两个配置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// see http://vuejs-templates.github.io/webpack for documentation.</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 生产环境</span></span><br><span class="line">  build: &#123;</span><br><span class="line">    env: <span class="built_in">require</span>(<span class="string">'./prod.env'</span>), <span class="comment">// 编译环境</span></span><br><span class="line">    index: path.resolve(__dirname, <span class="string">'../dist/index.html'</span>), <span class="comment">//  输入的文件</span></span><br><span class="line">    assetsRoot: path.resolve(__dirname, <span class="string">'../dist'</span>),  <span class="comment">// 本地系统上的路径，输出的目标文件夹</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>, <span class="comment">// 输出的二级文件夹(自动生成)</span></span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>, <span class="comment">// 发布资源的根目录，可配置为资源服务器url</span></span><br><span class="line">    productionSourceMap: <span class="literal">true</span>, <span class="comment">// 记录文件压缩前后的位置信息</span></span><br><span class="line">    <span class="comment">// 压缩 gzip模式下需要压缩的文件的扩展名</span></span><br><span class="line">    <span class="comment">// Gzip off by default as many popular static hosts such as</span></span><br><span class="line">    <span class="comment">// Surge or Netlify already gzip all static assets for you.</span></span><br><span class="line">    <span class="comment">// Before setting to `true`, make sure to:</span></span><br><span class="line">    <span class="comment">// npm install --save-dev compression-webpack-plugin</span></span><br><span class="line">    productionGzip: <span class="literal">false</span>,</span><br><span class="line">    productionGzipExtensions: [<span class="string">'js'</span>, <span class="string">'css'</span>],</span><br><span class="line">    <span class="comment">// Run the build command with an extra argument to</span></span><br><span class="line">    <span class="comment">// View the bundle analyzer report after build finishes:</span></span><br><span class="line">    <span class="comment">// `npm run build --report`</span></span><br><span class="line">    <span class="comment">// Set to `true` or `false` to always turn it on or off</span></span><br><span class="line">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 开发环境</span></span><br><span class="line">  dev: &#123;</span><br><span class="line">    env: <span class="built_in">require</span>(<span class="string">'./dev.env'</span>),</span><br><span class="line">    port: <span class="number">8080</span>, <span class="comment">// 监听的端口</span></span><br><span class="line">    autoOpenBrowser: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    assetsSubDirectory: <span class="string">'static'</span>, <span class="comment">// 输出的二级文件夹(自动生成)</span></span><br><span class="line">    assetsPublicPath: <span class="string">'/'</span>, <span class="comment">// 发布资源的根目录，可配置为资源服务器url</span></span><br><span class="line">    <span class="comment">// 如设置"/api": "http://localhost:3000"，则请求到 /api/users 现在会被代理到请求 http://localhost:3000/api/users</span></span><br><span class="line">    <span class="comment">// 需要proxyTable代理的接口(可跨域)</span></span><br><span class="line">    proxyTable: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 记录文件压缩前后的位置信息</span></span><br><span class="line">    <span class="comment">// CSS Sourcemaps off by default because relative paths are "buggy"</span></span><br><span class="line">    <span class="comment">// with this option, according to the CSS-Loader README</span></span><br><span class="line">    <span class="comment">// (https://github.com/webpack/css-loader#sourcemaps)</span></span><br><span class="line">    <span class="comment">// In our experience, they generally work as expected,</span></span><br><span class="line">    <span class="comment">// just be aware of this issue when enabling this option.</span></span><br><span class="line">    cssSourceMap: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="build-webpack-base-conf-js"><a href="#build-webpack-base-conf-js" class="headerlink" title="build/webpack.base.conf.js"></a>build/webpack.base.conf.js</h3><p>这个文件是开发环境和生产环境都会用到的基础配置<br>dev-server.js里引入了webpack.dev.conf.js，build.js里引入了webpack.prod.conf.js，而这两个文件(webpack.dev.conf.js和webpack.prod.conf.js)里都引入了webpack.base.conf.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">var</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, <span class="string">'..'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// [[ 1. 配置webpack编译入口 ]]</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// [[ 2. 配置webpack输出路径和命名规则 ]]</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">      ? config.build.assetsPublicPath</span><br><span class="line">      : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// [[ 3. 配置模块resolve规则 ]]</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    <span class="comment">// 创建路径别名</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// [[ 4. 配置不同类型模块的处理规则 ]]</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="build-dev-server-js"><a href="#build-dev-server-js" class="headerlink" title="build/dev-server.js"></a>build/dev-server.js</h3><p>执行<code>npm run dev</code>首先运行dev-server.js这个文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [[ 1. 检查node和npm的版本 ]]</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 2. 引入相关插件和配置 ]]</span></span><br><span class="line"><span class="comment">// 获取配置，获取配置中设置的环境变量</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">if</span> (!process.env.NODE_ENV) &#123;</span><br><span class="line">  process.env.NODE_ENV = <span class="built_in">JSON</span>.parse(config.dev.env.NODE_ENV)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> opn = <span class="built_in">require</span>(<span class="string">'opn'</span>) <span class="comment">// 用于打开默认浏览器打开localhost:端口</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> proxyMiddleware = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>) <span class="comment">// 一个express中间件，用于将http请求代理到其他服务器</span></span><br><span class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.dev.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置监听端口</span></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || config.dev.port</span><br><span class="line"><span class="comment">// 设置是否自动打开浏览器</span></span><br><span class="line"><span class="keyword">var</span> autoOpenBrowser = !!config.dev.autoOpenBrowser</span><br><span class="line"><span class="comment">// 定义HTTP代理表</span></span><br><span class="line"><span class="comment">// https://github.com/chimurai/http-proxy-middleware</span></span><br><span class="line"><span class="keyword">var</span> proxyTable = config.dev.proxyTable</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 3. 创建express服务器和webpack编译器 ]]</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"><span class="keyword">var</span> compiler = webpack(webpackConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 4. 配置开发中间件和热重载中间件 ]]</span></span><br><span class="line"><span class="keyword">var</span> devMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)(compiler, &#123;</span><br><span class="line">  publicPath: webpackConfig.output.publicPath,</span><br><span class="line">  quiet: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)(compiler, &#123;</span><br><span class="line">  log: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 当html-webpack-plugin模版文件发生改变，强制页面重载</span></span><br><span class="line">compiler.plugin(<span class="string">'compilation'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">compilation</span>) </span>&#123;</span><br><span class="line">  compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data, cb</span>) </span>&#123;</span><br><span class="line">    hotMiddleware.publish(&#123; <span class="attr">action</span>: <span class="string">'reload'</span> &#125;)</span><br><span class="line">    cb()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 5. 挂载代理服务和中间件 ]]</span></span><br><span class="line"><span class="built_in">Object</span>.keys(proxyTable).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = proxyTable[context]</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'string'</span>) &#123;</span><br><span class="line">    options = &#123; <span class="attr">target</span>: options &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  app.use(proxyMiddleware(options.filter || context, options))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向不存在的URL</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>)())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用开发中间件，即把webpack编译后输出到内存中的文件资源挂到express服务器上</span></span><br><span class="line">app.use(devMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载热重载</span></span><br><span class="line">app.use(hotMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 6. 配置静态资源 ]]</span></span><br><span class="line"><span class="keyword">var</span> staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</span><br><span class="line">app.use(staticPath, express.static(<span class="string">'./static'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 7. 启动服务器监听特定端口]]</span></span><br><span class="line"><span class="keyword">var</span> uri = <span class="string">'http://localhost:'</span> + port</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _resolve</span><br><span class="line"><span class="keyword">var</span> readyPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  _resolve = resolve</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 8. 打开默认浏览器打开localhost:端口 ]]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'&gt; Starting dev server...'</span>)</span><br><span class="line">devMiddleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt; Listening at '</span> + uri + <span class="string">'\n'</span>)</span><br><span class="line">  <span class="comment">// when env is testing, don't need open it</span></span><br><span class="line">  <span class="keyword">if</span> (autoOpenBrowser &amp;&amp; process.env.NODE_ENV !== <span class="string">'testing'</span>) &#123;</span><br><span class="line">    opn(uri)</span><br><span class="line">  &#125;</span><br><span class="line">  _resolve()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(port)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ready: readyPromise,</span><br><span class="line">  close: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    server.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="其他配置文件"><a href="#其他配置文件" class="headerlink" title="其他配置文件"></a>其他配置文件</h3><ul>
<li>build/webpack.dev.conf.js：在webpack.base.conf的基础上完善了开发环境中需要的配置，如合并配置文件、更友好地输出webpack的警告信息等</li>
<li>build/utils.js：配置静态资源路径，pei z样式的加载器cssLoaders和styleLoaders</li>
<li>build/vue.loader.conf.js：配置了css加载器和编译css之后自动添加前缀(autoprefixer)</li>
</ul>
<h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><h3 id="build-build-js"><a href="#build-build-js" class="headerlink" title="build/build.js"></a>build/build.js</h3><p>执行<code>npm run build</code>首先运行build.js这个文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [[ 1. 检查NodeJS和npm的版本 ]]</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)()</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>) <span class="comment">// 用于开启loading动画</span></span><br><span class="line"><span class="keyword">var</span> rm = <span class="built_in">require</span>(<span class="string">'rimraf'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 2. 开启loading动画 ]]</span></span><br><span class="line"><span class="keyword">var</span> spinner = ora(<span class="string">'building for production...'</span>)</span><br><span class="line">spinner.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[ 3. 删除创建打包的目标文件夹]]</span></span><br><span class="line">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  <span class="comment">// [[ 4. webpack编译 ]]</span></span><br><span class="line">  webpack(webpackConfig, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">    spinner.stop()</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="comment">// 输出相关信息</span></span><br><span class="line">    process.stdout.write(stats.toString(&#123;</span><br><span class="line">      colors: <span class="literal">true</span>,</span><br><span class="line">      modules: <span class="literal">false</span>,</span><br><span class="line">      children: <span class="literal">false</span>,</span><br><span class="line">      chunks: <span class="literal">false</span>,</span><br><span class="line">      chunkModules: <span class="literal">false</span></span><br><span class="line">    &#125;) + <span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(chalk.cyan(<span class="string">'  Build complete.\n'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.yellow(</span><br><span class="line">      <span class="string">'  Tip: built files are meant to be served over an HTTP server.\n'</span> +</span><br><span class="line">      <span class="string">'  Opening index.html over file:// won\'t work.\n'</span></span><br><span class="line">    ))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="其他配置文件-1"><a href="#其他配置文件-1" class="headerlink" title="其他配置文件"></a>其他配置文件</h3><ul>
<li>build/webpack.prod.conf.js：在webpack.base.conf的基础上完善了生产环境中需要的配置，如合并基础的webpack配置、配置webpack的输出、丑化压缩代码、抽离css文件等</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhaoda.gitbooks.io/webpack/content/" target="_blank" rel="noopener">webpack中文指南</a></li>
<li><a href="https://github.com/hehongwei44/my-blog/issues/205" target="_blank" rel="noopener">vue-cli的webpack模板项目配置文件分析</a></li>
</ul>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>评论系统换成了最近颇受关注的<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">Gitment</a> 目前看来很赞^ ^</p>
]]></content>
      
        <categories>
            
            <category> 自动化构建工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js学习笔记二：vue-router2.0快速建构SPA项目]]></title>
      <url>http://seminelee.github.io/2017/04/10/vue-2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>时隔几个月，决定再写一篇关于Vue.js学习的文章（上一篇在<a href="https://seminelee.github.io/2016/08/18/vue-1/">这里</a>）。<br><a id="more"></a><br>借此文来总结一下怎么样用vue2.0+webpack快速地搭建SPA的开发框架。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 vue-cli</span></span><br><span class="line">$ npm install --global vue-cli</span><br><span class="line"><span class="comment"># 创建一个基于 webpack 模板的新项目，中途会问你Install vue-router? (Y/n)填Y安装</span></span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"><span class="comment"># 安装依赖，走你</span></span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></p>
<p>国内可以使用cnpm命令更节省时间。</p>
<p>简单说一下package.json里的部分配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// npm run dev 开发环境，浏览器打开http://localhost:8080/</span></span><br><span class="line">    <span class="comment">// npm run build 生产环境</span></span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</span><br><span class="line">        <span class="string">"build"</span>: <span class="string">"node build/build.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="comment">// 打包编译</span></span><br><span class="line">        <span class="string">"webpack"</span>: <span class="string">"^2.2.1"</span>,</span><br><span class="line">        <span class="comment">// 中间件，webpack 热重载(开发时实时刷新)</span></span><br><span class="line">        <span class="string">"webpack-dev-middleware"</span>: <span class="string">"^1.10.0"</span>,</span><br><span class="line">        <span class="string">"webpack-hot-middleware"</span>: <span class="string">"^2.16.1"</span>,</span><br><span class="line">        <span class="comment">// 配置分离，将配置定义在config/下，然后合并成最终的配置，以避免webpack.config.js臃肿</span></span><br><span class="line">        <span class="string">"webpack-merge"</span>: <span class="string">"^2.6.1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以在config/index.js中修改端口号和更改打包文件的存放位置。</p>
<h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>新建好必要的文件，components/文件结构如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── hello.vue</span><br><span class="line">├── about.vue</span><br><span class="line">├── notfound.vue</span><br><span class="line">├── posts</span><br><span class="line">│   ├── hotest.vue</span><br><span class="line">│   └── latest.vue</span><br><span class="line">└── posts.vue</span><br></pre></td></tr></table></figure></p>
<p>在src/router/index.js中进行路由配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'@/components/hello'</span>;</span><br><span class="line"><span class="keyword">import</span> Posts <span class="keyword">from</span> <span class="string">'@/components/posts.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Hotest <span class="keyword">from</span> <span class="string">'@/components/posts/hotest'</span>;</span><br><span class="line"><span class="keyword">import</span> Latest <span class="keyword">from</span> <span class="string">'@/components/posts/latest'</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'@/components/about'</span>;</span><br><span class="line"><span class="keyword">import</span> Notfound <span class="keyword">from</span> <span class="string">'@/components/notfound'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载根实例</span></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 router 实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    <span class="comment">// 定义路由</span></span><br><span class="line">    <span class="comment">// 每个路由应该映射一个组件。</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'Hello'</span>,</span><br><span class="line">        component: Hello</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/posts'</span>,</span><br><span class="line">        name: <span class="string">'posts'</span>,</span><br><span class="line">        component: Posts,</span><br><span class="line">        <span class="comment">// 嵌套路由</span></span><br><span class="line">        children: [</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">'hotest'</span>, <span class="attr">component</span>: Hotest &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">'latest'</span>, <span class="attr">component</span>: Latest &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/about'</span>,</span><br><span class="line">        name: <span class="string">'about'</span>,</span><br><span class="line">        component: About</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 其余的不能匹配到的路由</span></span><br><span class="line">        path: <span class="string">'*'</span>,</span><br><span class="line">        component: Notfound</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>App.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- "是否激活" 默认类名的依据是 inclusive match（全包含匹配）。按照这个规则，&lt;router-link to="/"&gt; 将会点亮各个路由！想要链接使用 "exact 匹配模式"，则使用 exact 属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">exact</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/posts"</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>posts.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"posts"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/posts/hotest"</span>&gt;</span>最热文章<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/posts/latest"</span>&gt;</span>最新文章<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>其他组件就不一一细述了。</p>
<h2 id="视图部分"><a href="#视图部分" class="headerlink" title="视图部分"></a>视图部分</h2><p>现在打开浏览器可以看到是这个样子的。<br>首页 /<br><img src="/static/2017/04/vue2-1.jpeg" alt="首页"><br>最热文章 /posts/hotest<br><img src="/static/2017/04/vue2-2.jpeg" alt="最热文章"></p>
<h3 id="引入iView"><a href="#引入iView" class="headerlink" title="引入iView"></a>引入iView</h3><p>有点丑对不对，这里为大家推荐一套Vue.js 的高质量 UI 组件库，<a href="https://www.iviewui.com/docs/guide/install" target="_blank" rel="noopener">iview</a>。<br>这套组件库最近针对vue2.0也推出了iview2.0版本，且开源。我们这里用一下它的导航组件。<br>首先安装一下iview<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install iview --save-dev</span><br></pre></td></tr></table></figure></p>
<p>引入iView<br>src/main.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'iview/dist/styles/iview.css'</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></p>
<p>src/router/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> iView <span class="keyword">from</span> <span class="string">'iview'</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Vue.use(Router);</span><br><span class="line">Vue.use(iView);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><p>现在可以尽情使用UI组件啦<br>App.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu</span> <span class="attr">mode</span>=<span class="string">"horizontal"</span> <span class="attr">theme</span>=<span class="string">"dark"</span> <span class="attr">active-name</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Menu-item</span> <span class="attr">name</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">exact</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-paper"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Menu-item</span> <span class="attr">name</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/posts"</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-people"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Menu-item</span> <span class="attr">name</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"settings"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>posts.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"posts"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Menu</span> <span class="attr">mode</span>=<span class="string">"horizontal"</span> <span class="attr">theme</span>=<span class="string">"light"</span> <span class="attr">active-name</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Menu-item</span> <span class="attr">name</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/posts/hotest"</span>&gt;</span>最热文章<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Menu-item</span> <span class="attr">name</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/posts/latest"</span>&gt;</span>最新文章<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>基本上就好了，但是我们发现一个问题，刷新的时候导航不能实时显示当前路由所对应的菜单。优化如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu</span> <span class="attr">mode</span>=<span class="string">"horizontal"</span> <span class="attr">theme</span>=<span class="string">"dark"</span> <span class="attr">:active-name</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Menu-item</span> <span class="attr">name</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">exact</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-paper"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Menu-item</span> <span class="attr">name</span>=<span class="string">"/posts/hotest"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/posts/hotest"</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"ios-people"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Menu-item</span> <span class="attr">name</span>=<span class="string">"/about"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">"settings"</span>&gt;</span><span class="tag">&lt;/<span class="name">Icon</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Menu-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'app'</span>,</span></span><br><span class="line">  mounted()&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> rootKey = <span class="keyword">this</span>.$route.path.split(<span class="string">'/'</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.key = rootKey == <span class="string">''</span> ? <span class="string">'/'</span> : rootKey;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      key: <span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* ... */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">li</span><span class="selector-class">.ivu-menu-item</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">  display: inline-block;</span><br><span class="line">  color: inherit;</span><br><span class="line">  height: 60px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>posts.vue同理</p>
<h2 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h2><ul>
<li>ERROR in ./src/view/BootPage.vue<br>template syntax error Component template should contain exactly one root element:…<br>实际意思：在vue-router2.0中，事件template的根节点只能有一个。</li>
<li>[Vue warn]: Failed to resolve directive: link<br>(found in anonymous component - use the “name” option for better debugging messages.)<br>实际意思：在vue-router1.0和vue-router2.0中有些指令和语法已经发生了变化。</li>
</ul>
<h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul>
<li>体验地址：<a href="http://119.29.142.213/vue2demo/#/posts/hotest" target="_blank" rel="noopener">http://119.29.142.213/vue2demo/#/posts/hotest</a></li>
<li>代码地址：<a href="https://github.com/seminelee/vue2-demo.git" target="_blank" rel="noopener">https://github.com/seminelee/vue2-demo.git</a></li>
</ul>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>多说崩了，换成了<a href="https://www.drixn.com/2017/LiveReCommentsSystem/" target="_blank" rel="noopener">来必力</a>，虽然是韩国的-_-但是看起来不会轻易垮。之前的评论全没有了= =深感抱歉<br>以后有机会想做一个自己网站用的评论系统&gt; v &lt;（不要乱立flag啊少女）</p>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php学习笔记之实战小demo]]></title>
      <url>http://seminelee.github.io/2017/01/17/phpdemo/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>都快两个月没写博客啦！我最近在学后端的东西，借此文章做记录，这也是督促自己学习、积累的一种方式吧。<br><a id="more"></a></p>
<h2 id="利用GD库制作验证码"><a href="#利用GD库制作验证码" class="headerlink" title="利用GD库制作验证码"></a>利用GD库制作验证码</h2><p>以下是体验地址：</p>
<ul>
<li>普通验证码：<a href="http://119.29.142.213/captcha/form.php" target="_blank" rel="noopener">http://119.29.142.213/captcha/form.php</a></li>
<li>图片验证码：<a href="http://119.29.142.213/captcha/imgCaptcha/form.php" target="_blank" rel="noopener">http://119.29.142.213/captcha/imgCaptcha/form.php</a></li>
<li>中文验证码：<a href="http://119.29.142.213/captcha/cnCaptcha/form.php" target="_blank" rel="noopener">http://119.29.142.213/captcha/cnCaptcha/form.php</a></li>
</ul>
<p>主要思路：</p>
<ol>
<li>利用GD库绘出验证码、干扰点和干扰线，主要用到imagecreatetruecolor、imagecolorallocate、imagefill、imagestring、imagesetpixel、imageline等API。</li>
<li>将验证码存在$_SESSION[‘authcode’]中，利用imagepng()以 PNG 格式将所绘的图像输出到浏览器。</li>
<li>在form.php中写好前端界面，将captcha.php的路径写到显示验证码图片的<code>&lt;img&gt;</code>的src属性中，实现输入验证码后点击提交跳转到form_ok.php中。</li>
<li>在form_ok.php中对比$_SESSION[‘authcode’]和$_POST[‘authcode’]，显示提示信息。</li>
<li>图片验证码只是把随机数据写成图片与图片名字的数组，返回图片文件；中文验证码则是把随机数据改为由汉字组成的字符串。</li>
</ol>
<p><a href="https://github.com/seminelee/phpdemo/tree/master/captcha" target="_blank" rel="noopener">代码github地址</a></p>
<h2 id="写一个cgi"><a href="#写一个cgi" class="headerlink" title="写一个cgi"></a>写一个cgi</h2><p>cgi(Common Gateway Interface)，公共网关接口，是HTTP服务器与你的或其他机器上的程序进行“交谈”的一种工具。工作原理是这样的：浏览器通过HTML表单或其他方式请求指向一个CGI应用程序的URL，服务器收发请求后执行CGI，把结果格式化为网络服务器和浏览器能够理解的文档如HTML、json，最后返回到浏览器。cgi可以用很多种语言编写，这里用php编写并用到了thinkphp框架。</p>
<p>主要思路：</p>
<ol>
<li>新建一个MySQL数据表，有两个字段，分别是name和favor，用来存储数据。<br><img src="/static/2017/03/tb_fruit.jpeg" alt="tb_fruit"></li>
<li><p>在Lib/Action/IndexAction.class.php中写两个方法，分别是create和submit。create返回下拉列表的数据和下拉列表默认选中的value；submit接收浏览器传送的数据，写入表，返回成功的消息。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $origin=<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_ORIGIN'</span>])?$_SERVER[<span class="string">'HTTP_ORIGIN'</span>]:<span class="string">''</span>;</span><br><span class="line">        <span class="comment">/************** 获取客户端的Origin域名 **************/</span></span><br><span class="line">        header(<span class="string">'Access-Control-Allow-Origin:'</span>.$origin);</span><br><span class="line">        header(<span class="string">'content-type:application/json;charset=UTF-8'</span>);</span><br><span class="line"></span><br><span class="line">        $name = $_POST[<span class="string">"name"</span>];</span><br><span class="line">        $favor = $_POST[<span class="string">"fruit"</span>];</span><br><span class="line">        $data = <span class="keyword">array</span>(</span><br><span class="line">          <span class="string">'name'</span> =&gt; $name,</span><br><span class="line">          <span class="string">'favor'</span> =&gt; $favor</span><br><span class="line">        );</span><br><span class="line">        $tb = M(<span class="string">'fruit'</span>);</span><br><span class="line">        <span class="keyword">if</span>($tb-&gt;data($data)-&gt;add())&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">'success'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">echo</span> $_POST[<span class="string">'name'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $jsonp = $_GET[<span class="string">"callback"</span>];</span><br><span class="line">        $default = <span class="string">"banana"</span>;</span><br><span class="line">        $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">"opts"</span> =&gt; <span class="keyword">array</span>(<span class="string">"apple"</span>  =&gt; <span class="string">"苹果"</span>,<span class="string">"banana"</span> =&gt; <span class="string">"香蕉"</span>,<span class="string">"watermelon"</span> =&gt; <span class="string">"西瓜"</span>),</span><br><span class="line">            <span class="string">"default"</span> =&gt; $default</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> $jsonp.<span class="string">'('</span>.json_encode($data).<span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地新建一个html，写一个表单，利用ajax发送get请求（来获取初始化下拉列表的数据）和post请求（提交表单）。</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>最喜爱的水果：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"favorSelect"</span> <span class="attr">name</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">style</span>=<span class="string">"display: block; margin: 40px 0 0;"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.getJSON(<span class="string">'http://119.29.142.213/thinkphpdemo/index.php?m=Index&amp;a=create&amp;callback=?'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> opts = data[<span class="string">'opts'</span>];</span><br><span class="line">        <span class="keyword">for</span>(val <span class="keyword">in</span> opts)&#123;</span><br><span class="line">            $(<span class="string">'#favorSelect'</span>).append(<span class="string">'&lt;option value="'</span>+val+<span class="string">'"&gt;'</span>+opts[val]+<span class="string">'&lt;/option&gt;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">'#favorSelect'</span>).val(data[<span class="string">'default'</span>]);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#submit'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> temp = $(<span class="string">'#form'</span>).serialize().split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">var</span> key, val;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;temp.length; i++)&#123;</span><br><span class="line">        key = temp[i].split(<span class="string">'='</span>)[<span class="number">0</span>];</span><br><span class="line">        val = temp[i].split(<span class="string">'='</span>)[<span class="number">1</span>];</span><br><span class="line">        data[key] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    $.post(<span class="string">'http://119.29.142.213/thinkphpdemo/'</span>, data, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>P.S.没有写样式有点丑请不要介意= =</p>
]]></content>
      
        <categories>
            
            <category> 后端知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最优路径算法之小游戏实战]]></title>
      <url>http://seminelee.github.io/2016/11/13/shortest/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要做一个关于若干点的最短连线的小游戏，才发现自己关于算法方面的知识有多不扎实＝＝ 吃一堑，长一智。借此文简单总结一下。若有大神无意看见此文，请轻拍。<br><a id="more"></a></p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>随机给出若干点，求这些点的最短连线。可以延伸出一个小游戏，给出若干点，让用户在一个面板上绘线将点连起，判断是否最短路径，给出提示。<br>实质是有权无向完全图中，没有特定源点的最短路径算法。</p>
<h2 id="Dijkstra算法和Floyd算法"><a href="#Dijkstra算法和Floyd算法" class="headerlink" title="Dijkstra算法和Floyd算法"></a>Dijkstra算法和Floyd算法</h2><p>搜索资料，Dijkstra算法和Floyd算法是比较接近需求的算法。</p>
<h3 id="stra算法"><a href="#stra算法" class="headerlink" title="stra算法"></a>stra算法</h3><p>Dijkstra算法是典型的单源最短路径算法，用于计算一个节点到其他所有节点的最短路径。主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止。<br>算法思路：</p>
<ol>
<li>初始时，S只包含源点，即S＝{v}，v的距离为0。U包含除v外的其他顶点，即U={其余顶点}，若v与U中顶点k有边，则&lt;k,v&gt;正常有权值，若k不是v的出边邻接点，则&lt;k,v&gt;权值为∞。</li>
<li>从U中选取一个距离v最小的顶点k，把k，加入S中。</li>
<li>以k为新考虑的中间点，修改U中各顶点的距离；若从源点v到顶点u的距离（经过顶点k）比原来距离（不经过顶点k）短，则修改顶点u的距离值，修改后的距离值的顶点k的距离加上边上的权。</li>
<li>重复步骤2和3直到所有顶点都包含在S中。</li>
</ol>
<p><img src="/static/2016/11/shortest-1.gif" alt="Dijkstra算法"></p>
<h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><p>Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题。<br>算法思路：</p>
<ol>
<li>从任意一条单边路径开始。所有两点之间的距离是边的权，如果两点之间没有边相连，则权为无穷大。</li>
<li>对于每一对顶点u和v，看看是否存在一个顶点k使得从u到k再到v比己知的路径更短。如果是更新它。</li>
</ol>
<p>关于Dijkstra算法和Floyd算法详细见<a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/07/31/2615833.html" target="_blank" rel="noopener">最短路径—Dijkstra算法和Floyd算法</a></p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>借鉴Dijkstra算法和Floyd算法思路，结合需求，开始实现。</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol>
<li>随机生成若干个点，每个点有x坐标、y坐标、是否被访问过visited三个属性。</li>
<li>用勾股定理算出任意两点的直线距离，生成二维矩阵</li>
<li>将源点记为uNext，从所有连线选择一条与uNext的最短连线，将线上的此点(重新记为uNext)放入U中，将最短连线放入到一个数组中。</li>
<li>重复步骤3，直到所有点都被放进U，计算数组中的路径和，返回最短路径。</li>
<li>遍历点，求出各点作为源点时的最短路径，比较，得出最终的最短路径。</li>
</ol>
<h3 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h3><p>声明类Graph及其属性和方法。实现随机生成点。做一些限制，使各点不会过于聚集。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span>(<span class="params">v,w</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.vertices = v;</span><br><span class="line">  <span class="keyword">this</span>.points = []; <span class="comment">// V 总的点集</span></span><br><span class="line">  <span class="keyword">this</span>.u = []; <span class="comment">// U 点集</span></span><br><span class="line">  <span class="keyword">this</span>.width = w;</span><br><span class="line">  <span class="keyword">this</span>.pythagorean = pythagorean; <span class="comment">// 勾股定理</span></span><br><span class="line">  <span class="keyword">this</span>.getPoints = getPoints;</span><br><span class="line">  <span class="keyword">this</span>.matrix = [];</span><br><span class="line">  <span class="keyword">this</span>.getMatrix = getMatrix;</span><br><span class="line">  <span class="keyword">this</span>.path = [];</span><br><span class="line">  <span class="keyword">this</span>.pathSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.getPath = getPath;</span><br><span class="line">  <span class="keyword">this</span>.getTempPath = getTempPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">  <span class="keyword">this</span>.visited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPoints</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.points = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.points[i] = <span class="keyword">new</span> Point(<span class="built_in">Math</span>.ceil(<span class="number">15</span>+<span class="built_in">Math</span>.random()*(<span class="keyword">this</span>.width<span class="number">-30</span>)),<span class="built_in">Math</span>.ceil(<span class="number">15</span>+<span class="built_in">Math</span>.random()*(<span class="keyword">this</span>.width<span class="number">-30</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.vertices; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k = j+<span class="number">1</span>; k &lt; <span class="keyword">this</span>.vertices; k++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(<span class="keyword">this</span>.points[j].x - <span class="keyword">this</span>.points[k].x) &lt; <span class="number">30</span> &amp;&amp; <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.points[j].y - <span class="keyword">this</span>.points[k].y) &lt; <span class="number">30</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.getPoints();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>用勾股定理算出任意两点的直线距离，生成二维矩阵。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a^2 + b^2 = c^2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pythagorean</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="keyword">this</span>.points[a].x-<span class="keyword">this</span>.points[b].x,<span class="number">2</span>) + <span class="built_in">Math</span>.pow(<span class="keyword">this</span>.points[a].y-<span class="keyword">this</span>.points[b].y,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMatrix</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> min = <span class="number">999999</span>;</span><br><span class="line">  <span class="keyword">var</span> pointI, pointJ;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.matrix[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.vertices; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === j) &#123;</span><br><span class="line">        <span class="keyword">this</span>.matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.matrix[i][j] = <span class="keyword">this</span>.pythagorean(i,j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.matrix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>将源点记为uNext，从所有连线选择一条与uNext的最短连线，将线上的此点(重新记为uNext)放入U中，将最短连线放入到一个数组中。重复此步，直到所有点都被放进U，计算数组中的路径和，返回最短路径。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTempPath</span>(<span class="params">uNext</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.path = [];</span><br><span class="line">  <span class="keyword">this</span>.u = [];</span><br><span class="line">  <span class="keyword">var</span> pathTempSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="keyword">this</span>.vertices; k++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.points[k].visited = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.u.push(uNext);</span><br><span class="line">  <span class="keyword">this</span>.points[uNext].visited = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">this</span>.u.length !== <span class="keyword">this</span>.vertices) &#123;</span><br><span class="line">    <span class="keyword">var</span> min = <span class="number">999999</span>;</span><br><span class="line">    <span class="keyword">var</span> tempNext;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.points[i].visited === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.matrix[uNext][i] &lt; min) &#123;</span><br><span class="line">          min = <span class="keyword">this</span>.matrix[uNext][i];</span><br><span class="line">          tempNext = i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    uNext = tempNext;</span><br><span class="line">    <span class="keyword">this</span>.u.push(uNext);</span><br><span class="line">    <span class="keyword">this</span>.path.push(min);</span><br><span class="line">    <span class="keyword">this</span>.points[uNext].visited = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.path.length; j++) &#123;</span><br><span class="line">    pathTempSum += <span class="keyword">this</span>.path[j];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pathTempSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>遍历点，求出各点作为源点时的最短路径，比较，得出最终的最短路径。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPath</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> min = <span class="number">9999999</span>;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> shortest;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.vertices; i++) &#123;</span><br><span class="line">    temp = <span class="keyword">this</span>.getTempPath(i);</span><br><span class="line">    <span class="keyword">if</span>(temp &lt; min) &#123;</span><br><span class="line">      min = temp;</span><br><span class="line">      shortest = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.pathSum = min;</span><br><span class="line">  <span class="keyword">this</span>.getTempPath(shortest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="结合canvas做出小游戏"><a href="#结合canvas做出小游戏" class="headerlink" title="结合canvas做出小游戏"></a>结合canvas做出小游戏</h2><p>主要思路：</p>
<ol>
<li>new一个Graph对象。利用canvas画出随机生成的点。</li>
<li>监听touchstart、touchmove、touchend事件。实现随着触摸绘线。touchmove事件中判断是否经过图中的点并用数组记录。touchend事件触发后经过的点样式发生变化，点与点间用直线连起来。</li>
<li>点击开始检测，计算经过的路径，并比较经过的路径和最短的路径，分别给出提示。</li>
</ol>
<p>demo地址：<a href="http://119.29.142.213/shortest" target="_blank" rel="noopener">http://119.29.142.213/shortest</a><br><img src="/static/2016/11/shortest-2.png" alt="demo"></p>
<h2 id="6-不足之处"><a href="#6-不足之处" class="headerlink" title="6 不足之处"></a>6 不足之处</h2><ul>
<li>UI方面待实现：经过点时有呼吸灯效果；画布边缘不能绘线等；错误后显示重新开始按钮</li>
<li>声明了较多数组和用了较多循环。我再想想= =b</li>
</ul>
<h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7 参考"></a>7 参考</h2><ul>
<li><a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/07/31/2615833.html" target="_blank" rel="noopener">最短路径—Dijkstra算法和Floyd算法</a></li>
<li><a href="http://www.108js.com/article/article5/50041.html?id=898" target="_blank" rel="noopener">Floyd最短路算法及javascript实现</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> dijkstra算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端重构遇到的坑（长期更新）]]></title>
      <url>http://seminelee.github.io/2016/11/04/experience-1/</url>
      <content type="html"><![CDATA[<p>这篇文章用来记录平时移动端重构遇到的坑，以备忘，长期更新。<br><a id="more"></a></p>
<h2 id="键盘遮挡影响布局"><a href="#键盘遮挡影响布局" class="headerlink" title="键盘遮挡影响布局"></a>键盘遮挡影响布局</h2><p>坑：ios下fixed属性失效。在编辑框输入内容时会弹出软键盘，而手机屏幕区域有限往往会遮住输入界面。<br>如下面截图，图片来自<a href="http://www.cnblogs.com/cmblogs/p/4448336.html" target="_blank" rel="noopener">%幻#影% - 博客园</a><br><img src="/static/2016/11/experience-1-2.jpg" alt="键盘遮挡影响布局"><br>fix：</p>
<ul>
<li><p>方法一：css 设置flex:1</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; <span class="comment">/* 父类 */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container-content</span> &#123; <span class="comment">/* 不想被遮挡的内容所在类 */</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：js 监听输入框focus事件，聚焦时上移页面，失焦时恢复原状</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).on(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.container-content'</span>).css(<span class="string">'transform'</span>,<span class="string">'translateY(-50%)'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'.container-content'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.container-content'</span>).css(<span class="string">'transform'</span>,<span class="string">'translateY(0)'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="在微信等webview中无法修改document-title"><a href="#在微信等webview中无法修改document-title" class="headerlink" title="在微信等webview中无法修改document.title"></a>在微信等webview中无法修改document.title</h2><p>坑：会碰到需要动态修改document.title的需求，这时会遇到在微信等webview中无法修改document.title的坑<br>fix：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hack在微信等webview中无法修改document.title的情况</span></span><br><span class="line"><span class="keyword">var</span> $iframe = $(<span class="string">'&lt;iframe src="#"&gt;&lt;/iframe&gt;'</span>),</span><br><span class="line">    $body = $(<span class="string">'body'</span>);</span><br><span class="line">$iframe.on(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $iframe.off(<span class="string">'load'</span>).remove();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;).appendTo($body);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">iframe</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图片边缘出现截断情况"><a href="#图片边缘出现截断情况" class="headerlink" title="图片边缘出现截断情况"></a>图片边缘出现截断情况</h2><p>坑：在plus机上出现图片边缘截断情况。图标像素是奇数，前辈说移动端的图标都要求是偶数才不会出现问题。<br><img src="/static/2016/11/experience-1-1.jpeg" alt="图片边缘截断"><br>fix：编辑图像大小，改成偶数咯<br>P.S.也有可能是用了rem的缘故。较小的背景图（比如一些 icon）的 background-size 不要使用具体 rem 数值，裁剪后会出现边缘丢失。应使用与元素等尺寸切图，设定 background-size: contain|cover 来缩放。</p>
<h2 id="安卓机丢掉rem小数部分"><a href="#安卓机丢掉rem小数部分" class="headerlink" title="安卓机丢掉rem小数部分"></a>安卓机丢掉rem小数部分</h2><p>坑：IOS对小数的像素很敏感但是Android就不是，一些安卓机会丢掉rem小数部分<br>fix：</p>
<ul>
<li>根元素设成50px，以50px为基准，即好算，而且小数位会少一点。</li>
<li>残暴点的就不用rem，用px，再想其他的自适应方案。</li>
</ul>
<h2 id="input-type-”file”-的change事件只调用一次"><a href="#input-type-”file”-的change事件只调用一次" class="headerlink" title="input[type=”file”]的change事件只调用一次"></a>input[type=”file”]的change事件只调用一次</h2><p>调用一次之后发现输入框没有绑定change事件，所以在回调函数内再绑定一次change事件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input[type="file"]'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  e.stopPropagation();</span><br><span class="line">  <span class="keyword">var</span> $target = $(e.target);</span><br><span class="line">  <span class="keyword">var</span> fileList = e.target.files||e.dataTransfer.files;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  $target.replaceWith(<span class="string">'&lt;input type="file" class="fd-file" data-fd="file" id="file"'</span>+<span class="built_in">Math</span>.random()+<span class="string">'&gt;'</span>);</span><br><span class="line">  $(<span class="string">'input[type="file"'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $target = $(e.target);</span><br><span class="line">    <span class="keyword">var</span> fileList = e.target.files||e.dataTransfer.files;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://segmentfault.com/q/1010000002926291" target="_blank" rel="noopener">用document.title=“xxx”动态修改title，在ios的微信下面不生效</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> HTML&amp;CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 重构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ajax与跨域]]></title>
      <url>http://seminelee.github.io/2016/09/20/ajax/</url>
      <content type="html"><![CDATA[<p>最近想整理一下ajax与跨域方面的知识。<br>首先，我来复习一下ajax的写法，大神们自行绕过。<br><a id="more"></a></p>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。它是在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的艺术。</p>
<h3 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">			alert(xhr.responseText);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			alert(<span class="string">"request was unsuccesful: "</span> + xhr.status);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"postexample.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line">xhr.send(serialize(form));</span><br><span class="line"></span><br><span class="line"><span class="comment">// xhr.open("get", url);</span></span><br><span class="line"><span class="comment">// xhr.send(null);</span></span><br></pre></td></tr></table></figure>
<h3 id="jquery-ajax-常用写法"><a href="#jquery-ajax-常用写法" class="headerlink" title="jquery ajax 常用写法"></a>jquery ajax 常用写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	method: <span class="string">"POST"</span>,</span><br><span class="line">	url: <span class="string">"example.php"</span>,</span><br><span class="line">	<span class="comment">// method: "GET",</span></span><br><span class="line">	<span class="comment">// url: "example.php?number=" + $("#keyword").val(),</span></span><br><span class="line">	dataType: <span class="string">"json"</span>,</span><br><span class="line">	data: &#123;</span><br><span class="line">		name:$(<span class="string">"#name"</span>).val(),</span><br><span class="line">		number:$(<span class="string">"#number"</span>).val(),</span><br><span class="line">		sex:$(<span class="string">"#sex"</span>).val(),</span><br><span class="line">		job:$(<span class="string">"#job"</span>).val()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">"Data saved:"</span> + msg);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Request failed: "</span>+ textStatus);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Promise对象实现Ajax"><a href="#Promise对象实现Ajax" class="headerlink" title="Promise对象实现Ajax"></a>Promise对象实现Ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">		xhr.open(<span class="string">"get"</span>, url);</span><br><span class="line">		xhr.onreadystatechange = handler;</span><br><span class="line">		xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">		xhr.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">		xhr.send();</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(xhr.onreadyState !== <span class="number">4</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">				resolve(<span class="keyword">this</span>.response);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">"/example.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Contenes: '</span> + json); <span class="comment">// success</span></span><br><span class="line">&#125;), <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"出错了"</span>, error); <span class="comment">// failure</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>什么是跨域？什么是同源策略(same-origin policy)？<br>浏览器的同源策略，限制了来自不同源的”document”或脚本，是浏览器为安全性考虑实施的安全策略。URL由协议、域名、端口和路径组成，如果两个URL的协议、域名和端口相同，则表示他们同源。如果协议、域名和端口其中有一个不同，就被当作是跨域。</p>
<h3 id="同源策略的限制"><a href="#同源策略的限制" class="headerlink" title="同源策略的限制"></a>同源策略的限制</h3><ul>
<li>Cookie、LoalStorage无法读取</li>
<li>DOM无法获得</li>
<li>Ajax请求不能发送</li>
</ul>
<p>如何打破这些限制呢？</p>
<ul>
<li>document.domain：两个网页一级域名相同、二级域名不同则可设置相同的document.domain共享cookie。</li>
<li>window.name：通过在子窗口（iframe窗口、window.open打开的窗口）将信息写入window.name，跳回父窗口，父窗口读取window.name，则可获取对方的DOM。</li>
<li>window.postMessage：HTML5的跨文档通信 API（Cross-document messaging），允许跨窗口通信，包括读写localDtorage</li>
</ul>
<p>以上不作细说，以下细说ajax跨域的方法：</p>
<h2 id="Ajax跨域的常用方法"><a href="#Ajax跨域的常用方法" class="headerlink" title="Ajax跨域的常用方法"></a>Ajax跨域的常用方法</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSON with padding（填充式JSON/参数式JSON），即被包含在函数调用中的JSON。JSONP由回调函数和数据组成。<br>它的基本思想是，由于<code>&lt;img&gt;</code>、<code>&lt;script&gt;</code>都能不受限制地从其他域加载资源，网页通过添加一个<code>&lt;script&gt;</code>元素，向服务器请求JSON数据，这种做法不受同源政策限制。服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。<br>JS代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addScriptTag</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">	script.setAttribute(<span class="string">"type"</span>,<span class="string">"text/javascript"</span>);</span><br><span class="line">	script.src = src;</span><br><span class="line">	<span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'success:'</span> + data.msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	addScriptTag(<span class="string">"http://119.29.142.213/static/201609/demo.php?callback=foo"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以用jQuery实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	type: <span class="string">"GET"</span>,</span><br><span class="line">	<span class="comment">//jsonp方式只支持GET请求</span></span><br><span class="line">	url: <span class="string">"http://119.29.142.213/static/201609/demo.php"</span>,</span><br><span class="line">	dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">	jsonp: <span class="string">"callback"</span>,</span><br><span class="line">	success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(data.success)&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(data.msg);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"出现错误："</span> + data.msg);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	error: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR</span>)</span>&#123;</span><br><span class="line">		alert(<span class="string">"发生错误:"</span> + jqXHR.status)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>php代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$jsonp = $_GET[<span class="string">"callback"</span>];</span><br><span class="line">	$result = $jsonp . <span class="string">'(&#123;"success":true,"msg":"msg from server"&#125;)'</span>;</span><br><span class="line">	<span class="keyword">echo</span> $result;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="CORS-Cross-Origin-Resource-Share"><a href="#CORS-Cross-Origin-Resource-Share" class="headerlink" title="CORS(Cross Origin Resource Share)"></a>CORS(Cross Origin Resource Share)</h3><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。只需要服务器实现CORS接口就可以了。<br>我尝试用php实现CORS接口，加入如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$origin=<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_ORIGIN'</span>])?$_SERVER[<span class="string">'HTTP_ORIGIN'</span>]:<span class="string">''</span>;</span><br><span class="line"><span class="comment">/************** 获取客户端的Origin域名 **************/</span></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Origin:'</span>.$origin);</span><br></pre></td></tr></table></figure></p>
<p>过程是这样的：urlA上的页面获取urlB上的资源，浏览器会检查服务器B的HTTP头(HEAD请求)，如果Access-Control-Allow-Origin中有urlA，或者是通配符*，浏览器就会允许跨域。<br>跨域请求成功的请求头如下。浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。因为是我本地文件发出的，所以这里是file://。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Accept:*/*</span><br><span class="line">Accept-Encoding:gzip, deflate, sdch</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.8</span><br><span class="line">Cache-Control:max-age=0</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Host:119.29.142.213</span><br><span class="line">Origin:file://</span><br><span class="line">User-Agent:Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36</span><br></pre></td></tr></table></figure></p>
<p>回应头如下，Access-Control-Allow-Origin的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin:file://</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Content-Length:12</span><br><span class="line">Content-Type:text/html</span><br><span class="line">Date:Wed, 21 Sep 2016 13:53:41 GMT</span><br><span class="line">Server:nginx/1.0.15</span><br><span class="line">Vary:Accept-Encoding</span><br><span class="line">X-Powered-By:PHP/5.2.17p1</span><br></pre></td></tr></table></figure></p>
<p>非简单请求（非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。）这里不再细述，<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">阮一峰的跨域资源共享 CORS 详解</a>有更详细的解释。</p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>WebSocket使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。这种协议专门为快速传输小数据设计，适合用于移动端。<br>JS代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:8888/"</span>);</span><br><span class="line"><span class="keyword">var</span> message = &#123;</span><br><span class="line">	time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">	text: <span class="string">"Hello from my file"</span></span><br><span class="line">&#125;</span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">	socket.send(<span class="built_in">JSON</span>.stringify(message));</span><br><span class="line">&#125;</span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(event.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>用NodeJS搭建本地服务器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> ws = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = http</span><br><span class="line">	.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">		res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">		res.write(<span class="string">'Hello WebSocket from server'</span>);</span><br><span class="line">		res.end();</span><br><span class="line">	&#125;)</span><br><span class="line">	.listen(<span class="number">8888</span>);</span><br><span class="line"><span class="keyword">var</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'ws'</span>).Server,</span><br><span class="line">    wss = <span class="keyword">new</span> WebSocketServer( &#123; <span class="attr">server</span> : app &#125; );</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888'</span>);</span><br></pre></td></tr></table></figure></p>
<p>请求头如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET ws://127.0.0.1:8888/ HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Origin: file://</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36</span><br></pre></td></tr></table></figure></p>
<p>回应头如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: wUpcqQA/Kzv80w5vM90HFf3WN10=</span><br><span class="line">Sec-WebSocket-Extensions: permessage-deflate</span><br></pre></td></tr></table></figure></p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>JSONP只支持GET请求，但优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li>
<li>CORS支持所有类型的HTTP请求。</li>
<li>WebSocket的特别之处是它是双向通信的，</li>
</ul>
<h2 id="XSS与CRSF攻击"><a href="#XSS与CRSF攻击" class="headerlink" title="XSS与CRSF攻击"></a>XSS与CRSF攻击</h2><p>在这里顺带一提XSS与CSRF攻击</p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>XSS（Cross-site scripting，跨站脚本），是注入攻击的一种。即攻击者的输入没有经过严格的控制进入了数据库，最终显示给来访的用户，导致可以在来访用户的浏览器里执行这些代码。例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。<br>可能是无聊恶意的<code>&lt;script&gt;alert(哈哈哈你关不掉我的~)&lt;/script&gt;</code>，也可能是恶意修改站点原数据，甚至通过跨域请求直接加载恶意站点以窃取cookie和登录信息等，例如，建立一个收集信息的恶意网站，然后在评论中写入获取cookie、对恶意网站发起请求的代码，从而把包含了用户的帐号和其他隐私的信息发送到收集服务器上。<br>一些防御措施：</p>
<ul>
<li>对输入进行处理、过滤，把<code>&lt;</code>转换成<code>&amp;lt;</code>等等<br>CSRF（Cross-site request forgery，跨站请求伪造）。</li>
<li>设置HttpOnly属性，防止劫取Cookie，js只能读到带有HttpOnly属性的Cookie</li>
</ul>
<h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>XSS 是实现 CSRF 的诸多途径中的一条。CRSF（Cross-site request forgery，跨站请求伪造），是伪造请求，冒充用户在站内的正常操作。即用户登录受信任网站A，并在本地生成Cookie。然后在不登出A的情况下，访问危险网站B。<br>例如，银行网站A，它以GET请求来完成银行转账的操作，如：<code>http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</code>。危险网站B利用<code>&lt;img&gt;</code>能不受限制地从其他域加载资源，写入代码<code>&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</code>。这样，你的浏览器会带上你的银行网站A的Cookie发出Get请求，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作。如果网站用的是POST请求，还可以利用XSS注入JS代码发送POST请求等等。<br>一些防御措施：</p>
<ul>
<li>判断 referer：在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。网站可以对每一个请求验证其Referer值，如果Referer是其他网站的话就拒绝该请求。但是也有侵入者手动改变了referer值的可能。</li>
<li>在请求地址中添加token并验证：系统开发者可以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有token或者token内容不正确，则认为可能是CSRF攻击而拒绝该请求。如果放到地址不够安全，也可以把token放到HTTP头中自定义的属性并验证。</li>
</ul>
<p>详细解释请看参考文章<a href="http://www.cnblogs.com/imwtr/p/4763457.html" target="_blank" rel="noopener">XSS 和 CSRF 攻击</a>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></li>
<li><a href="http://www.cnblogs.com/imwtr/p/4763457.html" target="_blank" rel="noopener">XSS 和 CSRF 攻击</a></li>
<li><a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/" target="_blank" rel="noopener">总结 XSS 与 CSRF 两种跨站攻击</a></li>
<li>《JavaScript 高级程序设计》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BFCache相关]]></title>
      <url>http://seminelee.github.io/2016/08/29/bfcache/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些浏览器中返回按钮是直接使用缓存的，不会执行任何js代码，例如, 在提交的时候将按钮设置为loading状态，如果在提交成功后没有对按钮进行处理，那么返回后按钮依然是loading状态，这种体验很差。<br><a id="more"></a><br><img src="http://119.29.142.213/static/201608/bfcacheex.png" alt="example"><br>这是因为：<br>部分浏览器在后退时<strong>不会</strong>触发onload事件，這是HTML5世代浏览器新增的特性之一——Back-Forward Cache(简称bfcache)</p>
<h2 id="什么是bfcache"><a href="#什么是bfcache" class="headerlink" title="什么是bfcache"></a>什么是bfcache</h2><p>我们熟悉的红本本《JavaScript高级程序设计》有提及bfcache：</p>
<blockquote>
<p>bfcache，即back-forward cache，可称为“往返缓存”，可以在用户使用浏览器的“后退”和“前进”按钮时加快页面的转换速度。这个缓存不仅保存页面数据，还保存了DOM和JS的状态，实际上是将整个页面都保存在内存里。如果页面位于bfcache中，那么再次打开该页面就不会触发onload事件</p>
</blockquote>
<h3 id="pageshow事件"><a href="#pageshow事件" class="headerlink" title="pageshow事件"></a>pageshow事件</h3><p> 这个事件在页面显示时触发，无论页面是否来自bfcache。在重新加载的页面中，pageshow会在load事件触发后触发；而对于bfcache中的页面，pageshow会在页面状态完全恢复的那一刻触发。</p>
<h3 id="pagehide事件"><a href="#pagehide事件" class="headerlink" title="pagehide事件"></a>pagehide事件</h3><p> 该事件会在浏览器卸载页面的时候触发，而且是在unload事件之前触发。</p>
<h3 id="persisted属性"><a href="#persisted属性" class="headerlink" title="persisted属性"></a>persisted属性</h3><p> pageshow事件和pagehide事件的event对象还包含一个名为persisted的布尔值属性。</p>
<ul>
<li>对于pageshow事件，如果页面是从bfcache中加载的，则这个属性的值为true；否则，这个属性的值为false。</li>
<li>对于pagehide事件，如果页面在卸载之后被保存在bfcache中，则这个属性的值为true；否则，这个属性的值为false。</li>
</ul>
<p>不同的浏览器在浏览器会在当前窗口“打开”历史纪录中的前一个页面的表现上并不统一，这和浏览器的实现以及页面本身的设置都有关系。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p><a href="http://119.29.142.213/static/201608/bfcachetest.html" target="_blank" rel="noopener">线上示例</a><br>js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendFunc</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">	<span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">	li.innerHTML = d.toISOString().substr(<span class="number">14</span>, <span class="number">9</span>) + <span class="string">" "</span> + msg;</span><br><span class="line">	<span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>).appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	appendFunc(<span class="string">'Load Event'</span>);</span><br><span class="line">	<span class="built_in">document</span>.querySelector(<span class="string">"#changeColor"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">document</span>.querySelector(<span class="string">"a"</span>).style.color = <span class="string">"red"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pagehide'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">	appendFunc(<span class="string">"Pagehide Event"</span>);</span><br><span class="line">	appendFunc(<span class="string">"pagehide persisted is :"</span>  + e.persisted);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">	appendFunc(<span class="string">"Pageshow Event"</span>);</span><br><span class="line">	appendFunc(<span class="string">"pageshow persisted is :"</span>  + e.persisted);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>DOM<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com.cn/"</span>&gt;</span>前往大新浪<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"changeColor"</span> <span class="attr">value</span>=<span class="string">"变红"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><table>
<thead>
<tr>
<th>browser</th>
<th>result</th>
</tr>
</thead>
<tbody>
<tr>
<td>IE 11</td>
<td>新载入会触发load和pageshow事件，紅色未保留，没有bfcache</td>
</tr>
<tr>
<td>Chrome 52.0.2743.116</td>
<td>新载入会触发load和pageshow事件，紅色未保留，没有bfcache</td>
</tr>
<tr>
<td>Opera 39.0</td>
<td>新载入会触发load和pageshow事件，紅色未保留，没有bfcache</td>
</tr>
<tr>
<td>Firefox 48.0.2</td>
<td>新载入会触发load和pageshow事件，点前往大新浪时触发pagehide事件，但不存入bfcache，紅色未保留</td>
</tr>
<tr>
<td>Safari(iPhone) iOS 9.3.5</td>
<td>新载入会触发load和pageshow事件，点前往大新浪时触发pagehide事件，存入bfcache ，紅色保留</td>
</tr>
<tr>
<td>UC</td>
<td>新载入会触发load和pageshow事件，点前往大新浪时触发pagehide事件，存入bfcache ，紅色保留</td>
</tr>
<tr>
<td>qq浏览器</td>
<td>【ios 9.3.5】新载入会触发load和pageshow事件，回上页时不触发任何事件且红色被保留，有bfcache【安卓】新载入会触发load和pageshow事件，点前往大新浪时触发pagehide事件，显示没有存入bfcache ，但是红色保留，有bfcache但是不支持pagehide事件的persisted属性 （不同机型有不一样的结果）</td>
</tr>
<tr>
<td>browser</td>
<td>新载入会触发load和pageshow事件，回上页时不触发任何事件且红色被保留，有bfcache（存疑）</td>
</tr>
</tbody>
</table>
<p> 可以看到，Safari、Firefox、UC、qq浏览器、browser保留了红色，有往返缓存。<br> 回到上页时，</p>
<ul>
<li>Safari、UC和qq浏览器都不会触发load；</li>
<li>IE、Firefox、Chrome和Opera会触发load；</li>
<li>browser不触发任何事件。</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>Firefox的<a href="https://developer.mozilla.org/en-US/Firefox/Releases/1.5/Using_Firefox_1.5_caching" target="_blank" rel="noopener">开发者文档</a>中提供了一些思路：</p>
<ul>
<li>页面监听了 unload 或者 beforeunload 事件;</li>
<li>页面设置了 “cache-control: no-store”.</li>
<li>网站使用 HTTPS 同时页面至少满足以下一个条件:<ul>
<li>“Cache-Control: no-cache”</li>
<li>“Pragma: no-cache”</li>
<li>设置请求头 “Expires: 0” 或者 “Expires” 的值为 “Date” 之前的值 (除非 “Cache-Control: max-age=” 也被设置了);</li>
</ul>
</li>
<li>页面在用户前进后退的时候还没有完全加载完或者它有正在进行的网络请求,比如 XMLHttpRequest;</li>
<li>页面正在进行IndexedDB操作;</li>
<li>顶层的页面包含有frame,并且这些frame由于这里列的任何一条原因而不能被缓存;</li>
<li>页面在一个frame内，并且用户在这个frame内跳转到了一个新的网页,这里将被缓存的是新载入的网页</li>
</ul>
<h3 id="JS监听pageshow事件阻止页面进入bfcache"><a href="#JS监听pageshow事件阻止页面进入bfcache" class="headerlink" title="JS监听pageshow事件阻止页面进入bfcache"></a>JS监听pageshow事件阻止页面进入bfcache</h3><p>一言不合放代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> e </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">		<span class="built_in">window</span>.location.reload()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Safari、UC、qq浏览器测试通过。但是UC、qq浏览器会先闪过bfcache中的页面，因为pageshow是在load事件触发之后才触发的。browser依然会保留红色，我认为是因为browser回到上页时不触发任何事件。</p>
<h3 id="JS监听pagehide事件阻止页面进入bfcache"><a href="#JS监听pagehide事件阻止页面进入bfcache" class="headerlink" title="JS监听pagehide事件阻止页面进入bfcache"></a>JS监听pagehide事件阻止页面进入bfcache</h3><p>一言不合放代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pagehide'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> $body = $(<span class="built_in">document</span>.body);</span><br><span class="line">	$body.children().remove();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要等到回调函数完成，用户按返回才执行script标签的代码</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	    $body.append(<span class="string">"&lt;script type='text/javascript'&gt;window.location.reload();&lt;\/script&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Safari、UC、qq浏览器测试通过。browser依然会保留红色，我认为是因为browser回到上页时不触发任何事件。</p>
<h3 id="给响应添加Cache-Control的header"><a href="#给响应添加Cache-Control的header" class="headerlink" title="给响应添加Cache-Control的header"></a>给响应添加Cache-Control的header</h3><p>代码示例如下：<br>在jsp模板的header部分加入如下的禁用缓存设置：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">  <span class="attr">response.setHeader</span>("<span class="attr">Cache-Control</span>","<span class="attr">no-cache</span>,<span class="attr">no-store</span>,<span class="attr">must-revalidate</span>");</span></span><br><span class="line"><span class="tag">  <span class="attr">response.setHeader</span>("<span class="attr">Expires</span>", "<span class="attr">0</span>");</span></span><br><span class="line"><span class="tag">  <span class="attr">response.setHeader</span>("<span class="attr">Pragma</span>","<span class="attr">no-cache</span>");</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="安卓webview-cache的解决方案"><a href="#安卓webview-cache的解决方案" class="headerlink" title="安卓webview cache的解决方案"></a>安卓webview cache的解决方案</h3><p>该方案的前提是浏览器在向server请求页面时，每次都用jsp重新生成html。需要页面本身有禁用缓存的配置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 安卓webview 后退强制刷新解决方案 START --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jsp:useBean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"SERVER_TIME"</span> <span class="attr">value</span>=<span class="string">"$&#123;now.getTime()&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//每次webview重新打开H5首页，就把server time记录本地存储</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> SERVER_TIME = <span class="built_in">document</span>.getElementById(<span class="string">"SERVER_TIME"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> REMOTE_VER = SERVER_TIME &amp;&amp; SERVER_TIME.value;</span></span><br><span class="line">if(REMOTE_VER)&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> LOCAL_VER = sessionStorage &amp;&amp; sessionStorage.PAGEVERSION;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(LOCAL_VER &amp;&amp; <span class="built_in">parseInt</span>(LOCAL_VER) &gt;= <span class="built_in">parseInt</span>(REMOTE_VER))&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//说明html是从本地缓存中读取的</span></span></span><br><span class="line"><span class="javascript">        location.reload(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//说明html是从server端重新生成的，更新LOCAL_VER</span></span></span><br><span class="line">        sessionStorage.PAGEVERSION = REMOTE_VER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 安卓webview 后退强制刷新解决方案 END --&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>PC浏览器，设置禁用页面缓存header即可实现后退刷新</p>
</li>
<li><p>支持bfcache/page cache的移动端浏览器，JS监听pageshow/pagehide，在检测到后退时强制刷新</p>
</li>
<li><p>在前2个方案都不work的情况下，可以在HTML中写入服务端页面生成版本号，与本地存储中的版本号对比判断是否发生了后退并使用缓存中的页面</p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/24524248/forcing-mobile-safari-to-re-evaluate-the-cached-page-when-user-presses-back-butt/24524249#24524249" target="_blank" rel="noopener">Forcing mobile Safari to re-evaluate the cached page when user presses back button</a></li>
<li><a href="http://hzxiaosheng.bitbucket.org/work/2015/09/23/refresh-webpage-on-history-back-for-mobile-browser-and-webview.html" target="_blank" rel="noopener">H5浏览器和webview后退刷新方案</a></li>
<li><a href="http://blog.darkthread.net/post-2012-08-02-trigger-onload-event-when-back-forward.aspx" target="_blank" rel="noopener">瀏覽器在回上頁時不會觸發網頁onLoad事件</a></li>
<li><a href="http://jser.me/2012/09/22/BFcache%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%9C%E8%A5%BF.html" target="_blank" rel="noopener">BFcache是什么东西</a></li>
<li><a href="https://developer.mozilla.org/en-US/Firefox/Releases/1.5/Using_Firefox_1.5_caching" target="_blank" rel="noopener">开发者文档</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bfcache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript Promise API]]></title>
      <url>http://seminelee.github.io/2016/08/28/promise-1/</url>
      <content type="html"><![CDATA[<p>本文译自<a href="https://davidwalsh.name/promises" target="_blank" rel="noopener">https://davidwalsh.name/promises</a><br><a id="more"></a><br>虽然同步代码更容易跟踪和调试，但是异步的性能和灵活性通常更好。为什么在你可以立刻发起多个请求，然后在每个都准备好了的时候处理它们时，要停下来等呢？Promises正在成为JavaScript世界的一个重要组成部分，有许多新的API正在与Promise理念来实施。下面让我们来看看promise及其API是如何使用的！</p>
<h2 id="在自然环境下的Promises"><a href="#在自然环境下的Promises" class="headerlink" title="在自然环境下的Promises"></a><strong>在自然环境下的Promises</strong></h2><p>XMLHttpRequest API是异步的，但<em>不</em>使用Promises API。然而，现在有一些原生API使用promises：</p>
<ul>
<li><a href="https://davidwalsh.name/javascript-battery-api" target="_blank" rel="noopener">Battery API</a></li>
<li><a href="https://davidwalsh.name/fetch" target="_blank" rel="noopener">fetch API</a>(用来代替XHR)</li>
<li>ServiceWorker API (还没有该API文章)</li>
</ul>
<p>Promises只会变得更加普遍，它很重要，所有的前端开发人员都应该熟悉它。另外值得一提的是，Node.js的是Promises的另一个平台（显然，Promises是一个核心的语言功能）。</p>
<p><em>测试promises比你想象的更简单，因为<code>setTimeout</code>可以作为你的异步”任务”！</em></p>
<h2 id="Promise的基本用法"><a href="#Promise的基本用法" class="headerlink" title="Promise的基本用法"></a><strong>Promise的基本用法</strong></h2><p><code>new Promise()</code>构造函数应该只用于传统异步任务，如<code>setTimeout</code>或<code>XMLHttpRequest</code>的用法。即，用关键字<code>new</code>创建一个新的Promise对象，该promise对象提供<code>resolve</code>和<code>reject</code>两个回调函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// Do an async task async task and then...</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="comment">/* good condition */</span>) &#123;</span><br><span class="line">		resolve(<span class="string">'Succes!'</span>;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		reject(<span class="string">'Failure!'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">/* do something with the result */</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">/* error :( */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这取决于开发者异步任务执行的结果，在回调函数中手动调用<code>resolve</code>或<code>reject</code>。一个典型的例子是，转换XMLHttpRequest成基于promise的任务：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From Jake Archibald's Promises and Back:</span></span><br><span class="line"><span class="comment">// http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promisifying-xmlhttprequest</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// Return a new promise.</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">		<span class="comment">// Do the usual XHR stuff</span></span><br><span class="line">		<span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">		req.open(<span class="string">'GET'</span>, url);</span><br><span class="line"></span><br><span class="line">		req.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="comment">// This is called even on 404 etc</span></span><br><span class="line">			<span class="comment">// so check the status</span></span><br><span class="line">			<span class="keyword">if</span> (req.status == <span class="number">200</span>) &#123;</span><br><span class="line">				<span class="comment">// Resolve the promise with the response text</span></span><br><span class="line">				resolve(req.response);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Otherwise reject with the status text</span></span><br><span class="line">				<span class="comment">// which will hopefully be meaningful error</span></span><br><span class="line">				reject(<span class="built_in">Error</span>(req.statusText));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Handle network errors</span></span><br><span class="line">		req.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			reject(<span class="built_in">Error</span>(<span class="string">"Network Error"</span>));</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Make the request</span></span><br><span class="line">		req.send();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Use it!</span></span><br><span class="line"><span class="keyword">get</span>('story.json').then(function(response) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"success!"</span>, response);</span><br><span class="line">&#125;, fucntion(error) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Failed!"</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>有时候,你并不<em>需要</em>在promise内执行一个异步任务————但是，如果可能执行一个异步任务，返回一个promise对象将是最好的做法，这样，你只需要给定结果处理函数就可以了。在这种情况下，不需要使用关键字<code>new</code>你只需要简单地调用<code>Promise.resolve()</code>或<code>Promise.reject()</code>就可以了。 例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userCache = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDetail</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// In both cases, cached or not, a promise will be returned</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (userCache[username]) &#123;</span><br><span class="line">		<span class="comment">// Return a promise without the "new" keyword</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(userCache[username]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use the fetch API to get the information</span></span><br><span class="line">	<span class="comment">// fetch return a promise</span></span><br><span class="line">	<span class="keyword">return</span> fetch(<span class="string">'users/'</span> + username + <span class="string">'.json'</span>)</span><br><span class="line">		.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">			userCache[username] = result;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;)</span><br><span class="line">		.catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not find user: '</span> + username);</span><br><span class="line">		&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因为总是返回一个promise，你可以在它的返回值上随时使用<code>then</code>和<code>catch</code>方法！</p>
<p>##then##<br>所有promise实例有一个<code>then</code>方法，用来处理执行结果。第一个<code>then</code>方法回调接收<code>resolve()</code>调用的结果作为参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// A mock async acton using setTimeout</span></span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		resolve(<span class="number">10</span>);</span><br><span class="line">	&#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// From the console</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p>
<p>当promise的resolve触发，<code>then</code>回调函数被触发。你也可以使用链式的<code>then</code>回调方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		resolve(<span class="number">10</span>);</span><br><span class="line">	&#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'first then: '</span>, num);</span><br><span class="line">	<span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'second then: '</span>, num);</span><br><span class="line">	<span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'last then: '</span>, num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// From the console</span></span><br><span class="line"><span class="comment">// first then: 10</span></span><br><span class="line"><span class="comment">// second then: 20</span></span><br><span class="line"><span class="comment">//last then: 40</span></span><br></pre></td></tr></table></figure></p>
<p>每个<code>then</code>接收之前的<code>then</code>返回值的结果。</p>
<p>如果一个promise的resolve已经触发，但之后<code>then</code>再次被调用，回调将立即触发。如果promise被拒绝，你被拒绝后调用<code>then</code>的话，回调不会被调用。</p>
<h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a><strong>catch</strong></h2><p>当<code>promise</code>被拒绝时，<code>catch</code>回调函数就会被执行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// A mock async action using setTimeout</span></span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		reject(<span class="string">'Done!'</span>);</span><br><span class="line">	&#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'done'</span>, e);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'catch: '</span>, e);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Frome the console:</span></span><br><span class="line"><span class="comment">// 'catch: Done!'</span></span><br></pre></td></tr></table></figure></p>
<p>传入<code>reject</code>方法的参数由你决定。一般来说是传入一个<code>Error</code> 对象`：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reject(<span class="built_in">Error</span>(<span class="string">'Data could not be found'</span>));</span><br></pre></td></tr></table></figure></p>
<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>想想JavaScript加载器的情形：有些时候你触发多个异步交互，但只希望在他们都完成后才作出响应————这就是<code>Promise.all</code>的用处所在。<code>Promise.all</code>方法接受一个promise数组，一旦他们的resolve都触发之后就执行一个回调函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// Both promises resolved</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// One or more promises was rejected</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>使用<code>Promise.all</code>的最佳示例是（通过<code>fetch</code>）同时发起多个 AJAX请求时:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request1 = fetch(<span class="string">'/user.json'</span>);</span><br><span class="line"><span class="keyword">var</span> request2 = fetch(<span class="string">'./articles.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([request1, request2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// Both promises done!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>你可以结合API像<code>fetch</code>和Battery API，因为它们都返回promises：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([fetch(<span class="string">'./users.json'</span>), navigator.getBattery()])</span><br><span class="line">	.then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">		<span class="comment">// Both promises done!</span></span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure></p>
<p>处理拒绝(rejection)当然是复杂的。如果任何promise被reject，<code>catch</code>将会被第一个拒绝(rejection)所触发。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> req1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// A mock async action using setTimeout</span></span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		resolve(<span class="string">'First!'</span>);</span><br><span class="line">	&#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> req2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// A mock async action using setTimeout</span></span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		reject(<span class="string">'Second!'</span>);</span><br><span class="line">	&#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.all([req1, req2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Then: '</span>, results);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Catch: '</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// From the console:</span></span><br><span class="line"><span class="comment">// Catch: Second!</span></span><br></pre></td></tr></table></figure></p>
<p>随着越来越多API支持promises，<code>Promise.all</code>将会变得十分有用。</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p><code>Promise.race</code>是一个有趣的函数————一旦数组中任何一个Promise被解决或者拒绝，<code>Promise.race</code>就会触发，而不会等待所有的promise对象被解决或者拒绝。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> req1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// A mock async action using setTimeout</span></span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		resolve(<span class="string">'First!'</span>);</span><br><span class="line">	&#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> req2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// A mock async action using setTimeout</span></span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		reject(<span class="string">'Second!'</span>);</span><br><span class="line">	&#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.race([req1, req2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Then: '</span>, results);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">one, two</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Catch: '</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// From the console:</span></span><br><span class="line"><span class="comment">// Then: Second!</span></span><br></pre></td></tr></table></figure></p>
<p>用例可发起一个请求到主站资源和备用资源（以防主站和备用之一不可用）。</p>
<h2 id="熟悉Promise"><a href="#熟悉Promise" class="headerlink" title="熟悉Promise"></a>熟悉Promise</h2><p>Promise在过去的几年里（或者在过去10年，如果你是一个Dojo Toolkit的用户）一直是热议的话题，他们已经从JavaScript框架的一部分变成一个JavaScript语言的主要部分。很有可能，你将看到大多数的新的JavaScript API都将基于promise实现…</p>
<p>……这是一个伟大的事情！开发人员能够避免回调地狱，而且异步交互可以像任何其他变量那样来传递。Promise还需要一段时间来普及，现在是学习他们的时候了！</p>
<blockquote>
<p><strong>结束语</strong><br>我觉得翻译带给我的好处是<br>让我不停思考、认认真真地看第一手资料，而且可以慢慢看得懂其他前沿文章。<br>想了解我更多的作品，请点击菜单<a href="https://seminelee.github.io/works/">关于</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SafeFrames v1.1]]></title>
      <url>http://seminelee.github.io/2016/08/24/safeframe1/</url>
      <content type="html"><![CDATA[<h1 id="iab-Interactive-Advertising-Bureau"><a href="#iab-Interactive-Advertising-Bureau" class="headerlink" title="iab.(Interactive Advertising Bureau)"></a><strong>iab.(Interactive Advertising Bureau)</strong></h1><h3 id="安全框架"><a href="#安全框架" class="headerlink" title="安全框架"></a><strong>安全框架</strong></h3><h3 id="版本1-1-草案"><a href="#版本1-1-草案" class="headerlink" title="版本1.1 草案"></a>版本1.1 草案</h3><h4 id="2014年8月发布"><a href="#2014年8月发布" class="headerlink" title="2014年8月发布"></a>2014年8月发布</h4><a id="more"></a>
<hr>
<p><strong>这个文档是IAB广告技术委员会开发的</strong></p>
<p>SafeFrame规范是由来自21个IAB成员公司的志愿者组成的工作小组开发的。</p>
<p>SafeFrame工作小组的领导者是：</p>
<ul>
<li>肖恩·斯奈德，雅虎公司（Sean Snider, Yahoo!）</li>
<li>普拉巴卡尔·戈亚尔，微软公司（Prabhakar Goyal, Microsoft）</li>
</ul>
<p>为这个文档作出贡献的IAB成员公司有：</p>
<ul>
<li>Adobe Systems Inc.</li>
<li>AOL &amp; ADTECH</li>
<li>Auditude</li>
<li>C3 Metrics</li>
<li>CBS Interactive</li>
<li>Disney Interactive Media Group</li>
<li>Dotomi</li>
<li>Editorial Projects in Education</li>
<li>FDG</li>
<li>FreeWheel</li>
<li>Google</li>
<li>HealthiNation</li>
<li>Media Rating Council - MRC</li>
<li>Microsoft</li>
<li>NBC Universal Digital Media</li>
<li>Network Advertising Initiative - NAI</li>
<li>OpenX Limited</li>
<li>Time Inc.</li>
<li>Turner Broadcasting System, Inc./CNN.com</li>
<li>Undertone</li>
<li>Yahoo!</li>
</ul>
<p><strong>IAB中这项倡议的带领者是克里斯·梅希亚（Chris Mejia）和凯蒂·斯特劳德（Katie Stroud ）</strong></p>
<p>对本文档进行评论请联系<a href="mailto:adtechnology@iab.net" target="_blank" rel="noopener">adtechnology@iab.net</a>。请一定要提及这个文件的版本号（你可以在此页的右下角找到，v1.1）。</p>
<p>知识产权事项：参与SafeFrame1.0工作小组的公司在生产SafeFrame1.0版的过程中没有作出专利的说明。SafeFrame的未来版本将在即将发布的IAB知识产权政策的主持下进行生产。</p>
<p>SafeFrame倡议的更多细则和资源可以在<a href="http://www.iab.net/safeframe上被找到" target="_blank" rel="noopener">http://www.iab.net/safeframe上被找到</a></p>
<p><strong>关于IAB广告技术委员会</strong></p>
<p>广告技术委员会由超过70个在广告技术有主要的业务的IAB成员公司组成。它与IAB广告经营理事会合作，为数字广告行业制定重要技术标准和实践最佳做法。一群精选的主要成员企业也参与到广告技术领导委员会里，建议IAB的管理层和董事会顶级广告技术优先。</p>
<p>广告技术委员会的使命是开发那些将降低成本，开拓新的市场机会，并确保数字广告行业的长期增长的技术规范和要求，并促进其被采用。</p>
<p>要查看委员会成员公司的完整列表，请移步到：<br><a href="http://www.iab.net/advertising_technology_council" target="_blank" rel="noopener">http://www.iab.net/advertising_technology_council</a></p>
<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>　执行摘要<br>　目标受众<br>　规格更新</p>
<p><strong>1. 概况</strong><br>　　1.1　SafeFrames组件<br>　　　1.1.1　主站(The Host)<br>　　　1.1.2　第三方(The External Party)<br>　　　1.1.3　接口<br>　　　1.1.4　二级域名(The Secondary Host Domain)<br>　　1.2　优点<br>　　　1.2.1　第三方和主站之间的透明度<br>　　　1.2.2　统一规范的API<br>　　　1.2.3　“沙盒”(Sandboxing)第三方内容<br>　　　1.2.4　主站定制&amp;控制<br>　　1.3　SafeFrames和广告可见展视<br>　　　1.3.1　支持3MS广告可见度<br>　　　1.3.2　可见度特性对第三方可选<br>　　1.4　SafeFrames和视频插播广告<br>　　1.5　SafeFrames和移动端<br>　　1.6　报告SafeFrame的数据<br>　　1.7　区别于其他规范<br>　　　1.7.1　IAB友好的iframe<br>　　　1.7.2　跨源资源共享（CORS）<br>　　1.8　超出范围的项(Out of Scope)<br>　　1.9　操作注意事项<br><strong>2. 主站实施(Host Implementations)</strong><br>　　2.1　SafeFrames是如何运作的<br>　　　2.1.1　传递模式A：主站转换第三方内容<br>　　　2.1.2　传递模式B：第三方内容直接传递<br>　　　2.1.3　渲染SafeFrame<br>　　　2.1.4　通过API进行页内通讯<br>　　2.2　要求<br>　　　2.2.1　JavaScript的host库和API<br>　　　2.2.2　二级域名<br>　　　2.2.3　资源公约<br>　　　2.2.4　SafeFrame的URI公约<br>　　2.3　实现注意事项(Implementation Notes)<br>　　2.4　SafeFrame的渲染细节<br>　　2.5　通信机制的细节<br><strong>3. SafeFrame标签</strong><br>　　3.1　SafeFrame标签结构&amp;要求<br>　　　3.1.1　SCRIPT标签<br>　　　3.1.2　使用JavaScript处理数据标签<br>　　　　3.1.2.1　例子：一次性处理所有标签<br>　　　　3.1.2.2　例子：在数据标签之前先定义SafeFrame host库<br>　　　　3.1.2.3　例子：有兄弟标签的SafeFrame数据标签自动引导(SafeFrame Data Tag with Sibling Auto-Bootstrapping)<br><strong>4. 主站API实施细则</strong><br>　　4.1　命名空间 <code>$sf.host</code><br>　　4.2　命名空间 <code>$sf.host.conf</code><br>　　4.3　命名空间 <code>$sf.info</code><br>　　4.4　类 <code>$sf.host.Config</code><br>　　4.5　类 <code>$sf.host.PosConfig</code><br>　　4.6　类 <code>$sf.host.Position</code><br>　　4.7　类 <code>$sf.host.PosMeta</code><br>　　4.8　函数 <code>$sf.host.boot</code><br>　　4.9　函数 <code>$sf.host.status</code><br>　　4.10　函数 <code>$sf.host.nuke</code><br>　　4.11　函数 <code>$sf.host.get</code><br>　　4.12　函数 <code>$sf.host.render</code><br><strong>5. 第三方API实现</strong><br>　　5.1　命名空间 <code>$sf.ext</code><br>　　5.2　函数 <code>$sf.ext.register</code><br>　　5.3　函数 <code>$sf.ext.supports</code><br>　　5.4　函数 <code>$sf.ext.geom</code><br>　　5.5　函数 <code>$sf.ext.expand</code><br>　　5.6　函数 <code>$sf.ext.collapse</code><br>　　5.7　函数 <code>$sf.ext.status</code><br>　　5.8　函数 <code>$sf.ext.meta</code><br>　　5.9　函数 <code>$sf.ext.cookie</code><br>　　5.10　函数 <code>$sf.ext.inViewPercentage</code><br>　　5.11　函数 <code>$sf.ext.winHasFocus</code></p>
<hr>
<h3 id="执行摘要"><a href="#执行摘要" class="headerlink" title="执行摘要"></a>执行摘要</h3><p>SafeFrame1.0技术是一种支持API的iframe，它开辟了发布页面内容和包含iframe的第三方内容（如广告）之间沟通的线路。因为有了这条沟通线路，投放到SafeFrame的内容能够收集数据和有丰富的互动，如广告扩展。这是标准的ifram所不具备的e。</p>
<p>为了避免有破坏性的广告行为和网页内嵌投放广告的潜在安全风险，发布商可以选择将广告内容投放到iframe中。</p>
<p>iframe是一种发布商网页中的微型HTML页面。使用这种iframe，广告内容以iframe为边界被隔离且它无法访问任何关于页面的信息。因为无法访问页面内容，是一样iframe内的广告内容就无法扩展，无法动态的与主站访客进行互动，并且无法收集任何必要的能够借此判断广告效果的数据。</p>
<p>这种方法保护了发布商，但同时也限制了广告的能力，并因为iframes的局限性而降低了媒体库的价值。</p>
<p>而SafeFrame的支持API的iframe以一种受控和透明的方式，开辟了网页代码和广告内容之间的通信线路。这种通信允许丰富的互动，同时保护发布商的页面以防未知的变化，避免了损坏页面完整性的风险。</p>
<p>SafeFrame用于数字广告的一些主要优势包括：</p>
<ul>
<li><p><strong>消费者保护</strong><br>SafeFrames和广告内容共享信息的方式是提供它具有API的iframe，因此发布商可以选择什么内容允许共享并且能够保护敏感的消费者信息，比如个人email地址，密码甚至银行信息。</p>
</li>
<li><p><strong>发布商控制权</strong><br>发布商代码和广告代码之间的隔离，使发布者能够保持对页面布局的控制，限制来自广告的干扰，同时还允许丰富的互动和有限的数据收集。使用的SafeFrame API，发布商还有能力决定哪些主站信息（如果有的话）应该暴露给广告主和厂商</p>
</li>
<li><p><strong>发布商效率</strong><br>通过实施SafeFrame, 发布者可以允许广告在一个iframe中提供丰富的交互，同时保持控制，防止广告代码破坏页面功能。允许富媒体存在于SafeFrame能够提高潜在收入同时控制运营成本。</p>
</li>
<li><p><strong>标准化的广告布局</strong><br>广告技术提供商可以规范自己的富媒体广告代码，以便它可以在任何依附SafeFrame API协议的发布商网络上运行，同时降低运营成本。</p>
</li>
<li><p><strong>支持广告可见度与其他行业计划</strong><br>SafeFrame1.0提供机制，支持3MS发展下的可见展视以及DAA的AdChoices和其他隐私的举措。事实上，SafeFrame提供了更高的隐私控制，这是以往的标准iFrame做不到的。此外，通过SafeFrames实现的透明通信为支持其他行业举措的奠定了基础。</p>
</li>
</ul>
<p>当一些发布商已经在自己的网页上实现了这种技术，而且广告开发人员和技术供应商已经作出必要的修改（如果有要修改的话）以支持投放广告到发布商实现SafeFrames时，SafeFrames提供的这些好处就能完全实现了。</p>
<p>SafeFrame的工作小组已经建立了一个开源的参考实例，以鼓励在市场上被迅速采用。但是，在发布商过渡到SafeFrame1.0的过程中，广告开发者和技术供应商必须给予足够的耐心。</p>
<h3 id="目标受众"><a href="#目标受众" class="headerlink" title="目标受众"></a>目标受众</h3><p>本规范中的技术细则主要适用于想实现SafeFrames的主站所有者，和将使用SafeFrame协议的富媒体广告的广告开发者。具体来说，主站和广告内容开发人员可以使用本文件中的规范，去制定SafeFrame协议，实现主站内容和任何外部投放的广告或其他内容之间的通信。</p>
<p>Web技术的厂商也应该熟悉SafeFrame的规范，来决定他们是否需要进行任何修改，以支持在市场上的SafeFrame技术。</p>
<p>此外，SafeFrame不仅限于在数字广告中使用，它也可以被任何客户端/服务器关系使用。</p>
<h3 id="规格更新"><a href="#规格更新" class="headerlink" title="规格更新"></a>规格更新</h3><table>
<thead>
<tr>
<th style="text-align:left">版本号</th>
<th style="text-align:left">日期</th>
<th style="text-align:left">概要</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1.0</td>
<td style="text-align:left">3/18/2013</td>
<td style="text-align:left">Original</td>
</tr>
<tr>
<td style="text-align:left">1.0.1</td>
<td style="text-align:left">4/16/2013</td>
<td style="text-align:left">Minor name corrections</td>
</tr>
<tr>
<td style="text-align:left">1.1</td>
<td style="text-align:left">3/14/2014</td>
<td style="text-align:left">Support for communicating whether top browser window is “in focus” (changes in 5.1 and added 5.11)</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="1-概况"><a href="#1-概况" class="headerlink" title="1. 概况"></a>1. 概况</h2><p>SafeFrame说明了一个创建一个包含投放到网页的HTML内容的容器的框架，并建立了一个使网页和提供的内容之间沟通的API。有了SafeFrame1.0，指定的对象和函数被用于操纵和与创建的SafeFrame容器互动，并允许丰富的互动。SafeFrames的主要用途是用SCRIPT标签或者其他标记封装外部HTML内容，同时保护主页面，以防那些会意想不到地无意或故意影响到主站的内容。</p>
<p>作为一种对于投放到iframe的内容的解决方案，SafeFrame为广告内容提供了广告可见度和功能性，这是以往的标准的iframe做不到的。</p>
<h3 id="1-1-SafeFrames组件"><a href="#1-1-SafeFrames组件" class="headerlink" title="1.1 SafeFrames组件"></a>1.1 SafeFrames组件</h3><p>SafeFrame管理两方之间的互动：主站和第三方。主站拥有一个域名，在其中显示第三方提供的内容比如广告。此外，SafeFrame与一个二级域名进行交互。第三方内容投放到这个域名，并从那里通过受控的SafeFrame API功能与主站进行交互。</p>
<h4 id="1-1-1-主站-The-Host"><a href="#1-1-1-主站-The-Host" class="headerlink" title="1.1.1 主站(The Host)"></a>1.1.1 主站(The Host)</h4><p>本文档中，主站是一个主站拥有的某个域（或一组域），通常在这上面会显示内容给通过Web浏览器方式访问页面的终端用户。在网络广告中，主站是”发布商”的代名词，但在其他行业它可能有差异。主站负责部署SafeFrame框架，包括API和一系列用于SafeFrame的静态资源（JavaScript的™和HTML文件）。主站还负责渲染投放到SafeFrame容器的第三方内容。</p>
<h4 id="1-1-2-第三方-The-External-Party"><a href="#1-1-2-第三方-The-External-Party" class="headerlink" title="1.1.2 第三方(The External Party)"></a>1.1.2 第三方(The External Party)</h4><p>本文档中，第三方是一个来源于主域名之外的内容提供者。它提供内容，或者重定向到内容的数据。在网络广告中，第三方可能是广告服务器，广告交换平台(ad exchange)，广告联盟(ad network)或任何推动广告到主站的技术组织。</p>
<p>在许多情况下，第三方内容提供商可能完全不需要修改内容代码，但是当内容需要以某种方式与主站进行交互如内容扩展的时候，第三方就需要用一个JavaScript格式的标签把SafeFrame API的细节包括在内。</p>
<blockquote>
<p><strong>通用注意事项</strong><br>如果第三方内容需要与它投放的主站进行互动，SafeFrame1.0所提供的容器管理技术只需要对第三方内容修改代码。例如，任何扩展或浮动的行为都需要修改一些代码，并且必须在JavaScript中进行。而限制于SafeFrame容器里的任何丰富的交互不需要修改。</p>
</blockquote>
<h4 id="1-1-3-API"><a href="#1-1-3-API" class="headerlink" title="1.1.3 API"></a>1.1.3 API</h4><p>SafeFrame规范了一个提供主站和第三方内容之间的通信协议的API。使用该API，主机主站可以在必要时给第三方内容提供信息，第三方内容可以向主站请求服务（即扩展）。</p>
<p>随着实施和行业应用，我们希望其他行业规范和举措将扩展SafeFrame API的功能。例如，为了支持由3MS举措正在开发的广告可见展视，当前的规范提供了构建模块。而且，该规范也许会扩展，以支持DAA的广告选择方案。</p>
<h4 id="1-1-4-二级域名"><a href="#1-1-4-二级域名" class="headerlink" title="1.1.4 二级域名"></a>1.1.4 二级域名</h4><p>SafeFrame在一个由主站(the host site)提供的二级域名中运作。这个二级域名最好建立在内容分发网络（CDN）上，以提高性能和可用性。这个二级域名作为主站与第三方之间的未知空间（就是作为主站与第三方内容的隔离区）。第三方需要了解主站域(the Host domain)的信息可以通过请求访问到，通过使用SafeFrame API获得。</p>
<h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><p>SafeFrame给拥有者和主站或者第三方内容的运营商提供益处。</p>
<h4 id="1-2-1-第三方和主站之间的透明度"><a href="#1-2-1-第三方和主站之间的透明度" class="headerlink" title="1.2.1 第三方和主站之间的透明度"></a>1.2.1 第三方和主站之间的透明度</h4><p>SafeFrame提供主站和第三方内容之间共享信息的机制。可以被共享的信息的一些可能性包括：主站指定的元数据，SafeFrame容器的几何位置，以及SafeFrame容器是否在视图里等等。</p>
<h3 id="1-2-2-统一规范的API"><a href="#1-2-2-统一规范的API" class="headerlink" title="1.2.2 统一规范的API"></a>1.2.2 统一规范的API</h3><p>随着行业应用，让所有广告商和其他第三方内容提供商可以与主站进行通信的公共API，是让两者之间的互动更清晰的基础。</p>
<h3 id="1-2-3-“沙箱化”第三方内容"><a href="#1-2-3-“沙箱化”第三方内容" class="headerlink" title="1.2.3 “沙箱化”第三方内容"></a>1.2.3 “沙箱化”第三方内容</h3><p>SafeFrame把内容渲染到一个实现第三方内容和主站内容之间的明确划分的容器。这个障碍形成了一个“沙箱”，它可以自动给主站一些安全感，并提供以下功能：</p>
<ul>
<li><p><strong>基础安全</strong><br>实质上，SafeFrame是一个有API的iframe，该API实现主站和第三方内容之间通信，并与iframe一样提供相同的基础安全保证。虽然API开启了双方的通信，但主站会控制什么样的信息（如果有的话）能被访问或共享，以及分享给谁。</p>
</li>
<li><p><strong>稳定性</strong><br>就标准的内部框架来说，SafeFrame里主站和第三方内容之间的明确划分，降低了在渲染内容时发生错误的可能，以及对主站的JavaScript和HTML代码内容干扰的机会。由于第三方内容是由它自己的HTML文档，自己的一套CSS规则，以及JavaScript渲染的，它不能直接交互或覆盖主站的JavaScript，HTML，或者CSS。<br>另外，第三方内容不会在不适当的位置渲染。例如，传送的原始数据，第三方内容可以在主站页面内的任何地方渲染自己，覆盖主站的内容和功能，或在主站内容之下呈现和超出视图。<br>由于双方之间的代码干扰被包含在SafeFrame里，使用SafeFrame API，双方可以以可控和透明的方式进行交互。</p>
</li>
<li><p><strong>性能测量</strong><br>明确定义允许主站衡量第三方内容需要多长时间来加载，这对渲染到iframe的内容来说是可能的了。但是在第三方内容与网页代码内嵌投放的情况下，不能测量第三方内容的加载时间，因为它不被包含和可以在网页内多个地方呈现。随着SafeFrame的API让其交互能力成为可能，一个可行的办法是，一旦被内嵌投放到一个SafeFrame，就移动第三方内容。</p>
</li>
<li><p><strong>两全其美：富媒体和数据收集</strong><br>主站所有者面临着是否允许富媒体在他们的主站上内嵌到网页代码，允许无限制地访问页面数据，或者是否要在iframe中展现内容，这些做法会阻止大多数的富媒体互动和限制大部分或所有的数据收集。<br>展现内容到SafeFrame让富媒体交互和受控制的数据采集两全其美。规范实现了iframe投放的内容的新功能，并提供一个可行的方案，即投放富媒体到一个交互式的SafeFrame而不是内嵌到网页。</p>
</li>
</ul>
<h4 id="1-2-4-主站自定义-amp-控制"><a href="#1-2-4-主站自定义-amp-控制" class="headerlink" title="1.2.4 主站自定义&amp;控制"></a>1.2.4 主站自定义&amp;控制</h4><p>主站可以定制SafeFrame API，那些允许的功能和丰富的交互。主站也可以呈现新的内容，或在任何时候卸载内容。</p>
<h3 id="1-3-SafeFrames和广告可见展视"><a href="#1-3-SafeFrames和广告可见展视" class="headerlink" title="1.3 SafeFrames和广告可见展视"></a>1.3 SafeFrames和广告可见展视</h3><p>SafeFrame创建一个包围广告内容的容器，防止直接访问有关主站网页或应用程序的信息内容。但是，该内容可以请求信息和通过使用SafeFrame API发送和接收消息与主站交互。这些消息使主站能够与第三方内容共享精选的信息，其中包括，让第三方内容能够确定其是否在视图中的几何信息。</p>
<p>下图说明了SafeFrame的内容如何显示，并表明了SafeFrame内投放的广告内容有25％在视图中。<br><img src="http://119.29.142.213/static/201608/sf1.png" alt="图1-1"></p>
<p>使用SafeFrame的第三方接口<code>$sf.ext.geom</code>，提供广告内容的第三方可以确定SafeFrame相对于可视区域和总主站内容区域的位置。使用提供的尺寸，第三方可以确定有多少内容在视图中。</p>
<p>其他的SafeFrame调用让第三方内容可以扩展，超越SafeFrame的界限。<code>$sf.ext.geom</code>调用也使第三方可以确定它能扩展多远以及扩展内容中有多少是在视图中。</p>
<p>下图的例子说明了SafeFrame的内容怎么在网页内扩展和有多少是在可视区域内的。<br><img src="http://119.29.142.213/static/201608/sf2.png" alt="图1-2"><br>想了解更多信息，请查阅第5.4节，它涵盖了详细的$sf.ext.geom调用。</p>
<h4 id="1-3-1-支持3MS广告可见度"><a href="#1-3-1-支持3MS广告可见度" class="headerlink" title="1.3.1 支持3MS广告可见度"></a>1.3.1 支持3MS广告可见度</h4><p>本SafeFrames规范用于与其它行业举措周围的广告能见度对齐和提高广告度量的质量，即使测量有意义（3MS，Making Measurements Make Sense）的倡议。自从SafeFrame1.0发布，广告能见度仍在测试，而且正式的推荐标准尚未建立。正如同行业中建立和采用SafeFrames和3MS能见度推荐标准，更新的SafeFrame可以更无缝地支持3MS的推荐标准。</p>
<p>在这之前，SafeFrame1.0提供几何值，让主站和第三方可以用于确定有多少内容在视图中。主站与外部各方应合作，并且为了声明一个”可见度”展视，就应该有多少内容在视图中达成协议。</p>
<h4 id="1-3-2-可见度特性对第三方可选"><a href="#1-3-2-可见度特性对第三方可选" class="headerlink" title="1.3.2 可见度特性对第三方可选"></a>1.3.2 可见度特性对第三方可选</h4><p>SafeFrames框架允许第三方内容通过调用<code>$sf.ext.inVewPercentage</code>方法确定它是否在视图中。此特性，与所有的SafeFrame特性，对投放内容到主站的第三方是可选的。但是，无论何时第三方请求主站提供能见度数据，它都要提供。</p>
<h3 id="1-4-SafeFrames和视频插播广告"><a href="#1-4-SafeFrames和视频插播广告" class="headerlink" title="1.4 SafeFrames和视频插播广告"></a>1.4 SafeFrames和视频插播广告</h3><p>SafeFrame的不是为了插播视频广告而设计的，但在一个VAST标签投放的插播横幅广告可以投放到SafeFrames。IAB的视频套件将需要更新以完全支持SafeFrame渲染，但视频发布商已经可以使用SafeFrame来代替他们的视频网页上使用的任何内部框架。</p>
<p>任何指定为一个iframe资源的VAST横幅广告可以渲染在SafeFrame内。为了确保VAST插播横幅广告可以投放到SafeFrame，第三方必须指定创造性的资源作为一个iframe。任何包含在VAST插播横幅广告内容的SafeFrame协议可以被任何支持SafeFrame1.0的视频发布商使用。</p>
<p>一个SafeFrame内渲染VPAID（Video Player-Ad Interface Definition）内容的可能性存在，但是实施解决方案需要来自视频主站与第三方的修改。直到IAB VSuite被更新以更容易支持SafeFrame，使用SafeFrame渲染VPAID内容的技术操作必须由愿意执行解决方案的各方加以解决。</p>
<h3 id="1-5-SafeFrames和移动端"><a href="#1-5-SafeFrames和移动端" class="headerlink" title="1.5 SafeFrames和移动端"></a>1.5 SafeFrames和移动端</h3><p>在网页呈现的任何的SafeFrame内容也可以像网页一样在移动设备呈现。基于浏览器的Web应用，包括那些专为移动端设计的，也能充分地从SafeFrame实施中获益。然而，虽然SafeFrame可以在非浏览器应用程序中运作，如那些专门为移动设备（本地应用程序）开发的，但是SafeFrame1.0没有非浏览器支持的详细信息，这些信息将被考虑进未来的SafeFrame发布中。</p>
<h3 id="1-6-报告SafeFrame的数据"><a href="#1-6-报告SafeFrame的数据" class="headerlink" title="1.6 报告SafeFrame的数据"></a>1.6 报告SafeFrame的数据</h3><p>SafeFrame1.0为您提供可以在报表中使用的数据，但是使用SafeFrame报告数据的机制还没完成。报告系统必须配置为收集和以收件人期望的格式报告SafeFrame数据。</p>
<h3 id="1-7-区别于其他规范"><a href="#1-7-区别于其他规范" class="headerlink" title="1.7 区别于其他规范"></a>1.7 区别于其他规范</h3><p>IAB的SafeFrame解决其他IAB规范或指南没有解决的问题。下面的章节帮助从行业里其他解决不同的问题的规范中区分SafeFrame。</p>
<h4 id="1-7-1-IAB友好的iframe"><a href="#1-7-1-IAB友好的iframe" class="headerlink" title="1.7.1 IAB友好的iframe"></a>1.7.1 IAB友好的iframe</h4><p>IAB的SafeFrame规范跟IAB那些记录了”在异步广告环境中富媒体广告的最佳示例”的友好的iframe不同。</p>
<p>IAB的友好iframe的最佳示例是用来支持使用JavaScript调用的富媒体广告，不像AJAX那样使用动态编码框架。使用易用的iframe，来自广告服务器的内容像主站内容一样渲染到一个来源于同一服务器的frame。</p>
<p>虽然友好的iframe解决方案解决了跨平台的障碍，以支持某些富媒体格式，但是它没有把第三方内容从主站内容中隔离。在易用的iframe里的富媒体内容像主站的一样，直接由同一个服务器提供。</p>
<p>相反地，SafeFrame实现了主站和第三方内容之间的隔离，并且提供了一个API来让控制和透明相互作用成为可能，同时为主站提供安全性和稳定性控制的最小层。使用SafeFrame时，广告内容是由一个中性域提供，而不是与主站内容一样来自于相同的来源。只允许通过SafeFrame指南中指定的API访问该广告内容被最终渲染的主站域。</p>
<p>SafeFrame指南删除了许多与投放富媒体到来源于主站的iframe相关的安全风险。SafeFrame API也允许主机和广告内容之间更加透明，以及对丰富的互动有更多的控制和监控工具。该新增的控制也保证了富媒体的更好的渲染能力。</p>
<h4 id="1-7-2-跨源资源共享（CORS）"><a href="#1-7-2-跨源资源共享（CORS）" class="headerlink" title="1.7.2 跨源资源共享（CORS）"></a>1.7.2 跨源资源共享（CORS）</h4><p>跨源资源共享（CORS，Cross Origin Resource Sharing）是一种用于实现跨域的HTTP请求的机制。如果没有CORS，同源策略（the Same Origin Policy）就会阻止一个域的嵌入代码请求来自另一个域的潜在的破坏性的内容。对于良性的内容如图像存在例外。</p>
<p>不幸的是，同源策略阻止内容，比如富媒体广告，请求脚本文件以支持正确的渲染和互动。利用CORS，内容可以让浏览器对信任域进行跨域请求。虽然这个解决方案是有效的，但是它也赋予第三方内容对主站的完全访问权限，使第三方内容有权不需主站知晓就访问和更改主站内容。</p>
<p>CORS只能管理一个域名是否可以请求另一个;它不能管理这两个之间的相互作用。</p>
<p>另一种解决方案是把内容投放到iframe中。在此解决方案中，内容是在提供内容的外部服务器中进行处理。但有了这个解决方案，所有对主站的访问都被拒绝，禁止与第三方内容的任何丰富的互动。</p>
<p>综上所述，CORS不能控制被请求的内容可以访问什么，而一个标准的iframe又禁止任何的访问。</p>
<p>同时使用iframe和API，SafeFrame实现了主站和外部提供的内容之间丰富的互动，同时允许控制对主站信息的访问。</p>
<h3 id="1-8-超出范围的项-Out-of-Scope"><a href="#1-8-超出范围的项-Out-of-Scope" class="headerlink" title="1.8 超出范围的项(Out of Scope)"></a>1.8 超出范围的项(Out of Scope)</h3><p>在本规范中，下列项是超出范围的：</p>
<ul>
<li><p><strong>读取/检索第三方内容</strong><br>SafeFrame不指定如何检索第三方内容。一旦检索，第三方内容就作为一个字符串或URI和主站选择使用的任何元数据，被放入SafeFrame<code>$sf.host.Position</code>对象中。</p>
</li>
<li><p><strong>为了特定实现的附加功能</strong><br>对比起其他的创建，操纵和管理一个容器，SafeFrame没有定义任何对象，方法，或者其他属性。进一步的功能，例如额外的安全性，UI元素等可能会被加入到未来的版本中，但不会作为SafeFrame1.0的一部分。</p>
</li>
<li><p><strong>基于非浏览器的实现</strong><br>SafeFrame的这个版本仅限于JavaScript的格式，基于浏览器的实现。SafeFrame1.0可以在应用内发挥作用，如那些在移动设备（本机），但是对于非基于浏览器实现的细则未包括在SafeFrames的这个版本中。它支持基于浏览器的应用程序，移动设备和任何其他设备。</p>
</li>
</ul>
<h3 id="1-9-操作注意事项"><a href="#1-9-操作注意事项" class="headerlink" title="1.9 操作注意事项"></a>1.9 操作注意事项</h3><p>使用SafeFrames可能会改变某些熟悉操作。在实施SafeFrames之前，请考虑以下的一些操作效果，并确定你的技术和过程是否需要做出任何修改，以利用SafeFrame的优势。</p>
<p>以下的考虑情况旨在提供一个用于实现分析的起点。可能需要进一步的评估和测试，以确保顺利实施和过渡。</p>
<ul>
<li><p><strong>上下文展示广告</strong><br>以编程方式投放基于网页内容的广告的广告代码，访问网页数据，以识别它显示的内容类型，然后投放适合于内容的广告。使用SafeFrames，因为广告代码不能直接访问主机页面，主站API必须传递这个数据给广告代码。<br>该广告代码提供者应与主站页面所有者（发布者）洽谈，为了广告代码提供者投放上下文展示广告，应该传递哪些信息。<br>欲了解更多信息，请参阅第5.8节有关<code>$sf.ext.meta</code>功能的详细信息。</p>
</li>
<li><p><strong>访问主站URL</strong><br>当第三方内容使用iframe最初加载到一个主站站点时，HTTP头一般标识URL为主站站点，但不是很准确。由于SafeFrame是一个iframe，这种URL不准确的情况也发生在SafeFrame。为了获取准确的主机URL，在JavaScript中使用document.referrer属性，正如你在一个标准的iframe中会做的一样。</p>
</li>
<li><p><strong>设置Cookies</strong><br>使用SafeFrame，第三方内容在SafeFrame域内被渲染，这与主站域不同。Cookies可以在这个二级域名中被设置和读取，但主站必须声明是否支持<code>$sf.ext.cookie</code>功能。此外，即使支持cookie的读写能力，主站控制何时及向谁共享Cookie数据。如果第三方内容需要设置和直接在主站域读取cookie，这个访问必须与主站页面所有者进行谈判协商。</p>
</li>
<li><p><strong>第三方数据</strong><br>使用SafeFrames的API，从主站（host）域共享的任何数据是由主站提供的。在商业模式，一个第三方代表另一方从主站收集数据，在一个SafeFrame实施的第三方必须依赖由主站（第一方）提供的数据，而不是直接收集。<br>当第一方提供的数据可能会提高人们对数据完整性的关注，被共享的数据被用于正确呈现提供的内容。共享不正确的数据违背了主机的最高利益，因为这可能会导致不正确的渲染和互动，这与会干扰主站的页面内容。此外，实施SafeFrames的主站所有者可以被审核，以确保整个的SafeFrame API共享数据的完整性。</p>
</li>
<li><p><strong>支持未知尺寸的广告内容</strong><br>有些广告投放模式涉及，在不知道哪个广告会被投放和什么时候调用的详细信息的情况下，对于特定的一套标准的广告分配广告空间。在这些情况下，在调用该广告的时候，宽度和高度是是未知的。SafeFrame1.0不直接支持这种模式，但可以使用现有的SafeFrame功能与对“推送”扩展技术的支持相结合来支持。<br>如果主机声明对推送扩展技术的支持，通过使用<code>$sf.ext.expand</code>功能以扩展SafeFrame容器来提供可以调整为更大实际尺寸的原始尺寸，未知的尺寸的广告内容可以被接受。当在这种情况下扩张，但使用覆盖扩展方法是一种选择的时候，推送方法，如果支持的话，是最佳的方法。</p>
</li>
</ul>
<p>其他的技术和工艺，可能需要修改，以适应SafeFrame的操作。SafeFrame上线之前，请考虑运行一个深入的分析和进行产品测试。</p>
<h2 id="2-主站实施-Host-Implementations"><a href="#2-主站实施-Host-Implementations" class="headerlink" title="2. 主站实施(Host Implementations)"></a>2. 主站实施(Host Implementations)</h2><p>在一个基于SafeFrame实施的浏览器，API的主站端用JavaScript编写，并且必须提供所定义的在章到中列出的函数和命名空间列表。基于实现的浏览器的机制是使用一个iframe标签来创建第三方内容的容器，伴随着额外的JavaScript代码，以促进功能和与第三方内容的通信。</p>
<p>浏览器根据他们所支持的功能等级分级。A级浏览器是已知的，有能力的，现代的，和常见的。所有使用JavaScript激活A级浏览器应予支持。C-＆X级浏览器是较为少见，能力较差，和过时的。主站方可能在斟酌下决定支持这些浏览器。SafeFrame的主要依靠HTML5“postMessage”函数作为低级别的iframe和主站之间的通信手段。而postMessage函数提供了最佳的性能，其它机制可以用于促进两方之间的通信，特别是在C-＆X分级浏览器的情况中。</p>
<p>有关HTML5 PostMessage函数的更多信息，请访问：<br><a href="http://dev.w3.org/html5/postmsg/#posting-messages" target="_blank" rel="noopener">http://dev.w3.org/html5/postmsg/#posting-messages</a></p>
<h3 id="2-1-SafeFrames是如何运作的"><a href="#2-1-SafeFrames是如何运作的" class="headerlink" title="2.1 SafeFrames是如何运作的"></a>2.1 SafeFrames是如何运作的</h3><p>SafeFrame的目标是提供将内容从外部源（第三方内容）传递到一个SafeFrame容器和渲染到主站站点上。第三方内容可以通过以下两种方式之一传递：</p>
<p><strong>传递模式A：主站代码转换第三方内容，并渲染在SafeFrame中</strong><br>当浏览器联系主站网络服务器，主站可以从自己的后台系统检索第三方内容。在这种传递方式，主站可以使用由SafeFrame实例渲染的SafeFrame标签，转换第三方内容到内联的JavaScript结构。</p>
<p><strong>传递模式B：第三方内容被直接传递到SafeFrame</strong><br>主站可能没有机制去在自己的网络服务器上转换第三方内容。在这种传送模式，它们仍然提供相同类型的内联JavaScript结构与SafeFrame标记，但是它们给内容提供一个URL，而不是直接放置第三方内容到该结构。在这种情况下，使用SCRIPT标签和指定的URL把第三方内容直接输送到SafeFrame容器中。</p>
<p>下面的章节详细描述了这两个过程。</p>
<h4 id="2-1-1-传递模式A：主站转换第三方内容"><a href="#2-1-1-传递模式A：主站转换第三方内容" class="headerlink" title="2.1.1 传递模式A：主站转换第三方内容"></a>2.1.1 传递模式A：主站转换第三方内容</h4><p>下图说明了使用传递模式A传递第三方内容到SafeFrame容器的过程</p>
<p><img src="http://119.29.142.213/static/201608/sf3.png" alt="图2-1"></p>
<ol>
<li><strong>内容请求：</strong>当最终用户访问主站时，浏览器向主站服务器请求内容。</li>
<li><strong>第三方内容请求：</strong>主站向外部服务器请求内容数据。</li>
<li><strong>第三方传递：</strong>第三方将HTML内容作为数据传递</li>
<li><strong>SafeFrame标签：</strong>主站主站转换第三方内容数据以使用SafeFrame标签将其投放到SafeFrame容器</li>
<li><strong>内容隔离：</strong>主站内容与第三方内容隔离</li>
<li><strong>内容传递：</strong>主站内容，伴随着包裹在一个SafeFrame容器的第三方内容，被投放到浏览器。</li>
<li><strong>浏览器处理SafeFrame：</strong>浏览器使用来自被传递的主站内容的SafeFrame指令，来处理主站内容和第三方内容之间的互动。</li>
</ol>
<h4 id="2-1-2-传递模式B：第三方内容直接传递"><a href="#2-1-2-传递模式B：第三方内容直接传递" class="headerlink" title="2.1.2 传递模式B：第三方内容直接传递"></a>2.1.2 传递模式B：第三方内容直接传递</h4><p>下图展示了使用传递模式B传递第三方内容到SafeFrame容器的过程</p>
<p><img src="http://119.29.142.213/static/201608/sf4.png" alt="图2-2"></p>
<ol>
<li><strong>内容请求：</strong>当最终用户访问主站时，浏览器向主站服务器请求内容。</li>
<li><strong>主站内容传递：</strong>主站传递它的站点的HTML内容，伴随着SafeFrame的指令和指向第三方内容的URL。</li>
<li><strong>浏览器处理SafeFrame：</strong>浏览器使用来自被传递的主站内容的SafeFrame指令，来处理主站内容和第三方内容之间的互动。</li>
<li><strong>外部请求：</strong>浏览器使用主站提供的URL向外部服务器请求内容。</li>
<li><strong>第三方内容请求：</strong>被请求的第三方内容直接传递到SafeFrame iframe中。</li>
</ol>
<h4 id="2-1-3-渲染SafeFrame"><a href="#2-1-3-渲染SafeFrame" class="headerlink" title="2.1.3 渲染SafeFrame"></a>2.1.3 渲染SafeFrame</h4><p> 在部分2.1.1和2.1.2的图片分别说明传递模式A和传递模式B之间的差异。下面的图描述在一个高层次，浏览器如何使用主站服务器发送来的SafeFrame指令初始化SafeFrame API和在其中渲染第三方内容。</p>
<p><img src="http://119.29.142.213/static/201608/sf5.png" alt="图2-3"></p>
<ol>
<li><strong>获取SafeFrame：</strong>浏览器从主站服务器接收指令后，浏览器从一个二级域名请求和接收SafeFrame。</li>
<li><strong>配置SafeFrame：</strong>浏览器初始化从host库访问的SafeFrame代码。使用SafeFrame类<code>$sf.host.Position</code>，确定传递模式，因为要么包括HTML第三方内容（传递模式A）要么引用一个URL（传递模式B）。SafeFrame函数<code>$sf.host.render()</code>随后用于渲染iframe。</li>
<li><strong>创建IFRAME：</strong>：iframe随后在二级域名被创建。如果第三方内容是使用传递模式A传递的，内容数据将与iframe被载入。</li>
<li><strong>加载iframe：</strong>iframe被加载（如果使用传递模式B传递，则伴随着第三方内容）到host库。</li>
<li><strong>API初始化：</strong>SafeFrame API被初始化，而且如果使用传递模式A传递，则第三方内容被渲染。</li>
<li><strong>第三方内容请求（模式B）：</strong>如果第三方内容使用传递模式B传递，则SafeFrame内提供的URL被用于向外部服务器请求内容。</li>
<li><strong>第三方内容渲染（模式B）：</strong>在SafeFrame iframe中第三方内容被传递和渲染。</li>
</ol>
<h4 id="2-1-4通过API进行页内通讯"><a href="#2-1-4通过API进行页内通讯" class="headerlink" title="2.1.4通过API进行页内通讯"></a>2.1.4通过API进行页内通讯</h4><p> 下图说明了主站与第三方内容之间的通信是怎么启动的。</p>
<p> <img src="http://119.29.142.213/static/201608/sf6.png" alt="图2-4"></p>
<ol>
<li><strong>接收第三方内容（作为数据）：</strong>浏览器接收第三方数据，作为渲染在主站页面的内容。</li>
<li><strong>API初始化：</strong>使用SafeFrame的类<code>$sf.host.Position</code>，网页创建一个接收的外部数据的容器，然后配置的SafeFrame主站API。</li>
<li><strong>第三方内容渲染：</strong>：第三方数据在SafeFrame中渲染为内容。</li>
<li><strong>通信：</strong>通讯：一旦第三方内容被渲染，如果付诸实施，它可以使用SafeFrame外部API代码，以调用主站API。</li>
</ol>
<h3 id="2-2要求"><a href="#2-2要求" class="headerlink" title="2.2要求"></a>2.2要求</h3><p> 下面的章节描述实施SafeFrame的要求。</p>
<h4 id="2-2-1-JavaScript-host库和API"><a href="#2-2-1-JavaScript-host库和API" class="headerlink" title="2.2.1 JavaScript host库和API"></a>2.2.1 JavaScript host库和API</h4><p> JavaScript的host库和API是用来控制和渲染SafeFrame容器的。该库提供了命名空间，类和函数，这些将在第4章中进一步描述。</p>
<blockquote>
<p><strong>主站实现注意事项</strong><br>一个SafeFrame可能包括：一个网页视图（移动端），一个嵌入式浏览器，一个HTA（微软HTML应用程序），或原用户的Web浏览器。</p>
</blockquote>
<h4 id="2-2-2-二级域名"><a href="#2-2-2-二级域名" class="headerlink" title="2.2.2 二级域名"></a>2.2.2 二级域名</h4><p>通过创建一个比起主站页面具有不同的来源，主机名和域名的iframe，SafeFrame 主站 API创建，渲染并管理第三方HTML内容。这种二级域名创建了一个”跨域屏障”，防止第三方的HTML和JavaScript直接访问主站页面的任何东西。</p>
<p>Web浏览器遵循”同源”政策，即来自2个不同来源的代码不允许进行通信（有一些例外）。因此，主站<em>必须</em>有一个二级域名，从那里可以投放SafeFrame资源。使用CDN（内容分发网络）可以提供二级域名。</p>
<h4 id="2-2-3-资源公约"><a href="#2-2-3-资源公约" class="headerlink" title="2.2.3 资源公约"></a>2.2.3 资源公约</h4><p>对于主站，SafeFrame定义两种类型的资源：基本HTML文件和JavaScript文件。</p>
<p><strong>基本HTML文件（静态HTML文件）</strong></p>
<p>HTML文件是用来提供一个第三方HTML内容渲染成的基础级的HTML文档。在不支持HTML5报信的情况下，HTML文件还可以被用来充当代理，以促进在主站和第三方之间发送消息。</p>
<p>与SafeFrame一起使用的HTML文件必须遵循以下约定：</p>
<ul>
<li>浏览器和代理也必须能够公开缓存HTML文件</li>
<li>一个以上的HTML文件可以被用于渲染，以提供额外的功能。</li>
<li>所有的渲染HTML文件必须包括对外方API功能的支持，以渲染第三方内容。</li>
<li>用于渲染的HTML文件必须首先包含SafeFrame第三方JavaScript库。</li>
</ul>
<p><strong>JavaScript文件</strong><br>主站的SafeFrame API用JavaScript实现，而且必须遵守以下公约：</p>
<ul>
<li>SafeFrame API JavaScript文件必须是静态的。</li>
<li>第三方API总是用JavaScript实现。</li>
<li>也必须允许浏览器和代理公开缓存所有提供的文件。</li>
</ul>
<h4 id="2-2-4-SafeFrame的URI公约"><a href="#2-2-4-SafeFrame的URI公约" class="headerlink" title="2.2.4 SafeFrame的URI公约"></a>2.2.4 SafeFrame的URI公约</h4><p>因为浏览器和代理必须能够缓存JavaScript和HTML资源文件，这些文件应该只因新版本的发行而改变，而且用于访问文件的URI不能包含查询字符串参数或任何会让浏览器或代理不缓存文件的东西。</p>
<p>版本一致性必须得到维护。例如，对于版本2-2-0的HTML资源不应该被提供给一个版本2-3-5的JavaScript实例。版本一致性必须得到维护。</p>
<p>以下SafeFrame的访问主站资源的的URI格式，实现了静态URI的使用和资源范围内的相对路径。</p>
<p><img src="http://119.29.142.213/static/201608/sf7.png" alt="图2-5"></p>
<p>用于访问SafeFrame资源的URI的部分完全是由主站定义的，但必须按指定的顺序提供并按下面的细节描述：</p>
<ol>
<li>协议 (例如http, https等等)</li>
<li>二级域名（和端口，如果适用的话）</li>
<li>通向SafeFrame资源的根路径（允许多个目录，用/分隔）</li>
<li>SafeFrame的版本号，格式为“N-N-N”</li>
<li>小写的“html”表示HTML文件或小写的“JS”表示JavaScript文件（其他资源类型可能包含在未来发布的SafeFrame）</li>
<li>文件名称</li>
</ol>
<h3 id="2-3-实现注意事项"><a href="#2-3-实现注意事项" class="headerlink" title="2.3 实现注意事项"></a>2.3 实现注意事项</h3><p>下面的说明对于主站实现SafeFrame来说是重要的。</p>
<p><strong>SafeFrame和iframe嵌套</strong><br>SafeFrame容器总是在顶层HTML文档中呈现。一个SafeFrame的容器不能在另一个容器的SafeFrame内呈现。如果SafeFrame 主站 API创建的iframe是作为浏览器执行的主站顶层HTML的一部分呈现的话，它只能与外部HTML内容通信。SafeFrame的JavaScript代码必须能够检测不正确的嵌套。</p>
<p>鉴于以下不当嵌套的情况，SafeFrame的JavaScript代码应该采取下面对应的行动。</p>
<ol>
<li>SafeFrame主站的JavaScript代码加载到一个iframe：<br>a. SafeFrame主站的JavaScript的命名空间是无效的。<br>b. 一个且只有一个调用函数<code>$sf.host.boot</code>是允许的，这样类<code>$sf.host.Position</code>对象的内容就可以呈现了。<br>c. SafeFrame的JavaScript代码将不会遵守且不会处理配置调用（请参阅类<code>$sf.host.Config</code>和类<code>$sf.host.PosConfig</code>）。<br>d. SafeFrame的JavaScript代码将不会遵守且不会处理一个iframe中的SafeFrame标签中定义的元数据。</li>
<li>SafeFrame标签（见第3章）放置在iframe里面：<br>a. SafeFrame的JavaScript代码将解析和读取SafeFrame标签以检索内容。<br>b. SafeFrame的JavaScript代码将渲染内容<br>c. SafeFrame的JavaScript代码将不会遵守且不会处理配置调用（请参阅类<code>$sf.host.Config</code>和类<code>$sf.host.PosConfig</code>）。<br>d. SafeFrame的JavaScript代码将不会遵守且不会处理一个iframe中的SafeFrame标签中定义的元数据。<br>e. 如果提供的iframe是一个SafeFrame容器，那么内容伴随着自己的JavaScript代码被渲染，并可以访问第三方的SafeFrame API。</li>
</ol>
<p><strong>SafeFrame JavaScript库</strong><br>SafeFrame容器总是包含一个JavaScript库，它响应SafeFrame主站JavaScript库，并且总是包含在HTML渲染文件的第一个JavaScript文件。</p>
<p><strong>SafeFrame HTML管理</strong><br>SafeFrame管理所有它创建的HTML元素。无论是主站还是第三方都不应该试图操纵该SafeFrame创建和管理的HTML节点。这样做会意料不到地损坏接口。</p>
<p>SafeFrame可能会为它控制的HTML元素增加一个CSS类，但主站和第三方应避免为以下的CSS类名添加CSS规则或选择器：</p>
<ul>
<li><strong>sf_data: </strong>用于表示包含要渲染的数据的内嵌SafeFram元素</li>
<li><strong>sf_position: </strong>用于表示一个被渲染的SafeFrame容器的起始HTML元素树</li>
<li><strong>sf_lib: </strong>用于表示包含SafeFrame JavaScript代码的SCRIPT HTML元素。</li>
<li><strong>sf_el: </strong>一般用来表示由SafeFrame的JavaScript代码保持的其他HTML元素</li>
</ul>
<p><strong>递交内容到的SafeFrame主站API以渲染</strong><br>除了配置递送到SafeFrame容器的第三方内容，主站应确保相关内容以一个可以接受的形式给API去处理。主站页面接收第三方内容作为原始的HTML或一个SafeFrame必须获取和渲染的URL。</p>
<p>在这两种情况下，SafeFrame都使用JavaScript来处理信息。原始HTML内容可能需要在发送到SafeFrame之前进行编码。虽然不需要调整URL，第三方应该知道，渲染和添加内容到SafeFrame容器必定需要一个JavaScript响应(response)。</p>
<p>下面的实现注意事项提供更多的细节，且与第2.1节讨论的两个传递模式相对应。</p>
<ul>
<li><p><strong>作为JavaScript字符串的原始的HTML（传递模式A）</strong><br>由于JavaScript处理某些字符和SCRIPT标签时不同于HTML，主站可能必须在发送给SafeFrame API处理之前，修改任何原始的HTML内容。<br>例如，下面的HTML字符串被当做JavaScript处理时，会报一个语法错误：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"> 	<span class="built_in">document</span>.write(<span class="string">'Hello "Dave"'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了使上述HTML字符串在SafeFrame API中正常被处理，必须重写格式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="string">"&lt;scr"</span>+<span class="string">"ipt type=\'text\/javascript\'&gt;"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'Hello \"Dave\"'</span>); &lt;<span class="regexp">/scr"+"ipt&gt;";</span></span><br></pre></td></tr></table></figure>
<p>以上的JavaScript格式的HTML字符串可以在SafeFrame<code>$sf.host.Position</code>对象中正常运行。</p>
</li>
<li><p><strong>使用URL来获取第三方内容（传递模式B）</strong><br>主机可以提供一个URL到第三方内容，而不是提供所述HTML内容本身。在此情况下，主站页面不能直接把第三方内容渲染到的SafeFrame<code>$sf.host.Position</code>对象，给SafeFrame去获取和渲染在容器中的内容。<br>由于网页不能编译SafeFrame中处理的第三方内容，SafeFrame请求得到的响应应该是JavaScript格式的。一旦生成SafeFrame容器，第三方内容的URL响应的SCRIPT标签产生，并且可以传递附加内容。使用一个SCRIPT标签，所以从被提供的URL传递的内容可以在SafeFrame的容器内访问外部的API，而不是使用一个嵌套的iframe标签。</p>
<blockquote>
<p><strong>第三方实现注意事项</strong><br>虽然第三方HTML内容可能使用其他的iframe标签，因为”同源”政策，在额外的iframe标记内的任何内容被禁止访问API。欲知更多信息，请参阅第3章的SafeFrame标签</p>
</blockquote>
</li>
</ul>
<h3 id="2-4-SafeFrame的渲染细节"><a href="#2-4-SafeFrame的渲染细节" class="headerlink" title="2.4 SafeFrame的渲染细节"></a>2.4 SafeFrame的渲染细节</h3><p>主站JavaScript库插入一个HTML iframe元素到主站页面。主站API控制渲染过程，为了也控制第三方内容在iframe中渲染。</p>
<p>使用以下的指南创建iframe：</p>
<p><strong><code>src</code>属性</strong><br>iframe的”src”属性是指向一个静态的，公开缓存的HTML文件的URL。所提供的URL必须来自一个不同于作为典型的内容分发网络（CDN）的主站域。</p>
<p><strong><code>name</code>属性</strong><br>iframe的”name”属性必须包含数据的序列化字符串，包含这些的配置属性：一个特定的SafeFrame位置的配置，元数据和渲染的内容。</p>
<p>在name属性中使用数据字符串使单向的，同步的消息传递，使得HTML文件中的JavaScript代码可以：读取相应的<code>window.name</code>属性，反序列化数据的字符串，设置第三方内容的环境，最后渲染内容。</p>
<p>这种技术允许包含JavaScript的<code>document.write</code>命令的HTML <code>SCRIPT</code>标签能够正常工作。</p>
<p><strong><code>Width</code>和<code>Height</code>属性</strong><br>iframe的宽度和高度需要被设置为与<code>$sf.host.PosConfig</code>对象的w和h字段相同的值。通常，iframe的宽度和高度应与渲染的内容的已知宽度和高度匹配。</p>
<p><strong><code>SCRIPT</code>标签</strong><br>一个<code>SCRIPT</code>标签应在创建的iframe中的HTML文档中存在。这个<code>SCRIPT</code>标签是第一个，最初的在HTML文档中以数据形式读取以进行处理并渲染的JavaScript。一个访问JavaScirpt文件的相关的URL可以备用，只要版本保持一致性（欲知更多关于URL在SafeFrame中的公约，请查阅第2.2.4节）。</p>
<p>此JavaScript文件必须（按顺序）执行以下操作：</p>
<ol>
<li>请检查HTML文档是否直接在顶级HTML文档的（是它的一个孩子）。如果不是，应报一个错误，并且不渲染任何内容。</li>
<li>读取和反序列化在<code>window.name</code>属性中传递的数据。</li>
<li>验证传递到<code>window.name</code>属性的数据，它通常是通过，确保反序列化对象包含所有必需的信息，包括GUID，来完成验证。如果验证失败，应产出一个错误，并且不渲染任何内容。</li>
<li>设置<code>window.name</code>属性为空字符串（””），使第三方不能在这上读取数据。</li>
<li>初始化发送跨域邮件到主站的SafeFrame的JavaScript的能力。</li>
<li>附加任何额外的标记和<code>name</code>属性中传递的元数据。</li>
<li>附加任何专有的逻辑，事件处理程序或其他细节到HTML文档（如<code>onload</code>事件）。</li>
<li>渲染第三方内容。</li>
</ol>
<p>HTML文件应该包含以下内容：</p>
<ul>
<li>CSS规则：设置文档中的<code>BODY</code>元素的margin和padding为0px。</li>
<li>一个单一的，绝对定位的<code>DIV</code>元素，作为<code>BODY</code>元素的直系子结点，最初位于top 0，left 0。这个元素在第三方内容希望在给定方向扩展的情况下被使用，以便能够保持正确的对齐。</li>
<li>一个单一的，<code>SCRIPT</code>元素，放置在给定的<code>DIV</code>元素，其中包含上面第4节的逻辑。该<code>SCRIPT</code>可能来自第三方，或者可能定义成内联。<br>例子：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">BODY</span> &#123; <span class="attribute">margin</span>:<span class="number">0px</span>; <span class="attribute">padding</span>:<span class="number">0px</span> &#125;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span> <span class="attr">scroll</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sf_align"</span> <span class="attr">style</span>=<span class="string">"position:absolute;top:0px;left:0px;"</span> <span class="attr">class</span>=<span class="string">"sf_el"</span>&gt;</span></span><br><span class="line">      		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/ext.js"</span> <span class="attr">class</span>=<span class="string">"sf_lib"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-5-通信机制的细节"><a href="#2-5-通信机制的细节" class="headerlink" title="2.5 通信机制的细节"></a>2.5 通信机制的细节</h3><p>为了促进一个SafeFrame容器内的主站和第三方之间高性能，安全的通信，HTML5的”postMessage”函数是一个主要的方法。此方法允许实施者，从一个HTML文档发送一个字符串到另一个来源于另一个地方的HTML文档，从而绕过”同源”政策。第三方内容被阻止调用此相同的方法去意图欺骗主站API因为消息（发送的字符串）被验证成功而做些错误的或恶意的事情。</p>
<p>想知道有关W3C同源策略的更多信息，请访问：<br><a href="http://en.wikipedia.org/wiki/Same_origin_policy" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Same_origin_policy</a></p>
<p>每当从容器收到信息，采取以下的步骤来确保它是被允许的：</p>
<ol>
<li><strong>二级域名/检查来源</strong><br>从外部HTML内容发来的一个消息的原始域，应该与用于创建SafeFrame容器的<code>$sf.host.Config</code>类的<code>renderFile</code>字段中传递的URL的域相吻合。如果起源不吻合，消息就会被忽略。</li>
<li>检查GUID<br>一个GUID被定义为，SafeFrame容器被渲染和应该与外部API传递的任何信息包含在一起的情况。当提供的GUID不存在或者未知时，则忽略该消息。</li>
<li>检查 HTML window对象的引用<br>第三方对象的window引用源应该指向一个当SafeFrame被渲染时创建的iframe窗口引用。如果对象的窗口参考不匹配，已经呈现的任何已知的SafeFrame容器，则忽略该消息。</li>
<li>处理序列消息<br>消息在先来的、先被发出的基础上被处理，而且应该总是尝试表示成功或失败的响应。</li>
</ol>
<h2 id="3-SafeFrame-标签"><a href="#3-SafeFrame-标签" class="headerlink" title="3. SafeFrame 标签"></a>3. SafeFrame 标签</h2><p>SafeFrame标签的高级别目标是封装第三方内容数据，以便主站可以管理内容的渲染和控制。以下各节描述SafeFrame标签，如何构建它们，以及如何处理它们。</p>
<h3 id="3-1-SafeFrame-标签结构-amp-要求"><a href="#3-1-SafeFrame-标签结构-amp-要求" class="headerlink" title="3.1 SafeFrame 标签结构&amp;要求"></a>3.1 SafeFrame 标签结构&amp;要求</h3><p>一个SafeFrame的标签是标准化的一组HTML标签。它必须由下列元素构成：</p>
<ul>
<li>与主机配置内联提供的，包含第三方内容的元数据的<code>SCRIPT</code>标签。</li>
<li>在<code>SCRIPT</code>标签中处理数据标签的JavaScript</li>
<li>(可选)当不支持JavaScript的时候，HTML上的后退的NOSCRIPT标签。</li>
<li>(可选)指定SafeFrame容器将渲染在哪的DIV标签</li>
</ul>
<p>只有主站应该在网页内容中插入SafeFrame标签。嵌套的SafeFrame标签不被支持。忽略任何包含在来自交换，中介，代理或任何其它二级出版发布伙伴或供应商的标签中的SafeFrame标签。</p>
<p>如果一个SafeFrame标签渲染在一个已经创建的SafeFrame容器内，渲染过程会假定容器已经创建并跳过以直接渲染第三方内容。直接在主站网页上只使用SafeFrame容器确保内容被正确地渲染，数据是共享的，并且该API可以被访问。</p>
<h3 id="3-1-1-SCRIPT标签"><a href="#3-1-1-SCRIPT标签" class="headerlink" title="3.1.1 SCRIPT标签"></a>3.1.1 <code>SCRIPT</code>标签</h3><p><code>SCRIPT</code>标签必须专门构建成与主站内容内嵌，并包括渲染在SafeFrame中的第三方内容的数据标签。</p>
<p><code>SCRIPT</code>标签必须包括以下内容：</p>
<ul>
<li>一个带有值为<code>iab_sf_data</code>的属性的类型</li>
<li>type属性设置为text/ X-的SafeFrame</li>
<li>一个JavaScript或JSON样的数据结构，是<code>$sf.host.Position</code>和<code>$sf.host.PosConfig</code>的代表。此结构在字面JavaScript语法中定义，并且可能包括被转换成一个<code>$sf.host.PosMeta</code>对象的附加元数据值。</li>
</ul>
<p><strong>例子：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'iab_sf_data'</span>&gt;</span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">		id: <span class="string">"LREC"</span>, <span class="comment">// ID of position object</span></span></span><br><span class="line"><span class="javascript">		html: <span class="string">"&lt;h1&gt;Hello World&lt;/h1&gt;"</span>, <span class="comment">//3rd party HTML content</span></span></span><br><span class="line">		conf:</span><br><span class="line">		&#123;</span><br><span class="line"><span class="javascript">			size: <span class="string">"300x250"</span> <span class="comment">//The size conf is required and denotes the</span></span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">	 	meta: <span class="comment">//optional shared meta information</span></span></span><br><span class="line">		&#123;</span><br><span class="line">			rmx:</span><br><span class="line">			 &#123;</span><br><span class="line"><span class="javascript">			 	sectionID: <span class="string">"14800347"</span>,</span></span><br><span class="line"><span class="javascript">			 	siteID: <span class="string">"140509"</span></span></span><br><span class="line">			 &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 上述的<code>SCRIPT</code>标签被定义为这样的原因如下：</p>
<ul>
<li><strong>type=”text/x-safeframe” </strong><br>由于该数据是一个内嵌的JavaScript结构，可能会发生在语法方面的问题，并且如果被当作JavaScript代码可能会损坏主站网页。设置脚本类型为“text/ X-SafeFrame”确保数据结构不被浏览器的JavaScript引擎拾起。</li>
<li><strong>class=”sf_data”</strong><br>在一个<code>SCRIPT</code>标签中，类属性不被处理;然而，指定sf_data类名使SafeFrame 主站API能标识那些它可以待会处理的数据的标签。</li>
</ul>
<h3 id="3-1-2-使用JavaScript处理数据标签"><a href="#3-1-2-使用JavaScript处理数据标签" class="headerlink" title="3.1.2 使用JavaScript处理数据标签"></a>3.1.2 使用JavaScript处理数据标签</h3><p><code>SCRIPT</code>标签必须包含将处理（一个或多个）数据标签的JavaScript代码。第3.1.2.1节至第3.1.2.3节提供了以三种不同的方式来处理数据标签的例子。</p>
<ul>
<li>例子3.1.2.1：一次性处理所有标签</li>
<li>例子3.1.2.2：先定义库</li>
<li>例子3.1.2.3：一次一个地处理标签</li>
</ul>
<h4 id="3-1-2-1-例子：一次性处理所有标签"><a href="#3-1-2-1-例子：一次性处理所有标签" class="headerlink" title="3.1.2.1 例子：一次性处理所有标签"></a>3.1.2.1 例子：一次性处理所有标签</h4><p>当数据标签在伴随<code>$sf.host.boot</code>方法的SafeFrame host库之前，都包含在<code>SCRIPT</code>标签内，host库被加载，并且引导程序找到并渲染代码中引导程序之上列出的数据标签。</p>
<p>下面的例子提供了两个，加载SafeFrame host库和引导程序的SafeFrame的数据标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- SafeFrame Inline Tag 1 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'iab_sf_data'</span>&gt;</span></span><br><span class="line">				&#123;</span><br><span class="line"><span class="javascript">					id: <span class="string">"LREC"</span>,</span></span><br><span class="line">					src:</span><br><span class="line"><span class="javascript">					<span class="string">"http://extserver.com/data-tag"</span>,</span></span><br><span class="line">					conf:</span><br><span class="line">					&#123;</span><br><span class="line">						w: 300,</span><br><span class="line">						h: 250,</span><br><span class="line"><span class="javascript">						dest: <span class="string">"tgtLREC"</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					meta:</span><br><span class="line">					&#123;</span><br><span class="line">						rmx:</span><br><span class="line">						&#123;</span><br><span class="line"><span class="javascript">							sectionID: <span class="string">"14800347"</span>,</span></span><br><span class="line"><span class="javascript">							siteID:  <span class="string">"140509"</span></span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- b/c a "dest" tag exists (the overall div container) --&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- container tags will be rendered here --&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- optional noscript section for fall back --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=  <span class="string">"http://ext.server.com/img.gif"</span>  /&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- SafeFrame Inline Tag 2 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span></span></span><br><span class="line"><span class="tag">				<span class="attr">class</span>=<span class="string">'iab_sf_data'</span>&gt;</span></span><br><span class="line">				&#123;</span><br><span class="line"><span class="javascript">					id: <span class="string">"LREC2"</span>,</span></span><br><span class="line">					src: "http://externalserver.com/data-</span><br><span class="line">					tag",</span><br><span class="line">					conf:</span><br><span class="line">					&#123;</span><br><span class="line">						w: 300,</span><br><span class="line">						h: 250</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- b/c a "dest" tag exists (the overall div container) --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- container tags will be rendered here --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- optional noscript section for fall back --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"http://ext.server.com/img.gif"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SafeFrame Host library / API --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'sf-api-boot.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- script code in external file will automatically 'boot' and read data tags --&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-1-2-2-在数据标签之前先定义SafeFrame-host库"><a href="#3-1-2-2-在数据标签之前先定义SafeFrame-host库" class="headerlink" title="3.1.2.2 在数据标签之前先定义SafeFrame host库"></a>3.1.2.2 在数据标签之前先定义SafeFrame host库</h4><p>实施一个SafeFrame标签的另一种方法是，先定义host库，然后提供数据标签，最后显式调用<code>$sf.host.boot</code>。<br>下面的例子演示了这种情况可能是如何编码的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://cdn.example.org/v1/sf-host.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- SafeFrame Host API configuration --&gt;</span></span></span><br><span class="line"><span class="javascript">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">		&#123;</span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> pubAPI = $sf.hostpub, conf;</span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">handle_start_pos_render</span>(<span class="params">id</span>)</span></span></span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		<span class="function"><span class="keyword">function</span> <span class="title">handle_end_pos_render</span>(<span class="params">id</span>)</span></span></span><br><span class="line">		&#123;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="javascript">		conf = <span class="keyword">new</span> pubAPI.Config(</span></span><br><span class="line">		&#123;</span><br><span class="line"><span class="javascript">			auto: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">			cdn: <span class="string">"http://l.yimg.com"</span>,</span></span><br><span class="line"><span class="javascript">			renderFile: <span class="string">"r.html"</span>,</span></span><br><span class="line"><span class="javascript">			root: <span class="string">"/SafeFrame/v1/html"</span>,</span></span><br><span class="line"><span class="javascript">			ver: <span class="string">"2-3-4"</span>,</span></span><br><span class="line">			positions:</span><br><span class="line">			&#123;</span><br><span class="line"><span class="javascript">			<span class="string">"LREC"</span>:</span></span><br><span class="line">				&#123;</span><br><span class="line"><span class="javascript">				dest:  <span class="string">"tgtLREC"</span>,</span></span><br><span class="line">				w: 300,</span><br><span class="line">				h: 250</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">		onStartPosRender:</span><br><span class="line">		handle_start_pos_render,</span><br><span class="line">		onEndPosRender: handle_end_pos_render</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;)();</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;</span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	id: <span class="string">"LREC"</span>,</span></span><br><span class="line">	src:</span><br><span class="line"><span class="javascript">	<span class="string">"http://externalserver.com/data-tag"</span>,</span></span><br><span class="line">	meta:</span><br><span class="line">		&#123;</span><br><span class="line">		rmx:</span><br><span class="line">			&#123;</span><br><span class="line"><span class="javascript">			sectionID: <span class="string">"14800347"</span>,</span></span><br><span class="line"><span class="javascript">			siteID: <span class="string">"140509"</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!-- b/c a "dest" tag exists (the overall div</span></span><br><span class="line"><span class="comment">	container) container tags will be rendered here --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"http://ext.server.com/img.gif"</span></span></span><br><span class="line"><span class="tag">		/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line">	$sf.host.boot();</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-1-2-3-有兄弟标签的SafeFrame数据标签自动引导-SafeFrame-Data-Tag-with-Sibling-Auto-Bootstrapping"><a href="#3-1-2-3-有兄弟标签的SafeFrame数据标签自动引导-SafeFrame-Data-Tag-with-Sibling-Auto-Bootstrapping" class="headerlink" title="3.1.2.3 有兄弟标签的SafeFrame数据标签自动引导(SafeFrame Data Tag with Sibling Auto-Bootstrapping)"></a>3.1.2.3 有兄弟标签的SafeFrame数据标签自动引导(SafeFrame Data Tag with Sibling Auto-Bootstrapping)</h4><p>在下面的例子中，每个提交的数据变量伴随着一个调用<code>$sf.host.boot</code>以在代码中加载列出的标签的二级标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SafeFrame Inline Tag 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;</span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	id: <span class="string">"LREC"</span>,</span></span><br><span class="line">	src:</span><br><span class="line">	"http://externalserver.com/da</span><br><span class="line">	ta-tag",</span><br><span class="line">	conf:</span><br><span class="line">		&#123;</span><br><span class="line">		w: 300,</span><br><span class="line">		h: 250,</span><br><span class="line"><span class="javascript">		dest: <span class="string">"tgtLREC"</span></span></span><br><span class="line">		&#125;,</span><br><span class="line">	meta:</span><br><span class="line">		&#123;</span><br><span class="line">		rmx:</span><br><span class="line">		&#123;</span><br><span class="line">			sectionID:</span><br><span class="line"><span class="javascript">			<span class="string">"14800347"</span>,</span></span><br><span class="line"><span class="javascript">			siteID: <span class="string">"140509"</span></span></span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- b/c a "dest" tag exists (the overall</span></span><br><span class="line"><span class="comment">	div container) container tags will be</span></span><br><span class="line"><span class="comment">	rendered here --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- optional noscript section for fall</span></span><br><span class="line"><span class="comment">	back --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"http://ext.server.com/img.gif"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"><span class="javascript">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> w = <span class="built_in">window</span>, s = w[<span class="string">"$sf"</span>],</span></span><br><span class="line">		b = s &amp;&amp; s.boot;</span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (!s) s = w[<span class="string">"$sf"</span>] = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (b &amp;&amp; <span class="keyword">typeof</span> b ==</span></span><br><span class="line"><span class="javascript">		<span class="string">"function"</span>) &#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">try</span> &#123; b(); &#125; <span class="keyword">catch</span> (e)</span></span><br><span class="line">		&#123; &#125;</span><br><span class="line"><span class="javascript">		&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.write(<span class="string">"&lt;scr"</span>,<span class="string">"ipt type='text/javascript' src='sf-host.js'&gt;&lt;/scr"</span>,<span class="string">"ipt&gt;"</span>)</span></span><br><span class="line">		;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)();</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Above script code will only load in</span></span><br><span class="line"><span class="comment">	host library one time, call boot for each</span></span><br><span class="line"><span class="comment">	tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">valign</span>=<span class="string">'top'</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- SafeFrame Inline Tag 2 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;</span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	id: <span class="string">"LREC2"</span>,</span></span><br><span class="line">	src:</span><br><span class="line"><span class="javascript">	<span class="string">"http://externalserver.com/data-tag"</span>,</span></span><br><span class="line">	conf:</span><br><span class="line">	&#123;</span><br><span class="line">		w: 300,</span><br><span class="line">		h: 250</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- b/c a "dest" tag exists (the overall div</span></span><br><span class="line"><span class="comment">	container) container tags will be rendered here</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- optional noscript section for fall back --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>= <span class="string">"http://ext.server.com/img.gif"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"><span class="javascript">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> w = <span class="built_in">window</span>, s = w[<span class="string">"$sf"</span>],</span></span><br><span class="line">		b = s &amp;&amp; s.boot;</span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (!s) s = w[<span class="string">"$sf"</span>] = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (b &amp;&amp; <span class="keyword">typeof</span> b == <span class="string">"function"</span>) &#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">try</span> &#123; b(); &#125; <span class="keyword">catch</span> (e)</span></span><br><span class="line">		&#123; &#125;</span><br><span class="line"><span class="javascript">		&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.write(<span class="string">"&lt;scr"</span>,<span class="string">"ipt type='text/javascript' src='sf-host.js'&gt;&lt;/scr"</span>,<span class="string">"ipt&gt;"</span>);</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)();</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Above script code will only load in host library one time, call boot for each tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-主站API实施细则"><a href="#4-主站API实施细则" class="headerlink" title="4. 主站API实施细则"></a>4. 主站API实施细则</h2><p>SafeFrame主站API使用第4.1节至第4.11节到定义的的命名空间，函数，和类。</p>
<h3 id="4-1-命名空间-sf-host"><a href="#4-1-命名空间-sf-host" class="headerlink" title="4.1 命名空间$sf.host"></a>4.1 命名空间<code>$sf.host</code></h3><p>此命名空间用来定义主站网页可以用于与SafeFrame容器交互的JavaScript类，对象和方法。</p>
<p>在<code>$sf.host</code>命名空间是SafeFrame配置，渲染，检查，并与SafeFrame容器互动的SafeFrame起始点。在这个空间中定义的一切都是公开，除非另有被点名的。</p>
<h3 id="4-2-命名空间-sf-host-conf"><a href="#4-2-命名空间-sf-host-conf" class="headerlink" title="4.2 命名空间$sf.host.conf"></a>4.2 命名空间<code>$sf.host.conf</code></h3><p>指定<code>host.conf</code>命名空间内联将允许SafeFrame容器（包括SafeFrame标签）与你指定的配置选项被加载（或引导）。这个对象是<code>$sf.host.Config</code>对象的字面版本(literal version)。</p>
<p><strong>相关章节</strong></p>
<ul>
<li>3 SafeFrame标签</li>
<li>4.4 类 <code>$sf.host.Config</code></li>
</ul>
<p><strong>例子1</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//JavaScript inline host config, used mainly for SafeFrame tags which want to auto boot the SafeFrame host API and render 3rd party content.</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (!sf) sf = w[<span class="string">"$sf"</span>] = &#123;&#125;;</span></span><br><span class="line">if (!pub) pub = sf.host = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">host.conf  =</span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">	debug:    <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">	ver:    <span class="string">"2-3-4"</span>,</span></span><br><span class="line">	positions:</span><br><span class="line">&#123;</span><br><span class="line">	LREC:</span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">		id:   <span class="string">"LREC"</span>,</span></span><br><span class="line"><span class="javascript">		dest:  <span class="string">"tgtLREC"</span>,</span></span><br><span class="line"><span class="javascript">		tgt:  <span class="string">"_self"</span>,</span></span><br><span class="line">		w:  300,</span><br><span class="line">		h:  250</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//Assuming a SafeFrame tag is placed below this configuration, it will read the config defined and use those values as the logic for the tag.</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>例子2</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SafeFrame Inline Tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tgtLREC"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">id:    <span class="string">"LREC"</span>,</span></span><br><span class="line"><span class="javascript">src:<span class="string">"http://ext.server.com/sf"</span>,</span></span><br><span class="line">conf:</span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">	dest:  <span class="string">"tgtLREC"</span>,</span></span><br><span class="line"><span class="javascript">	size:  <span class="string">"300x250"</span></span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">meta:</span><br><span class="line">&#123;</span><br><span class="line">	rmx:</span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">		sectionID:  <span class="string">"14800347"</span>,</span></span><br><span class="line"><span class="javascript">		siteID:  <span class="string">"140509"</span></span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">try</span> &#123;</span></span><br><span class="line">	$sf.host.boot();</span><br><span class="line"><span class="javascript">&#125; <span class="keyword">catch</span> (e) &#123;  &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-3-命名空间-sf-info"><a href="#4-3-命名空间-sf-info" class="headerlink" title="4.3 命名空间$sf.info"></a>4.3 命名空间<code>$sf.info</code></h3><p>该信息命名空间被保留用于存储有关SafeFrame容器的信息。</p>
<ul>
<li><code>&lt;static&gt; {Array} $sf.info.errs</code><br>包含有关发生在SafeFrame API的主站端的任何错误信息;细节是<strong>只读</strong>的。</li>
<li><code>&lt;static&gt; {Array} $sf.info.list</code><br>包含了关于每个SafeFrame的容器的信息，要么是要渲染的，要么是正在处理的;细节是<strong>只读</strong>的。</li>
</ul>
<p>无论何时SafeFrame主站API创建一个容器，它会适当地更新这些命名空间字段，允许检查和/或调试当前状态。</p>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub</span></span><br><span class="line">	&amp;&amp; host.Config,</span><br><span class="line"></span><br><span class="line"><span class="javascript">	CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_ROOT   = <span class="string">"/sf"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_VER  = <span class="string">"2-3-4"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_RFILE  = <span class="string">"/html/render.html"</span>,</span></span><br><span class="line">	CONF_TO  = 30;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="comment">//a render action success</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="comment">//listen for messages</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	w.render_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> conf, posConf, pos,confDesc;</span></span><br><span class="line"></span><br><span class="line">	if (Config) &#123;</span><br><span class="line">	conf = Config();</span><br><span class="line">	if (!conf) &#123;</span><br><span class="line">	confDesc  =</span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	debug:       <span class="literal">true</span>,</span></span><br><span class="line">	cdn:        CONF_CDN,</span><br><span class="line">	root:       CONF_ROOT,</span><br><span class="line">	ver:        CONF_VER,</span><br><span class="line">	renderFile:      CONF_RFILE,</span><br><span class="line">	to:        CONF_TO</span><br><span class="line">	onEndPosRender:    on_endposrender,</span><br><span class="line">	onPosMsg:      on_posmsg</span><br><span class="line">	&#125;;</span><br><span class="line"><span class="javascript">	conf = <span class="keyword">new</span> Config(confDesc);</span></span><br><span class="line">	&#125;</span><br><span class="line">	if (conf) &#123;</span><br><span class="line"><span class="javascript">	posConf = <span class="keyword">new</span> host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>);</span></span><br><span class="line">	posConf.w  = 300;</span><br><span class="line">	posConf.h  = 250;</span><br><span class="line">	posConf.z  = 1000;</span><br><span class="line"><span class="javascript">	pos    = <span class="keyword">new</span> host.Position(<span class="string">"LREC"</span>,<span class="string">"&lt;h1&gt;Hello World I'm an Ad&lt;h1&gt;"</span>,<span class="literal">null</span>,posConf);</span></span><br><span class="line">	host.render(pos);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="javascript">	w.remove_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> skipID = <span class="string">"LREC"</span>,  <span class="comment">// we want to skip the LREC position,</span></span></span><br><span class="line">	and leave it in the page</span><br><span class="line">	list   = $sf.info.list,</span><br><span class="line">	cnt     = list.length,</span><br><span class="line">	to_rem = [],</span><br><span class="line">	idx     = 0,</span><br><span class="line">	pos;</span><br><span class="line"><span class="javascript">	<span class="keyword">while</span> (cnt--)</span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	pos = list[idx++];  <span class="comment">//$sf.host.Position</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">if</span> (pos.id == skipID) <span class="keyword">continue</span>;</span></span><br><span class="line">	to_rem.push(pos.id);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="javascript">	$host.nuke(to_rem); &#125; <span class="comment">//remove all but the LREC position;</span></span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-4-类-sf-host-Config"><a href="#4-4-类-sf-host-Config" class="headerlink" title="4.4 类$sf.host.Config"></a>4.4 类<code>$sf.host.Config</code></h3><p><code>$sf.host.Config(conf)</code><br>主站配置类是用来描述了SafeFrame 主站API的配置选项的。该类配置主站使用的整体功能和设置。</p>
<blockquote>
<p> <strong>主站实现注意事项</strong><br> 主站类<code>$sf.host.Config</code>只应在的SafeFrame主站API中存在一次，并应在SafeFrame容器处于非活动状态的时候被构造来启动配置选项。<br>当构建时，如果不是先前定义的话，详细信息将写入内嵌<code>$sf.host.conf</code>命名空间中。</p>
</blockquote>
<p>如果没有指定初始参数，则返回现有配置。如果返回值为null，则不存在有效的配置。</p>
<p>当<code>$sf.host.Config</code>被构造，其他SafeFrame主站类从得到的配置读取，以确定容器的渲染方式。如果先前没有定义，任何所得的值会被添加到内联<code>$sf.host.conf</code>命名空间中。<br><strong>参数</strong></p>
<ul>
<li><code>{Object} conf</code><br>A list of key value pairs to use for the configuration.</li>
</ul>
<p><strong>字段</strong><br>以下字段可以在<code>conf</code>参数中返回：</p>
<ul>
<li><code>{String}</code> <strong>conf.cdn</strong><br>Host of the CDN used to fetch SafeFrame resources. This value should always be a different domain than your web page<br>　Sample value: <code>&quot;http://l.yimg.com&quot;</code></li>
<li><code>{String}</code> <strong>conf.ver</strong><br>The version number of the SafeFrame to be used, provided in the format [number]-[number]-[number].<br>　Sample value: `”2-3-4”</li>
<li><code>{String}</code> <strong>conf.renderFile</strong><br>The partial path and filename of the file from the cdn property that is used as the base document for external party content to be rendered using the SafeFrame.</li>
<li><code>{String}</code> <strong>conf.hostFile</strong><br>The URL string to the Host-side JavaScript file to be used.</li>
<li><code>{String}</code> <strong>extFile</strong><br>The URL string to the External Party-side JavaScript file to be used.</li>
<li><code>{String}</code> <strong>bootFile</strong><br>The URL string to the External Party-side JaveScript file to be used for bootstrapping the SafeFrames library, processing SafeFrames tags, and rendering content.</li>
<li><code>{Number}</code> <strong>conf.to</strong><br>The maximum amount of time (in seconds) that a render process can take before the operation can be aborted.<br>Rendering the external party content in a SafeFrame container is an asynchronous process, which is done by rendering an x-domain iframe tag. This number defines the maximum amount of time that the render operation can spend in the “loading” state before a time-out error is generated.<br>　 Sample value: <code>30</code></li>
<li><code>{Object}</code> <strong>conf.positions</strong><br>An object defining literal representations of <code>$sf.host.PosConfig</code> objects, keyed by id, to be used to configure each position in the page</li>
<li><code>{Boolean}</code> <strong>conf.auto</strong> <em>(Optional)</em><br>Whether or not automatic bootstrapping and rendering of SafeFrame tags should occur. Default is true. If set to false, SafeFrame tags will just add to the <code>$sf.info object</code>.</li>
<li><code>{String}</code> <strong>conf.msgFile</strong> <em>(Optional)</em><br>The partial path and filename of the file from the cdn property that is used to as a proxy for x-domain communication. Only required for older browsers that do not support HTML 5.</li>
<li><code>{Boolean}</code> conf.debug*<em> </em>(Optional)*<br>Whether or not to run the SDK in debug mode, which will also use un-minified JS code, separated files, etc.</li>
</ul>
<p><strong>事件</strong></p>
<ul>
<li><code>onBeforePosMsg(id, msgName, data)</code><br>A function that gets called each time a position sends a request for some functionality. Returning true cancels the command request.<br><strong>参数: </strong><br>　<code>{String}</code> <strong>id</strong><br>　The id of the position that has started its render process<br>　<code>{String}</code> <strong>msgName</strong><br>　The type of message being sent<br>　<code>{String}</code> <strong>data</strong> <em>(Optional)</em><br>　Data that gets passed through</li>
<li><code>onEndPosRender(id)</code><br>A  function which gets called each time a position has finished rendering<br><strong>参数: </strong><br>　<code>{String}</code> <strong>id</strong><br>　 The id of the position that has started its render process</li>
<li><code>onFailure(id)</code><br>A  function which gets called anytime a render call has failed or timed out<br><strong>参数: </strong><br>　 <code>{String}</code> <strong>id</strong><br>　 The id of the position that has started its render process</li>
<li><code>onPosMsg(id, msgName, data)</code><br>A callback function which gets called each time a position sends a message up to your web page<br><strong>参数: </strong><br>　 <code>{String}</code> <strong>id</strong><br>　 The id of the position that has started its render process<br>　 <code>{String}</code> <strong>msgName</strong><br>　The name / type of message being sent<br>　<code>{String}</code> <strong>data</strong> <em>(Optional)</em><br>　Data that gets passed through</li>
<li><code>onStartPosRender(id)</code><br>A callback function which gets called each time a position is about to be rendered<br><strong>参数: </strong><br>　 <code>{String}</code> <strong>id</strong><br>　The id of the position that has started its render process</li>
<li><code>onSuccess(id)</code><br>A callback function which gets called anytime a render call has successfully completed.<br><strong>参数: </strong><br>　<code>{String}</code> <strong>id</strong><br>　 The id of the position that has started its render process</li>
</ul>
<p><strong>相关章节</strong>:</p>
<ul>
<li>4.2 命名空间 <code>$sf.host.conf</code></li>
<li>4.5 类 <code>$sf.host.PosConfig</code></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub</span></span><br><span class="line">	&amp;&amp; host.Config,</span><br><span class="line"></span><br><span class="line"><span class="javascript">	CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_ROOT   = <span class="string">"/sf"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_VER  = <span class="string">"2-3-4"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_RFILE  = <span class="string">"/html/render.html"</span>,</span></span><br><span class="line">	CONF_TO    = 30;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="comment">//a render action success</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="comment">//listen for messages</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	w.init_SafeFrame  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> conf, confDesc;</span></span><br><span class="line"></span><br><span class="line">	if (Config) &#123;</span><br><span class="line">		conf = Config();</span><br><span class="line">		if (!conf) &#123;</span><br><span class="line">			confDesc  =</span><br><span class="line">			&#123;</span><br><span class="line"><span class="javascript">				debug:       <span class="literal">true</span>,</span></span><br><span class="line">				cdn:        CONF_CDN,</span><br><span class="line">				root:       CONF_ROOT,</span><br><span class="line">				ver:        CONF_VER,</span><br><span class="line">				renderFile:      CONF_RFILE,</span><br><span class="line">				to:        CONF_TO</span><br><span class="line">				onEndPosRender:    on_endposrender,</span><br><span class="line">				onPosMsg:      on_posmsg,</span><br><span class="line">				positions:</span><br><span class="line">				&#123;</span><br><span class="line"><span class="javascript">					<span class="string">"LREC"</span>:</span></span><br><span class="line">					&#123;</span><br><span class="line"><span class="javascript">					id:    <span class="string">"LREC"</span>,</span></span><br><span class="line">					w:    300,</span><br><span class="line">					h:    250,</span><br><span class="line">					z:    1000,</span><br><span class="line"><span class="javascript">					dest:  <span class="string">"tgtLREC"</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line"><span class="javascript">			conf = <span class="keyword">new</span> Config(confDesc);</span></span><br><span class="line">			if (conf) &#123;</span><br><span class="line"><span class="javascript">				alert(<span class="string">"SafeFrame Host Config successful"</span>);</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-5-类-sf-host-PosConfig"><a href="#4-5-类-sf-host-PosConfig" class="headerlink" title="4.5 类$sf.host.PosConfig"></a>4.5 类<code>$sf.host.PosConfig</code></h3><p><strong>$sf.host.PosConfig</strong><code>(posIDorObj, destID, baseConf)</code></p>
<p>该类描述了一个<code>$sf.host.Position</code>对象应该如何被渲染。每个唯一ID只能有一个<code>PosConfig</code>对象可以存在。如果多于一个<code>PosConfig</code>对象由相同的ID建造，原来的PosConfig的初始值将被覆盖。主站主机仍然可以支持具有相同特征的多个广告位（即两个唯一的LREC）;他们只是需要有不同的ID（即LREC1和LREC2）</p>
<p>类结构可被认为是一个工厂，其中，在内部，构成的所有实例都被监视，以便可以自动连接整体配置选项和数据。</p>
<p><strong>参数：</strong></p>
<ul>
<li><code>{String|Object}</code> <strong>posIDorObj</strong><br>If this value is provided as a string, then it is used as the id property of the instance. If the value is returned as an object, then it is a descriptor that populates the properties of the instance.</li>
<li><code>{String}</code> <strong>destID</strong><br>The HTML element ID attribute string into which the content is to be rendered.</li>
<li><code>{Object}</code> <strong>baseConf</strong>,<em>(Optional)</em><br>An optional object that defines a representation of an <code>$sf.host.Config</code> object and is used in cases where no initial Host configuration was pre-defined. This option enables a shortcut for automatic host configuration if necessary and is usually used in conjunction with SafeFrame tags. If specified when a Host configuration already exists, this parameter is ignored.</li>
</ul>
<p><strong>字段</strong></p>
<ul>
<li><code>bg</code><br>The background color to be used inside the safe frame. Default value is “transparent”.</li>
<li><code>css</code><br>Style-sheet text or a URI to a CSS file that defines additional CSS to be used inside the SafeFrame iframe. Default value is “”.</li>
<li><code>dest</code><br>The HTML element ID into which the content is to be rendered.</li>
<li><code>H</code><br>The height (in pixels) of the SafeFrame iframe to be created for the content specified.</li>
<li><code>id</code><br>A unique identifier for the position or content. Used to link the <code>$sf.host.Position</code> object with a configuration. Specifying the id as “DEFAULT” means that this configuration will be used as the default values for other <code>$sf.Position</code> objects created.</li>
<li><code>size</code><br>A string representing the width and height (in pixels) of the safe frame to be created for the content specified. Setting this value also sets the w and h properties respectively Example: <code>&quot;300x250&quot;</code></li>
<li><code>tgt</code><br>The target window name for where hyperlink clicks should be routed to unless otherwise specified. Default value is “_blank”. If a URL is provided, it opens in a new window. The values “_self” and “_parent” are NOT allowed and if provided the value “_top” is used instead.</li>
<li><code>w</code><br>The width (in pixels) of the SafeFrame iframe to be created for the content specified.</li>
<li><code>z</code><br>The z-index value to be used for the SafeFrame iframe.</li>
<li><code>supports</code><br>An object identifying the features that the host supports relative to the content specified.</li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li><code>toString()</code><br>A method that serializes the position into a string using query-string encoded syntax.</li>
</ul>
<p><strong>例子</strong><br> <code>//See $sf.host.Config example</code></p>
<h3 id="4-6-类-sf-host-Position"><a href="#4-6-类-sf-host-Position" class="headerlink" title="4.6 类$sf.host.Position"></a>4.6 类<code>$sf.host.Position</code></h3><p><code>**$sf.host.Position**(posIDorObj, html, meta, config)</code></p>
<p>一个用于描述在一个安全的框架中渲染的HTML内容的类。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{String|Object}</code> <strong>posIDorObj</strong><br>REQUIRED, if is a string, used as the id property of the instance. If is an object, it is used as a descriptor to fill out the properties of the instance.</li>
<li><code>{String}</code> <strong>html</strong><br>REQUIRED, the string content to be rendered into the safe frame described by this instance</li>
<li><code>{Object}</code> <strong>meta Optional</strong><br>An object with key/value pairs defining customizable metadata about the position</li>
<li><code>{Object}</code> <strong>config Optional</strong><br>An object representing position config overrides</li>
</ul>
<p><strong>字段</strong></p>
<ul>
<li><code>{Object}</code> <strong>config</strong><br>Config information defines how SafeFrame renders a position. This object can override values already set in the associated config.</li>
<li><code>{String}</code> <strong>html</strong><br>The HTML content to be rendered inside the safe frame, or a URL to HTML content returned that is returned using a SCRIPT tag.</li>
<li><code>{String}</code> <strong>id</strong><br>A unique identifier for the position. If present, this value is used to lookup a<br><code>$sf.host.PosConfig</code> object.</li>
<li><code>{Object}</code> <strong>meta</strong><br>Metadata information in the form of an object of any number, combination key, or value pairs to store host or content-related metadata.</li>
<li><p><code>{String}</code> <strong>src</strong><br>A URI to be used as a SCRIPT tag that renders the contents in the SafeFrame. Setting this value changes the value of the HTML property and is used mostly for short-hand purposes.<br>The purpose of this field is to enable content to be fetched when the HTML content is no readily available. Setting this property creates an HTTP request for content to the URI specified. Because the URI provided is in a SCRIPT context, content must be returned in JavaScript form. This process prevents the creation of other iframes that would otherwise damage the system because content within any created iframes is denied access to the external content API.<br>The URI provided may contain MACRO place holders that SafeFrame will populate. This feature can be used to gather information from a Web browser that can be passed in the HTTP request and is useful for cases when retrieved content requires information about the Web browser environment only available to the host.<br>SafeFrame populates the following values:</p>
<p>　- <code>{String} ${sf_ver}</code><br>　The string representation of the current version of SafeFrame<br>　- <code>{Number} ${ck_on}</code><br>　Indicates whether cookies are enabled on the browser: 1 for true, 0 for false.<br>　- <code>{String} ${flash_ver}</code><br>　Identifies which version of Flash is enabled in the browser. If Flash is not detected, the value is set to 0.</p>
</li>
</ul>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">define_content</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> pub = $sf.host, PosConfig = host.PosConfig, PosMeta = host.PosMeta,</span><br><span class="line">Pos = host.Position, pos, posConf, posMeta;</span><br><span class="line"></span><br><span class="line">  posConf   = <span class="keyword">new</span> PosConfig(<span class="string">"LREC"</span>, <span class="string">"tgtLREC"</span>);</span><br><span class="line">  posConf.w   = <span class="number">300</span>;</span><br><span class="line">  posConf.h  = <span class="number">250</span>;</span><br><span class="line">  posConf.z  = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">posMeta    = <span class="keyword">new</span> PosMeta(&#123;<span class="string">"context"</span>:<span class="string">"Music"</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//a shared meta object will now contain</span></span><br><span class="line">  <span class="comment">//  context:   "Music"</span></span><br><span class="line">  <span class="comment">//  sf_ver:   "1-0-1",</span></span><br><span class="line">  <span class="comment">//  flash_ver:  11</span></span><br><span class="line"></span><br><span class="line">  pos     = <span class="keyword">new</span> Pos(<span class="string">"LREC"</span>,</span><br><span class="line"><span class="string">"http://getsomeads.com?pos=LREC&amp;f=$&#123;flash_ver&#125;&amp;sf=$&#123;sf_ver&#125;"</span>, posMeta,</span><br><span class="line">posConf);</span><br><span class="line">  <span class="comment">//note that the $&#123;flash_ver&#125; and $&#123;sf_ver&#125; macros will get filled out</span></span><br><span class="line">automatically</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//so if flash 11 is installed, and we are using SafeFrame version 1</span></span><br><span class="line">  <span class="comment">//the URI for the script tag created will be</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// "http://getsomeads.com?pos=LREC&amp;f=11&amp;sf=1-0-1"</span></span><br><span class="line"></span><br><span class="line">  host.render(pos);</span><br></pre></td></tr></table></figure></p>
<p><strong>方法</strong></p>
<ul>
<li><code>toString()</code><br>A method that serializes the position into a string using query-string encoded syntax</li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub</span></span><br><span class="line">	&amp;&amp; host.Config,</span><br><span class="line"></span><br><span class="line"><span class="javascript">	CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_ROOT   = <span class="string">"/sf"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_VER  = <span class="string">"2-3-4"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_RFILE  = <span class="string">"/html/render.html"</span>,</span></span><br><span class="line">	CONF_TO    = 30;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="comment">//a render action success</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	 <span class="comment">//listen for messages</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	w.init_render  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	 <span class="keyword">var</span> conf, confDesc, posConf, pos;</span></span><br><span class="line"></span><br><span class="line">	if (Config) &#123;</span><br><span class="line">		conf = Config();</span><br><span class="line">		if (!conf) &#123;</span><br><span class="line">			confDesc  =</span><br><span class="line">			&#123;</span><br><span class="line"><span class="javascript">				debug:       <span class="literal">true</span>,</span></span><br><span class="line">				cdn:        CONF_CDN,</span><br><span class="line">				root:       CONF_ROOT,</span><br><span class="line">				ver:        CONF_VER,</span><br><span class="line">				renderFile:      CONF_RFILE,</span><br><span class="line">				to:        CONF_TO</span><br><span class="line">				onEndPosRender:    on_endposrender,</span><br><span class="line">				onPosMsg:      on_posmsg</span><br><span class="line">			&#125;;</span><br><span class="line"><span class="javascript">			conf = <span class="keyword">new</span> Config(confDesc);</span></span><br><span class="line">			if (conf) &#123;</span><br><span class="line"><span class="javascript">				posConf    = <span class="keyword">new</span></span></span><br><span class="line"><span class="javascript">				host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>);</span></span><br><span class="line">				posConf.w  = 300;</span><br><span class="line">				posConf.h  = 250;</span><br><span class="line">				posConf.z  = 1000;</span><br><span class="line"><span class="javascript">				pos    = <span class="keyword">new</span></span></span><br><span class="line"><span class="javascript">				host.Position(<span class="string">"LREC"</span>,<span class="string">"&lt;h1&gt;Hello World, I'm an Ad&lt;/h1&gt;"</span>);</span></span><br><span class="line"><span class="javascript">				<span class="comment">//note that b/c you constructed a</span></span></span><br><span class="line"><span class="javascript">				PosConfig object already <span class="keyword">with</span> an id <span class="keyword">of</span></span></span><br><span class="line"><span class="javascript">				<span class="string">"LREC"</span>, the configuration will be</span></span><br><span class="line">				grabbed</span><br><span class="line"></span><br><span class="line">				host.render(pos);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-7-类-sf-host-PosMeta"><a href="#4-7-类-sf-host-PosMeta" class="headerlink" title="4.7 类$sf.host.PosMeta"></a>4.7 类<code>$sf.host.PosMeta</code></h3><p><strong>$sf.host.PosMeta</strong><code>(shared_obj, ownerKey, obj)</code><br>此类定义一个特定的位置的元数据。元数据可以被共享，或键入，到特定的数据所有者（如果需要的话，允许隐藏）。此对象中存储的值，不能改变;被构造完时，他们才可以被设置，且是只读的。典型地存储在该对象的数据用于专有用途。</p>
<p>当一个SafeFrame容器被构造和渲染，这里存储的信息将提供给第三方API。在某些元数据需要被保护的情况下，共享和非共享内部对象被创建。例如，<code>ownerKey</code>属性可能是从一个服务器生成的签名。</p>
<p>在SafeFrame的容器内，函数用于访问元数据，使外部各方不能用迭代发现它。在这种情况下，用作<code>ownerKey</code>的签名可以在容器内部被用来访问它，且只允许向可信方访问。</p>
<p>每当<code>$sf.host.PosMeta</code>对象被创建了，以下信息会总是默认在”共享”部分中出现。</p>
<ul>
<li><code>{String} sf_ver</code><br>The string representation of the current version of SafeFrame</li>
<li><code>{Number} ck_on</code><br>Identified whether cookies are enabled on the browser: 1 for true, 0 for false.</li>
<li><p><code>{String} flash_ver</code><br>Identifies which version of Flash is enabled in the browser. If Flash is not detected, the value is set to 0.</p>
<p>我们也看看<code>$sf.host.Position</code>的”src”属性。当<code>PosMeta</code>对象被构造，并可以为了作为宏观字段的”src”属性在URL上自动被传递，上述的值被定义。</p>
</li>
</ul>
<p><strong>参数：</strong></p>
<ul>
<li><code>{Object}</code> <strong>shared_obj</strong> <em>(Optional)</em><br>An object containing key /value pairs for shared metadata</li>
<li><code>{String}</code> <strong>ownerKey</strong> <em>(Optional)</em><br>A key name to identify the owner or a particular set of metadata.</li>
<li><code>{Object}</code> <strong>obj</strong> <em>(Optional)</em><br>An object containing the key value pairs of metadata<br>欲知关于传递元数据的详情，请参阅相关的函数<code>$sf.ext.meta</code>。</li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li><code>{String|Number|Boolean}</code> <strong>value</strong><code>(propKey, ownerKey)</code><br>A method retrieves a metadata value from this object.<br>方法参数:</li>
<li><code>{String}</code> <strong>propKey</strong><br>The name of the value to retrieve</li>
<li><code>{String}</code> <strong>ownerKey</strong> (Optional)<br>The name of the owner key of the metadata value. By default, it is assumed to be shared, so nothing needs to be passed in unless looking for a specific proprietary value</li>
</ul>
<p><strong>返回:</strong></p>
<ul>
<li><code>{String|Number|Boolean}</code></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Host Side tags --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub &amp;&amp;</span></span><br><span class="line">host.Config, conf, posConf, posMeta, shared, non_shared, pos;</span><br><span class="line"></span><br><span class="line">if (Config) &#123;</span><br><span class="line"></span><br><span class="line">  conf = Config();</span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (!conf) conf = <span class="keyword">new</span></span></span><br><span class="line"><span class="javascript">Config(&#123;<span class="attr">debug</span>:<span class="literal">true</span>,<span class="attr">cdn</span>:<span class="string">"http://l.yimg.com"</span>,<span class="attr">root</span>:<span class="string">"/sf"</span>,</span></span><br><span class="line"><span class="javascript">	ver:<span class="string">"2-3-4"</span>,<span class="attr">renderFile</span>:<span class="string">"/html/render.html"</span>,<span class="attr">to</span>:<span class="number">30</span>&#125;)</span></span><br><span class="line">  if (conf) &#123;</span><br><span class="line"><span class="javascript">    posConf    = <span class="keyword">new</span> host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>);</span></span><br><span class="line">    posConf.w  = 300;</span><br><span class="line">    posConf.h  = 250;</span><br><span class="line">    posConf.z  = 1000;</span><br><span class="line"><span class="javascript">    shared   = &#123;<span class="string">"context"</span>: <span class="string">"Music"</span>&#125;;</span></span><br><span class="line">    non_shared = &#123;spaceID: 90900909090, adID: 3423423432423&#125;;</span><br><span class="line"><span class="javascript">	posMeta  = <span class="keyword">new</span> host.PosMeta(shared,<span class="string">"y"</span>,non_shared);</span></span><br><span class="line"><span class="javascript">	<span class="comment">//Use a signature for a key name (instead of "y"),</span></span></span><br><span class="line"><span class="javascript">	<span class="comment">//if you don't want 3rd parties accessing this data</span></span></span><br><span class="line"><span class="javascript">	pos    = <span class="keyword">new</span> host.Position(<span class="string">"LREC"</span>,<span class="string">"&lt;Hello World I'm an Ad&gt;"</span>,posMeta,posConf);</span></span><br><span class="line">    host.render(pos);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- External Party tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext, cntxt = ext &amp;&amp;</span></span><br><span class="line"><span class="javascript">ext.meta(<span class="string">"context"</span>), yspaceID = ext &amp;&amp; ext.meta(<span class="string">"spaceID"</span>,<span class="string">"y"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">alert(cntxt); <span class="comment">//will say Music;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">alert(yspaceID); <span class="comment">//will say 90900909090</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-8-函数-sf-host-boot"><a href="#4-8-函数-sf-host-boot" class="headerlink" title="4.8 函数 $sf.host.boot"></a>4.8 函数 <code>$sf.host.boot</code></h3><p>boot函数用于查找，处理和自动渲染数据的标签。它返回一个布尔值，响应是否已发现任何新的，未经加工的项。一旦进行处理，将所得的SafeFrame数据被添加到<code>$sf.info</code>。并且如果自动字段在<code>$sf.host.config</code>类中被设置为true，boot函数启动在数据定义的内容的渲染过程。</p>
<p><strong>返回值</strong></p>
<ul>
<li><code>{Boolean}</code><br>Indicates whether any new, unprocessed items have been found</li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>3   SafeFrame标签</li>
<li>4.3 命名空间<code>$sf.info</code></li>
<li>4.2 命名空间<code>$sf.host.conf</code></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SafeFrame Inline Tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tgtLREC"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/x-safeframe'</span> <span class="attr">class</span>=<span class="string">'sf_data'</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">	id: <span class="string">"LREC"</span>,</span></span><br><span class="line"><span class="javascript">	src: <span class="string">"http://secondarydomain.com/safeframe"</span>,</span></span><br><span class="line">	conf:</span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	dest: <span class="string">"tgtLREC"</span>,</span></span><br><span class="line"><span class="javascript">	size: <span class="string">"300x250"</span></span></span><br><span class="line">	&#125;</span><br><span class="line">	meta:</span><br><span class="line">	&#123;</span><br><span class="line">		rmx:</span><br><span class="line">		&#123;</span><br><span class="line"><span class="javascript">			sectionID:<span class="string">"14800347"</span>,</span></span><br><span class="line"><span class="javascript">			siteID: <span class="string">"140509"</span></span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">try</span> &#123;</span></span><br><span class="line">$sf.host.boot();</span><br><span class="line"><span class="javascript">&#125; <span class="keyword">catch</span> (e) &#123;  &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-9-函数-sf-host-status"><a href="#4-9-函数-sf-host-status" class="headerlink" title="4.9 函数$sf.host.status"></a>4.9 函数<code>$sf.host.status</code></h3><p>status函数用于确定位置的状态。它返回一个指示页面中的是否有任何位置当前在所渲染的过程中，或者如果有一些其它的操作，诸如扩展，正在发生的布尔值响应。<br><strong>参数</strong></p>
<ul>
<li><code>{Object} positions</code><br>可选的对象参数提供了一个空的对象引用，它可以被代表每个SafeFrame正在管理的$sf.host.Position对象（使用其ID属性）的密钥列表中的一个填充。每个键的值包含一个对象，该对象有一个代表容器的当前状态的状态代码串。在此版本中，可能值如下：<br>　•  ready: the container is available for rendering but has not yet been rendered<br>　•  loading: the container is currently in the process of being rendered<br>　•  expanding: the container is currently in the process of expanding<br>　•  expanded: the container is currently in expanded state<br>　•  collapsing: the container is currently in the process of collapsing<br>　•  error: the container has experienced an error that is preventing any interaction</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li><code>{Boolean}</code><br>Indicates whether or not the SafeFrame SDK is busy with an operation where the configuration cannot be updated</li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>5.1  命名空间<code>$sf.ext</code></li>
<li>5.7  函数<code>$sf.ext.status</code></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> posDetail = &#123;&#125;;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> isBusy    = $sf.host.status(posDetail);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> posID    = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> posInfo, posInfoStatus, posInfoDesc, posIDProc;</span></span><br><span class="line"></span><br><span class="line">if (isBusy) &#123;</span><br><span class="line"><span class="javascript"><span class="comment">//Cannot change configuration while operations are ongoing,</span></span></span><br><span class="line">inspect object to determine what is going on</span><br><span class="line"></span><br><span class="line">for (posID in posDetail)</span><br><span class="line">&#123;</span><br><span class="line">	posInfo = posDetail[posID];</span><br><span class="line"><span class="javascript">	<span class="comment">//object has "status", "id", and "desc" properties</span></span></span><br><span class="line"></span><br><span class="line">	posInfoStatus = posInfo.status;</span><br><span class="line"><span class="javascript">	<span class="keyword">switch</span> (posInfoStatus)</span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">		<span class="keyword">case</span> <span class="string">"expanding"</span>:</span></span><br><span class="line">		posIDProc = posID;</span><br><span class="line"><span class="javascript">		<span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">case</span> <span class="string">"collapsing"</span>:</span></span><br><span class="line">		posIDProc = posID;</span><br><span class="line"><span class="javascript">		<span class="keyword">break</span>;</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="javascript">	<span class="keyword">if</span> (posIDProc) <span class="keyword">break</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (posIDProc) alert(posIDProc + <span class="string">", is "</span> + posInfoStatus);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-10-函数-sf-host-nuke"><a href="#4-10-函数-sf-host-nuke" class="headerlink" title="4.10 函数$sf.host.nuke"></a>4.10 函数<code>$sf.host.nuke</code></h3><p>nuke函数用于从页面去除SafeFrame容器的位置。即使互动正在审理或正在发生，这个功能也可以调用，且将中止未完成的操作或渲染。</p>
<p>nuke函数被提供以迁就SafeFrame容器位置不能容易地在常规情况下除去的情况。例如，nuke函数可以被用来去除在不具有可以像它在Web浏览器那样被关闭的网页的本机应用中的SafeFrame容器的位置。</p>
<p>Nuke不需要把新的内容加载到现有的位置。渲染函数会处理设置新的内容位置。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{String|String[]}</code> <strong>id</strong><br>The id of the position to be removed; use “*” to remove all positions.</li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub</span></span><br><span class="line">&amp;&amp; host.Config,</span><br><span class="line"></span><br><span class="line"><span class="javascript">CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,</span></span><br><span class="line"><span class="javascript">CONF_ROOT   = <span class="string">"/sf"</span>,</span></span><br><span class="line"><span class="javascript">CONF_VER  = <span class="string">"2-3-4"</span>,</span></span><br><span class="line"><span class="javascript">CONF_RFILE  = <span class="string">"/html/render.html"</span>,</span></span><br><span class="line">CONF_TO  = 30;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript"><span class="comment">//a render action total failure</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript"><span class="comment">//listen for messages</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">w.render_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> conf, posConf, pos,confDesc;</span></span><br><span class="line"></span><br><span class="line">	if (Config) &#123;</span><br><span class="line">		conf = Config();</span><br><span class="line">		if (!conf) &#123;</span><br><span class="line">		confDesc  =</span><br><span class="line">		&#123;</span><br><span class="line"><span class="javascript">		debug: <span class="literal">true</span>,</span></span><br><span class="line">		cdn:    CONF_CDN,</span><br><span class="line">		root:    CONF_ROOT,</span><br><span class="line">		ver:    CONF_VER,</span><br><span class="line">		renderFile:  CONF_RFILE,</span><br><span class="line">		to:    CONF_TO</span><br><span class="line">		onEndPosRender:  on_endposrender,</span><br><span class="line">		onPosMsg:    on_posmsg</span><br><span class="line">		&#125;;</span><br><span class="line"><span class="javascript">		conf = <span class="keyword">new</span> Config(confDesc);</span></span><br><span class="line">		&#125;</span><br><span class="line">		if (conf) &#123;</span><br><span class="line"><span class="javascript">			posConf    = <span class="keyword">new</span> host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>);</span></span><br><span class="line">			posConf.w  = 300;</span><br><span class="line">			posConf.h  = 250;</span><br><span class="line">			posConf.z  = 1000;</span><br><span class="line"><span class="javascript">			pos      = <span class="keyword">new</span> host.Position(<span class="string">"LREC"</span>,</span></span><br><span class="line"><span class="javascript">				<span class="string">"&lt;h1&gt;Hello World I'm an Ad&lt;h1&gt;"</span>,<span class="literal">null</span>,posConf);</span></span><br><span class="line">			host.render(pos);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">w.remove_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">	host.nuke(<span class="string">"*"</span>); <span class="comment">//will remove all positions rendered or in</span></span></span><br><span class="line">	process of rendering.</span><br><span class="line"><span class="javascript">	<span class="comment">//could also pass "LREC" in this case, or</span></span></span><br><span class="line"><span class="javascript">	<span class="string">"LREC"</span>,<span class="string">"SKY"</span> <span class="keyword">if</span> <span class="string">"LREC"</span> and <span class="string">"SKY"</span> ads were</span></span><br><span class="line">	configured.</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-11-函数-sf-host-get"><a href="#4-11-函数-sf-host-get" class="headerlink" title="4.11 函数$sf.host.get"></a>4.11 函数<code>$sf.host.get</code></h3><p>get函数用于获取SafeFrame容器的位置配置的参考。当SafeFrame回调函数之一通知一个事件的主站代码，这个函数被用来获取与有疑问的位置关联的PosConfig对象的引用。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{String}</code> <strong>id</strong><br>The id of the position to get.</li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub</span></span><br><span class="line">	&amp;&amp; host.Config,</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="comment">// Configuration omitted for brevity</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> adPos = host.get(posID);</span></span><br><span class="line">		if(!success) &#123;</span><br><span class="line">		  host.nuke(posID);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-12-函数-sf-host-render"><a href="#4-12-函数-sf-host-render" class="headerlink" title="4.12 函数$sf.host.render"></a>4.12 函数<code>$sf.host.render</code></h3><p>render函数用于呈现一个或多个的SafeFrame位置。</p>
<p>你可以同时传递一个或多个<code>$sf.host.Position</code>对象（或对象的表现形式）以渲染一组容器。如果您传递回调函数给<code>$sf.host.Config</code>类，你会看到以以下顺序调用的回调函数：</p>
<ol>
<li>onStartPosRender</li>
<li>onEndPosRender (success / failure)</li>
<li>onBeforePosMsg (if ad sends commands such as for expansion etc, allows you to return true to reject the message)</li>
<li>onPosMsg (if ad sends commands such as for expansion, etc.)</li>
</ol>
<blockquote>
<p><strong>主站实现注意事项</strong><br>当<code>$sf.host.nuke</code>已被调用给当前渲染的位置，<code>onEndPosRender</code>回调不能初始化。</p>
</blockquote>
<p><strong>参数</strong></p>
<ul>
<li><code>{Object|Object[]|$sf.host.Position|$sf.host.Position[]}</code> <strong>data</strong><br>A representation of a $sf.host.Position object to be rendered</li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>4.4 类<code>$sf.host.Config</code></li>
<li>4.5 类<code>$sf.host.PosConfig</code></li>
<li>4.6 类<code>$sf.host.Position</code></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub</span></span><br><span class="line">&amp;&amp; host.Config,</span><br><span class="line"></span><br><span class="line"><span class="javascript">CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,</span></span><br><span class="line"><span class="javascript">CONF_ROOT   = <span class="string">"/sf"</span>,</span></span><br><span class="line"><span class="javascript">CONF_VER  = <span class="string">"2-3-4"</span>,</span></span><br><span class="line"><span class="javascript">CONF_RFILE  = <span class="string">"/html/render.html"</span>,</span></span><br><span class="line">CONF_TO  = 30;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript"><span class="comment">//a render action success</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript"><span class="comment">//listen for messages</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">w.render_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> conf, posConf, pos,confDesc;</span></span><br><span class="line"></span><br><span class="line">	if (Config) &#123;</span><br><span class="line">		conf = Config();</span><br><span class="line">		if (!conf) &#123;</span><br><span class="line">		confDesc =</span><br><span class="line">		&#123;</span><br><span class="line"><span class="javascript">			debug:       <span class="literal">true</span>,</span></span><br><span class="line">			cdn:        CONF_CDN,</span><br><span class="line">			root:        CONF_ROOT,</span><br><span class="line">			ver:        CONF_VER,</span><br><span class="line">			renderFile:      CONF_RFILE,</span><br><span class="line">			to:        CONF_TO</span><br><span class="line">			onEndPosRender:    on_endposrender,</span><br><span class="line">			onPosMsg:      on_posmsg</span><br><span class="line">		&#125;;</span><br><span class="line"><span class="javascript">		conf = <span class="keyword">new</span> Config(confDesc);</span></span><br><span class="line">		&#125;</span><br><span class="line">		if (conf) &#123;</span><br><span class="line"><span class="javascript">			posConf    = <span class="keyword">new</span> host.PosConfig(<span class="string">"LREC"</span>,<span class="string">"tgtLREC"</span>);</span></span><br><span class="line">			posConf.w  = 300;</span><br><span class="line">			posConf.h  = 250;</span><br><span class="line">			posConf.z  = 1000;</span><br><span class="line"><span class="javascript">			pos    = <span class="keyword">new</span> host.Position(<span class="string">"LREC"</span>,</span></span><br><span class="line"><span class="javascript">				<span class="string">"&lt;h1&gt;Hello World I'm an Ad&lt;h1&gt;"</span>,<span class="literal">null</span>,posConf);</span></span><br><span class="line">			host.render(pos);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">w.remove_content  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">	host.nuke(<span class="string">"*"</span>); <span class="comment">//will remove all positions rendered or in</span></span></span><br><span class="line">	process of rendering.</span><br><span class="line"><span class="javascript">	<span class="comment">//could also pass "LREC" in this case, or</span></span></span><br><span class="line"><span class="javascript">	<span class="string">"LREC"</span>,<span class="string">"SKY"</span> <span class="keyword">if</span> <span class="string">"LREC"</span> and <span class="string">"SKY"</span> ads</span></span><br><span class="line">	were configured.</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'tgtLREC'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], pub = sf &amp;&amp; sf.host, Config = pub</span></span><br><span class="line">	&amp;&amp; host.Config,</span><br><span class="line"></span><br><span class="line"><span class="javascript">	CONF_CDN   = <span class="string">"http://l.yimg.com"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_ROOT   = <span class="string">"/sf"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_VER  = <span class="string">"2-3-4"</span>,</span></span><br><span class="line"><span class="javascript">	CONF_RFILE  = <span class="string">"/html/render.html"</span>,</span></span><br><span class="line">	CONF_TO  = 30;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_endposrender</span>(<span class="params">posID, success</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="comment">//a render action success</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">on_posmsg</span>(<span class="params">posID, msg, data</span>)</span></span></span><br><span class="line">	&#123;</span><br><span class="line"><span class="javascript">	<span class="comment">//listen for messages</span></span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="5-第三方API实施"><a href="#5-第三方API实施" class="headerlink" title="5.第三方API实施"></a>5.第三方API实施</h2><p>SafeFrame第三方API使用的命名空间和函数在第5.1至5.10节中描述。</p>
<h3 id="5-1-命名空间-sf-ext"><a href="#5-1-命名空间-sf-ext" class="headerlink" title="5.1 命名空间$sf.ext"></a>5.1 命名空间<code>$sf.ext</code></h3><p><code>$sf.ext</code></p>
<p>命名空间ext提供了一系列用于检索关于所述容器的各种类型的信息的方法。第三方使用此命名空间来定义JavaScript类和对象，第三方广告可以用于在一个SafeFrame的环境中与主站内容进行交互。</p>
<p>被用于执行交互作用的SafeFrame方法是异步的，使得只能使用来自API的回调来确定任何成功或失败。这些方法也可保持其状态，这意味着它们被保护以免重复调用。</p>
<p>例如：</p>
<ul>
<li><code>$sf.ext.expand</code>调用被初始化.</li>
<li>在后台，SafeFrame处理<code>$ sf.ext.expand</code>并发送消息到主站。</li>
<li>如果<code>$ sf.ext.expand</code>再次被调用，处理第一次调用之前，因为只可以同时处理一个命令，它会被认为是一个错误。</li>
<li>如果是使用<code>$ sf.ext.register</code>提供的<code>$ sd.ext.expand</code>回调函数，那么函数被调用，而且一旦处理，成功或失败的通知会发出。</li>
<li>成功或失败的结果产生之后，<code>$ sf.ext.expand</code>可以再次调用。</li>
</ul>
<p><strong>事件</strong><br><code>&lt;static&gt;  $sf.ext.__status_update(status, data)</code></p>
<p>此事件提供第三方广告内容的状态。事件是从第三方SDK发射的，以便您可以通过<code>$ sf.ext.register</code>注册一个回调。</p>
<blockquote>
<p><strong>实现注意事项</strong><br><code>$ sf.ext.__ status_update</code>命名空间仅仅是隐式的，在JavaScript的层次结构不存在，但它在这里被调用，以记录当函数被调用，并提交给<code>$ sf.ext.register</code>的可能的参数。</p>
</blockquote>
<p>回调函数与至少两个参数被调用：第一，一个表示状态的变化的字符串；第二，一个表示生成状态更新事件的命令的字符串，这是由生成的状态更新事件的第三方API初始化的命令发出的。如果第二个参数是一个空字符串，其含义是主站已强制状态更新，而不是由第三方API正在发起的命令启动的。</p>
<p><strong>事件参数：</strong></p>
<ul>
<li><code>{String}</code> <strong>status</strong><br>The status code string notifying external content of container updates. The following status codes are available:<br>　<strong>expanded</strong><br>　The container has been expanded.<br>　<strong>collapsed</strong><br>　The container is in the default collapsed state.<br>　<strong>failed</strong><br>　A command initiated by the external party API did not succeed.<br>　<strong>geom-update</strong><br>　The container geometry information has changed. Sent for events such when the  browser window is resized, parent container scrolls, or other geometric changes.<br>　<strong><em>focus-change</em></strong><br>　<em>The browser window / tab has become active (“focus”), or become in-active  (“blur”).</em></li>
<li><p><code>{Object}</code> <strong>data</strong> <em>(Optional)</em><br>Contains information about the original message or action requested of the Host or supplied by the host as a result of changes in the page. The following objects may be issued:<br>　<strong>cmd</strong><br>　The original command sent with possible values such as: exp-ovr, exp-push, read-cookie, write-cookie, etc.<br>　<strong>reason</strong><br>　Description information about whether the command succeeded or failed.<br>　<strong>info</strong><br>　The information sent as part of the command echoed back to the caller, such as dimensions for expansion, the data to set for a cookie, etc.</p>
<p><strong>相关章节</strong></p>
<ul>
<li>5.2 函数<code>$sf.ext.register</code></li>
<li>5.5 函数<code>$sf.ext.expand</code></li>
</ul>
</li>
</ul>
<h3 id="5-2-函数-sf-ext-register"><a href="#5-2-函数-sf-ext-register" class="headerlink" title="5.2 函数$sf.ext.register"></a>5.2 函数<code>$sf.ext.register</code></h3><p><code>$sf.ext.register(initWidth, initHeight, cb)</code></p>
<p>可用性：同步（可随时请求）</p>
<p>第三方注册函数注册SafeFrame平台，以接受SafeFrame第三方API调用。第三方广告声明初始的（折叠的）的宽度和高度。除了宽度和高度，此函数还可以定义一个回调函数，通知有关各种状态信息的第三方内容。</p>
<p>最初的宽度和高度参数是必需的，以便SafeFrame通知主站渲染第三方内容所需的呈现空间。回调函数是返回每一个命令处理的成功或错误代码，通知第三方发送的每一个命令的执行状态的方法。然后，第三方可做出相应的反应。在等待成功或失败通知的时候，命令应该只被调用一次。在成功或失败通知之前，任何后续的调用将被忽略。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{Number}</code> <strong>initWidth</strong><br>The initial / original width of the 3rd party content</li>
<li><code>{Number}</code> <strong>initHeight</strong><br>The initial / original height of the 3rd party content</li>
<li><code>{Event}</code> <strong>cb</strong><br>An optional callback function that will be called as a notification of event status</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li><code>void</code></li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>第5.1节里的事件细节</li>
</ul>
<p><strong>例子</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- External Party tag --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">status_update</span>(<span class="params">status, data</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if (ext) &#123;</span><br><span class="line"><span class="javascript">  <span class="keyword">try</span> &#123;</span></span><br><span class="line">    ext.register(300, 250, status_update);</span><br><span class="line"></span><br><span class="line"><span class="javascript">alert(ext.meta(<span class="string">"context"</span>));</span></span><br><span class="line"><span class="javascript"><span class="comment">//read some metadata passed in from the host side</span></span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">"no SafeFrame available"</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="5-3-函数-sf-ext-supports"><a href="#5-3-函数-sf-ext-supports" class="headerlink" title="5.3 函数 $sf.ext.supports"></a>5.3 函数 <code>$sf.ext.supports</code></h3><p><code>$sf.ext.supports()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>返回一个有代表这个特定容器的什么功能已被打开或关闭的键的对象。</p>
<p><strong>返回</strong></p>
<ul>
<li><code>{Object}</code><br>An object containing a list of SafeFrame container features that are available, defined as follows:<br>　<code>{Boolean} exp-ovr</code><br>Whether or not expansion is allowed in overlay mode. Default value is true.<br>　<code>{Boolean} exp-push</code><br>　Whether or not expansion is allowed in push mode. Push expansion, a method of content expansion in which Host content is “pushed” instead of expanding over the content, is not yet supported in SafeFrame but may be supported separately by the Host. Default value is false.<br>　<code>{Boolean} read-cookie</code><br>　Whether or not the host allows external party content to read host cookies. Default value is false.<br>　<code>{Boolean} write-cookie</code><br>　Whether or not the host allows external party content to write cookies to the host domain. Despite value of true, the host may reject cookie values when offered if deemed appropriate. Default value is false.</li>
</ul>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sample JavaScript implementation</span></span><br><span class="line"><span class="comment">//Let's say that a 300x250 ad has been declared to fully expand to 400</span></span><br><span class="line">pixels to the left and <span class="number">200</span> pixels to the top.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">feature_check</span>(<span class="params">which</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = $sf.ext.supports();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (o &amp;&amp; o[which]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">expand</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (feature_check(<span class="string">"exp_push"</span>)) &#123;</span><br><span class="line">    $sf.ext.expand(&#123;<span class="attr">l</span>:<span class="number">400</span>,<span class="attr">t</span>:<span class="number">200</span>,<span class="attr">push</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-4-函数-sf-ext-geom"><a href="#5-4-函数-sf-ext-geom" class="headerlink" title="5.4 函数$sf.ext.geom"></a>5.4 函数<code>$sf.ext.geom</code></h3><p><code>$sf.ext.geom()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>所述的geom函数使SafeFrame容器的几何尺寸和位置，与它的与浏览器或应用程序窗口和其中主站内容正在被观看的设备的屏幕边界相关的内容交换。</p>
<blockquote>
<p><strong>主站实现注意事项</strong><br>如果调用，主站需要返回所请求的值。</p>
</blockquote>
<p>该信息可用于：</p>
<ul>
<li>决定内容扩展的可用的方向和尺寸</li>
<li>确定SafeFrame容器是否“在视图中”</li>
</ul>
<blockquote>
<p><strong>广告可见度注</strong><br>SafeFrame提供了可在根据接受的工业建议的可用性方面报告的信息；然而，SafeFrame不直接报告可见度指标。一个对于报告可见度是必要的指标是持续时间，它必须通过注册状态更新监听器来得到，以确定为<code>self.iv</code>被注册为<code>true</code>要用多久的持续时间。如果要了解关于<code>$ sf.ext.register</code>功能的详细信息，请查阅第5.2节。</p>
</blockquote>
<p><strong>返回</strong></p>
<ul>
<li><p><code>{Object} g</code><br>An object containing sub objects with geometric information about the container. Geometric information may be returned as described in the following lists</p>
<p><strong>win</strong><br>Identifies the location, width, and height (in pixels) of the browser or application window boundaries relative to the device screen.<br>　•  {Number} t<br>　The y coordinate (in pixels) of the top boundary of the browser or application window relative to the screen<br>　•  {Number} b<br>　The y coordinate (in pixels) of the bottom boundary of the browser or application window relative to the screen<br>　•  {Number} l<br>　The x coordinate (in pixels) of the left boundary of the browser or application window relative to the screen<br>　•  {Number} r<br>　The x coordinate (in pixels) of the right boundary of the browser or application window relative to the screen<br>　•  {Number} w<br>　The width (in pixels) of the browser or application window (win.r – win.l)<br>　•  {Number} h<br>　•  The height (in pixels) of the browser or application window (win.b – win.t)<br>　<br><strong>self</strong><br>Identifies the z-index and location, width, and height (in pixels) of the SafeFrame container relative to the browser or application window (win). In addition, width, height, and area percentage of SafeFrame content in view is provided, based on how much of the container is located within the boundaries of the browser or application window (win).<br>　•  {Number} t<br>　The y coordinate (in pixels) of the top boundary of the SafeFrame container<br>　•  {Number} l<br>　The x coordinate (in pixels) of the left side boundary of the SafeFrame container<br>　•  {Number} r<br>　The x coordinate (in pixels) of the right side boundary of the SafeFrame container (self.l + width of container)<br>　•  {Number} b<br>　The y coordinate (in pixels) of the bottom boundary of the SafeFrame container (self.t + height of container)<br>　•  {Number} xiv<br>　The percentage (%) of width for the SafeFrame container that is in view (formatted as “0.14” or “1”)<br>　•  {Number} yiv<br>　•  The percentage (%) of height for the SafeFrame container that is in view (formatted as “0.14” or “1”)<br>　•  {Number} iv<br>　The percentage (%) of area for the SafeFrame container that is in view (formatted as “0.14” or “1”)<br>　•  {Number} z<br>　The Z-index of the SafeFrame container<br>　•  {Number} w<br>　The width (in pixels) of the SafeFrame container<br>　•  {Number} h<br>　The height (in pixels) of the SafeFrame container<br>　<br><strong>exp</strong><br>Identifies the expected distance available for expansion within the host content along with information about whether controls allow the end user to scroll the page. If “scrollable,” the SafeFrame content can expand to dimensions greater than those provided.<br>　•  {Number} t<br>　The number of pixels that can be expanded upwards<br>　•  {Number} l<br>　The number of pixels that can be expanded left<br>　•  {Number} r<br>　The number of pixels that can be expanded right<br>　•  {Number} b<br>　The number of pixels that can be expanded down<br>　•  {Number/Boolean} xs<br>　A response that indicates whether the host content is scrollable along the x-axis (1 = scrollable; 0 = not scrollable)<br>　•  {Number/Boolean} yx<br>　A response that indicates whether the host content is scrollable along the y-axis (1 = scrollable; 0 = not scrollable)<br>　<br>由于计算几何信息和交换消息会影响性能，几何信息应只在以下时间段更新：</p>
<p>　<strong>SafeFrame容器的首次渲染</strong><br>　当SafeFrame容器首次被渲染时，<code>$sf.ext.geom</code>应被处理，并与要渲染的第三方内容一起发送结果。<br>　<br>　<strong>当改变SafeFrame容器的大小或位置时</strong><br>　当使用下列功能之一改变容器尺寸或位置时，<code>$ sf.ext.geom</code>函数应该被处理：<br>　　o  <code>$sf.ext.expand</code><br>　　o  <code>$sf.ext.collapse</code><br>　　<br>　<strong>当来源于主站的外部更新被接收时</strong><br>　　o  收到来自从其中该容器的几何形状已经被主站自己更新的主站端的信息，例如强制内容折叠。查看注册回调消息。<br>　　o  在所有可视面积的滚动，但是只允许每秒一个更新（节流）。<br>　　o  在所有可视面积的大小调整，但是只允许每秒一个更新（节流）。</p>
</li>
</ul>
<blockquote>
<p><strong>主站实现注意事项</strong><br>对于滚动或调整事件，SafeFrames主站实施应该只侦听要么是裁剪或滚动上面的SafeFrame容器上的第一个父HTML元素的事件。</p>
</blockquote>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sample JavaScript implementation</span></span><br><span class="line"><span class="comment">//Let's say that a 300x250 ad has been declared to fully expand to 400 pixels</span></span><br><span class="line">to the left and <span class="number">200</span> pixels to the top.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">expand</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext, g, ex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ext) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        g  = ext.geom();</span><br><span class="line">        ex  = g &amp;&amp; g.exp;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(ex.l) &gt;= <span class="number">400</span> &amp;&amp; <span class="built_in">Math</span>.abs(ex.t) &gt;= <span class="number">200</span>) &#123;</span><br><span class="line">            ext.expand(&#123;<span class="attr">l</span>:<span class="number">400</span>,<span class="attr">t</span>:<span class="number">200</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">//do not expand, not enough room</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//api expansion not supported</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (status == <span class="string">"expanded"</span>) &#123;</span><br><span class="line">      <span class="comment">// The ad has finished expanding</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-5-函数-sf-ext-expand"><a href="#5-5-函数-sf-ext-expand" class="headerlink" title="5.5 函数$sf.ext.expand"></a>5.5 函数<code>$sf.ext.expand</code></h3><p><code>$sf.ext.expand(obj)</code></p>
<p>可用性：异步（仅第一个请求被接受;另外的请求被拒绝，直到最初的请求被处理）</p>
<p>此方法扩展SafeFrame容器到指定的几何位置，允许媒介扩张。每个方向上的像素是相对于由init寄存器方法声明的原始偏移值的绝对位置。如果没有初始化方法就调用此方法，一个错误可能会被抛出，而且它会被忽略。扩展方法只能从初始大小调用，以保持性能。</p>
<p>SafeFrame中不支持补间，所以每当它需要扩大到其最大尺寸时，任何动画必须由第三方在容器内进行处理和调用此方法。</p>
<p>至少所述偏移参数之一是强制性的。如果所有的参数丢失，调用将被忽略，而且可能会抛出一个错误。在这个方法结束时，第三方注册执行的状态。如果SafeFrame的iframe是已经在最大尺寸，调用将被忽略。</p>
<p><strong>参数：</strong></p>
<ul>
<li><code>{Object}</code> <strong>obj</strong><br>A descriptor object that defines the top, left, bottom, right coordinates for expansion. At minimum, 1 value must be specified.</li>
<li><code>{Number}</code> <strong>obj.t</strong><br>The new top coordinate (y) relative to the current top coordinate.</li>
<li><code>{Number}</code> <strong>obj.l</strong><br>The new left coordinate (x) relative to the current left coordinate.</li>
<li><code>{Number}</code> <strong>obj.r</strong><br>The new right coordinate (x+width) relative to the current right coordinate (x+width).</li>
<li><code>{Number}</code> <strong>obj.b</strong><br>The new bottom coordinate (y+height) relative to the current top coordinate (y+height).</li>
<li><p><code>{Boolean}</code> <strong>obj.push</strong><br>Whether or not expansion should push the host content, rather than overlay.</p>
<blockquote>
<p><strong>实现注意事项</strong><br>“推”的功能是一种在在第三方内容扩展方向（或多个）上“推动”主站内容的拓展功能。对于支持推动扩大功能的技术不是直接由SafeFrame1.0规定的。主站必须明确声明Push是否在<code>$ sf.host.posConfig</code>对象的<code>supports</code>属性中被允许。如果允许，主站必须能够在技术上支持该功能。</p>
</blockquote>
</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li><strong><em>void</em></strong></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sample JavaScript implementation</span></span><br><span class="line"><span class="comment">//Let's say that a 300x250 ad has been declared to fully expand to 400</span></span><br><span class="line">pixels to the left and <span class="number">200</span> pixels to the top.</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> expansionPending = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> expanded      = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">expand</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ext) &#123;</span><br><span class="line">      ext.expand(&#123;<span class="attr">l</span>:<span class="number">400</span>,<span class="attr">t</span>:<span class="number">200</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//api expansion not supported</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (status == <span class="string">"expanded"</span>) &#123;</span><br><span class="line">      <span class="comment">// The ad has finished expanding</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-6-函数-sf-ext-collapse"><a href="#5-6-函数-sf-ext-collapse" class="headerlink" title="5.6 函数$sf.ext.collapse"></a>5.6 函数<code>$sf.ext.collapse</code></h3><p><code>$sf.ext.collapse()</code></p>
<p>可用性：异步（仅第一个请求被接受;另外的请求被拒绝，直到最初的请求被处理）</p>
<p>这种方法折叠SafeFrame容器到原来的几何位置。这个初始大小应已在在调用此方法之前的初始化注册方法中被声明。如果此方法没有伴随着初始化注册方法被调用，它可能会抛出一个错误，并且将被忽略。如果已经在初始大小了，调用将被忽略。</p>
<p><strong>返回</strong></p>
<ul>
<li><code>Void</code></li>
</ul>
<p><strong>例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sample JavaScript implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">collapse</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[<span class="string">"$sf"</span>], ext = sf &amp;&amp; sf.ext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ext) &#123;</span><br><span class="line">      ext.collapse();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//api expansion not supported</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (status == <span class="string">"expanded"</span>) &#123;</span><br><span class="line">      <span class="comment">// Expanded</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="string">"collapsed"</span>) &#123;</span><br><span class="line">      <span class="comment">//we called collapse</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-7-函数-sf-ext-status"><a href="#5-7-函数-sf-ext-status" class="headerlink" title="5.7 函数$sf.ext.status"></a>5.7 函数<code>$sf.ext.status</code></h3><p><code>$sf.ext.status()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>返回关于容器的当前状态的信息，例如，扩展命令是否正在等待处理等等。以下的是可被返回（更可能在后续版本中添加）的状态代码串的列表。一些字符串类似于在您调用<code>$ sf.ext.register</code>提供的的函数中收到的状态更新。</p>
<p><strong>返回</strong></p>
<ul>
<li><code>{String}</code> One of the following strings may be returned<br><strong>expanded</strong><br>Denotes that the container has been expanded.<br><strong>expanding</strong><br>Denotes that an expansion command is pending.<br><strong>collapsed</strong><br>Denotes that the container is in the default collapsed state.<br><strong>collapsing</strong><br>Denotes that a collapse command is pending.</li>
</ul>
<p><strong>相关章节</strong></p>
<ul>
<li>5.2 函数<code>$sf.ext.register</code></li>
</ul>
<h3 id="5-8-函数-sf-ext-meta"><a href="#5-8-函数-sf-ext-meta" class="headerlink" title="5.8 函数$sf.ext.meta"></a>5.8 函数<code>$sf.ext.meta</code></h3><p><code>$sf.ext.meta(propName, ownerKey)</code></p>
<p>用于检索关于由主站指定的SafeFrame的位置的元数据。主站可以指定有关第三方内容的其他元数据。主站指定使用<code>$sf.host.PosMeta</code>类此的元数据。</p>
<p>因为主机可能想使用一些这方面的数据为自己的目的，而不是与外方共享，第三方内容必须使用此功能来访问元数据信息。这样，第三方内容无法扫描任何主站不希望分享的值。</p>
<p><strong>参数</strong></p>
<ul>
<li><code>{String} propName</code><br>The name of the metadata value you want to read</li>
<li><code>{String} ownerKey</code> <em>(Optional)</em><br>The name of the owner object from which to read the property. By default this value is “shared” meaning look in common data.</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li><code>{String|Number|Boolean}</code></li>
</ul>
<p><strong>例子：1 -检索共享的元数据值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//External Party JavaScript code (inside SafeFrame container)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> posID  = $sf.ext.meta(<span class="string">"pos"</span>);</span><br></pre></td></tr></table></figure></p>
<p><strong>例子：2 -检索非共享的元数据值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//External Party JavaScript code (inside SafeFrame container)</span></span><br><span class="line"><span class="comment">//"rmx" == owner of metadata blob, "sectionID" is key to retrieve</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sectionID  = $sf.ext.meta(<span class="string">"sectionID"</span>, <span class="string">"rmx"</span>);</span><br></pre></td></tr></table></figure></p>
<p><strong>相关章节</strong></p>
<ul>
<li>5.8 函数 <code>$sf.ext.meta</code></li>
</ul>
<h3 id="5-9-函数-sf-ext-cookie"><a href="#5-9-函数-sf-ext-cookie" class="headerlink" title="5.9 函数$sf.ext.cookie"></a>5.9 函数<code>$sf.ext.cookie</code></h3><p><code>$sf.ext.cookie(cookieName, cookieData)</code></p>
<p>可用性：异步（读/写要求传递函数到<code>$sf.ext.register</code>）</p>
<p>将消息发送到主站以在主站域名读或写cookie。请注意，如果主站支持此功能，cookie数据是不能直接从该函数返回，因为它是异步的。你必须传递一个函数到<code>$sf.ext.register</code>，然后这将在Cookie数据设置或检索时被调用。</p>
<blockquote>
<p><strong>主站实现注意事项</strong><br>允许一个第三方来读取或设置cookies，会带来某些安全页面，如登录页面，的安全风险。在允许之前，考虑允许cookie的读取或设置对于网页是否安全。</p>
</blockquote>
<p><strong>参数</strong></p>
<ul>
<li><code>{String} cookieName</code><br>The name of the cookie to set or read.</li>
<li><code>{Object} cookieData</code>  <em>(Optional)</em><br>An object that contains the value, and potentially an expiration date, of a cookie to be set.  If not set, the Host assumes that External Party content is only interested in reading the Host cookie value. If set but no expiration date is given, the Host assumes that any cookie written to the Host domain is intended to remain indefinitely.<br>如果提供了以下参数:<br>　<code>{String} cookieData.info</code> <em>(Required)</em><br>　A string value for the cookie.<br>　<code>{Date} cookieData.expires</code> <em>(Optional)</em><br>　A date for when the cookie should expire.</li>
</ul>
<p><strong>例子1：读取一个主站cookie</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sample JavaScript implementation</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[“$sf”], sfAPI = sf &amp;&amp; sf.ext, myPubCookieName =</span><br><span class="line">“foo”, myPubCookieValue = “”, fetchingCookie = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">register_content</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sfAPI) sfAPI.register(<span class="number">300</span>,<span class="number">250</span>,status_update_handler);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">//console.log(“no sfAPI -- &gt; “ + e.message);</span></span><br><span class="line">       sfAPI = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_host_cookie</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (sfAPI &amp;&amp; sfAPI.supports(“read-cookie”)) &#123;</span><br><span class="line">fetchingCookie = sfAPI.cookie(“foo”);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      fetchingCookie = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (status == <span class="string">"read-cookie"</span>) &#123;</span><br><span class="line">    myPubCookieValue = data;</span><br><span class="line">    <span class="comment">//now do whatever here since you have the cookie data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>例子2：写一个主站cookie</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sample JavaScript implementation</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>, sf = w[“$sf”], sfAPI = sf &amp;&amp; sf.ext, myPubCookieName =</span><br><span class="line">“foo”, myPubCookieValue = “”, settingCookie = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">register_content</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sfAPI) sfAPI.register(<span class="number">300</span>,<span class="number">250</span>,status_update_handler);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">//console.log(“no sfAPI -- &gt; “ + e.message);</span></span><br><span class="line">       sfAPI = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_host_cookie</span>(<span class="params">newVal</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e, cookieData = &#123;<span class="attr">value</span>:newVal,<span class="attr">expires</span>:<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">11</span>, <span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (sfAPI &amp;&amp; sfAPI.supports(“write-cookie”)) &#123;</span><br><span class="line">settingCookie = sfAPI.cookie(“foo”, cookieData);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      settingCookie = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update_handler</span>(<span class="params">status, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (status == <span class="string">"write-cookie"</span>) &#123;</span><br><span class="line">    myPubCookieValue = data.info;</span><br><span class="line">    <span class="comment">//now do whatever here since the write was successful</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == “failed” &amp;&amp; data.cmd == “write-cookie”) &#123;</span><br><span class="line">    <span class="comment">//data.cmd contains original command sent</span></span><br><span class="line">       <span class="comment">//data.reason contains a description of failure</span></span><br><span class="line">    <span class="comment">//data.info contains the object of information sent to host</span></span><br><span class="line">    settingCookie = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//cookie not allowed to be set</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-10-函数-sf-ext-inViewPercentage"><a href="#5-10-函数-sf-ext-inViewPercentage" class="headerlink" title="5.10 函数$sf.ext.inViewPercentage"></a>5.10 函数<code>$sf.ext.inViewPercentage</code></h3><p><code>$sf.ext.inViewPercentage()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>返回其中容器是在屏幕上视图内的区域的百分比，作为0到100之间的整数。</p>
<blockquote>
<p><strong>实现注意事项</strong><br>在这个函数提供的信息在<code>$ sf.ext.geom</code>函数内是可用的，作为<code>self.iv</code>值返回。此附加函数被提供作为更方便访问该信息的便利。</p>
</blockquote>
<p><strong>返回：</strong></p>
<ul>
<li><code>{Number}</code> The percentage of area that a container is in view on the screen</li>
</ul>
<p><strong>行业标准可广告见度</strong><br>业界公认的可见度指标可能需要报告的可见曝光的持续时间组件。持续时间可以通过计算<code>$ sf.ext.inViewPercentage</code>值多久达到或超过一个可见曝光的最小百分比来决定。</p>
<p>下面的代码示例演示了注册的”监听者”是怎样可能会确定持续时间（粗体值指被业界公认的广告能见度值代替）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> viewableTimerId = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> viewableFired = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nodifyViewablePassed</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(viewableFired) <span class="keyword">return</span>; <span class="comment">// fire beacon</span></span><br><span class="line">viewableFired = <span class="literal">true</span>;</span><br><span class="line">viewableTimerId = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update</span>(<span class="params">status, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// notify if 50% in view for 1 second</span></span><br><span class="line"><span class="keyword">if</span>($sf.ext.inViewPercentage() &gt; <span class="number">50</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(viewableTimerId == <span class="number">0</span>)&#123;</span><br><span class="line">viewableTimerId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;notifyViewablePassed(); &#125;, <span class="number">1000</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">clearTimeout(viewableTimerId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sf.ext.register(<span class="number">160</span>, <span class="number">650</span>, status_update)</span><br></pre></td></tr></table></figure></p>
<h3 id="5-11-函数-sf-ext-winHasFocus"><a href="#5-11-函数-sf-ext-winHasFocus" class="headerlink" title="5.11 函数$sf.ext.winHasFocus"></a>5.11 函数<code>$sf.ext.winHasFocus</code></h3><p><code>$sf.ext.winHasFocus()</code></p>
<p>可用性：同步（可随时请求）</p>
<p>返回是否浏览器窗口或包含SafeFrame聚焦(in focus)，或当前活动(active)的标签。</p>
<p><strong>返回：</strong></p>
<ul>
<li><code>{Boolean} True if the browser window / tab has focus, otherwise false</code></li>
</ul>
<p><strong>版本要求</strong></p>
<ul>
<li>“1.1” Requires specVersion 1.1 as opposed to original functionality in “1.0”</li>
</ul>
<p><strong>与广告可见度的关系</strong><br>除了几何坐标，一个SafeFrame内的内容可能想知道主窗口是当前活动，或聚焦。该函数提供了信息，而且在报告可见度指标时可以被考虑。</p>
<blockquote>
<p><strong>广告可见度注</strong><br><code>winHasFocus</code>函数提供了可被认为是可见度指标的部分的信息。这个函数报告的信息并不能决定或报告可见度。可见度指标是由行业和参与报告可见度的媒体的各方确定。</p>
</blockquote>
<p>下面的代码示例演示了一个注册的监听器会如何确定主浏览器窗口或选项卡是否聚焦。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> win_has_focus = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">status_update</span>(<span class="params">status, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// notify if 50% in view for 1 second</span></span><br><span class="line"><span class="keyword">if</span>(status == “focus-change”) &#123;</span><br><span class="line">    win_has_focus = $sf.ext.winHasFocus();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sf.ext.register(<span class="number">160</span>, <span class="number">650</span>, status_update)</span><br></pre></td></tr></table></figure></p>
<hr>
<p>end</p>
]]></content>
      
        <categories>
            
            <category> 译文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SafeFrame </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js学习笔记一：入门]]></title>
      <url>http://seminelee.github.io/2016/08/18/vue-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　vue是法语中视图的意思，Vue.js是一个轻巧、高性能、可组件化的MVVM库。<br>　　<code>MV*</code>可能大家都经常听说，我们先来理解一下<code>MV*</code>的概念。<br><a id="more"></a></p>
<h3 id="出现的背景"><a href="#出现的背景" class="headerlink" title="出现的背景"></a>出现的背景</h3><p>　　MVC开始是存在于桌面程序中的，但由于后端的mvc框架的v层越来越重，后端的MVC思想就搬移到了前端。随着前端代码越来越重，能力越来越大，重前端的系统越来越多地涌现出来。前端为主的MV*时代中，前端在MVC的结构指导下分为model(模型), view(视图)， controller(控制器)三部分。而controller慢慢演化为presenter和viewmodel。MVC, MVP, MVVM框架不断涌现。</p>
<h3 id="MVC-MVP-MVVM"><a href="#MVC-MVP-MVVM" class="headerlink" title="MVC, MVP, MVVM"></a>MVC, MVP, MVVM</h3><ul>
<li><p>MVC(model-view-controller)，如backbone, angular(较高版本是mvvm, 也许说它是MVW更准确)。<br>　　View: 与页面上元素直接相关的部分，包括html，CSS和一部分直接控制页面元素的JS。它可以从Model中得到数据，并将其显示到页面上。<br>　　Model: 与后端的沟通、AJAX请求以及对数据的处理。Model本身不知道谁是View，谁是Controller。它只提供一些方法供View和Controller调用，并且将变更通知给它的观察者。<br>　　Controller: Model和View的粘合剂。Controller将View方面的请求转发给合适的Model，作为Model的观察者，获取Model的变更,在必要时更新View。</p>
</li>
<li><p>MVP(model-view-presenter)使用此模型的框架不多，现在几乎倒向MVVM。MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。<br>　　Presenter，与Controller一样，接收View的命令，对Model进行操作；与Controller不同的是Presenter会反作用于View，Model的变更通知首先被Presenter获得，然后Presenter再去更新View。</p>
</li>
<li>MVVM(model-view-viewmodel)如Vue.js。将Controller改为ViewModel。它与MVP的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在ViewModel。<br>　　下图来自<a href="http://blog.csdn.net/napolunyishi/article/details/22722345" target="_blank" rel="noopener">对MVC、MVP、MVVM的理解</a>，清晰地说明它们之间的区别<br><img src="/static/2016/08/mvc.png" alt="mvc,mvp和mvvm"></li>
</ul>
<h2 id="Vue-js起步"><a href="#Vue-js起步" class="headerlink" title="Vue.js起步"></a>Vue.js起步</h2><h3 id="简单介绍一下"><a href="#简单介绍一下" class="headerlink" title="简单介绍一下"></a>简单介绍一下</h3><ul>
<li>尤雨溪老师写的一个用于创建 web交互界面的库，是一个精简的MVVM，和其他库相比是一个小而美的库</li>
<li>官方文档很清晰，比 Angular 简单易学</li>
<li>采用双向绑定，用解耦的组件组合你的应用程序<br><img src="/static/2016/08/vue1.png" alt="vue.js概况"></li>
</ul>
<p>　　下图是<a href="http://vuejs.org/" target="_blank" rel="noopener">vue.js官网</a>上的双向绑定的小例子。首先是VM -&gt; V，VM中的data里的message变化，会自动反映在V中的p标签里大括号内的message；V -&gt; VM，V中input里输入的值，会自动反映到VM中的message值。所以，你在输入框中输入的文字会被实时显示成上方的文字。<br><img src="/static/2016/08/vuedemo.png" alt="vue.js官网例子"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>　　安装步骤<a href="https://vuejs.org.cn/guide/installation.html" target="_blank" rel="noopener">vue.js官网</a>上介绍得十分清楚。这里我推荐先安装<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像</a>，再进行安装Vue.js官方命令行工具，这样会更快。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 cnpm淘宝镜像</span></span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 全局安装 vue-cli</span></span><br><span class="line">$ cnpm install -g vue-cli</span><br><span class="line"><span class="comment"># 创建一个基于 "webpack" 模板的新项目</span></span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"><span class="comment"># 安装依赖，走你</span></span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ cnpm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></p>
<h2 id="一些常用的指令"><a href="#一些常用的指令" class="headerlink" title="一些常用的指令"></a>一些常用的指令</h2><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>　　用法：在表单控件(<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>)上创建双向绑定。<br>　　例子：输入框中初始化文字是”hello vue.js”，而你在输入框中输入的文字会被实时显示成上方的文字。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;newItem&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"newItem"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        newItem:<span class="string">'hello vue.js.'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>　　用法：基于源数据将元素或模板块重复数次，简单来说就是列表渲染。如果之前学过Angular会觉得很相似。<br>　　例子：会显示列表，列表中有”No.1”、”No.2”。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.label&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        newItem:<span class="string">'hello vue.js.'</span>,</span><br><span class="line">        items: [</span><br><span class="line">        	&#123;<span class="attr">label</span>: <span class="string">"No.1"</span>,<span class="attr">isFinished</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">        	&#123;<span class="attr">label</span>: <span class="string">"No.2"</span>,<span class="attr">isFinished</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>　　用法：绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符（如.stop、.prevent等）也可以省略。<br>　　例子：<code>&lt;li&gt;</code>标签上绑定了点击事件，每次点击会改变item的isFinished属性。v-on:click可以缩写成@click。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-on:click</span>=<span class="string">"toggleFinish(item)"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.label&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      toggleFinish: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        item.isFinished = !item.isFinished</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>　　用法：动态地绑定一个或多个 attribute，或一个组件prop到表达式。在绑定 class 或 style 时，支持其它类型的值，如数组或对象；在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。<br>　　例子：如果<code>&lt;li&gt;</code>的数据item.isFinished是true，<code>&lt;li&gt;</code>的class就是finished，文字颜色就会变成#ccc。v-bind:class可以缩写成:class。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;finished: item.isFinished&#125;"</span> <span class="attr">v-on:click</span>=<span class="string">"toggleFinish(item)"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.label&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.finished</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="父向子组件传参"><a href="#父向子组件传参" class="headerlink" title="父向子组件传参"></a>父向子组件传参</h3><p>　　例子：App.vue为父，引入componetA组件之后，则可以在template中使用<component-a>标签（注意驼峰写法要改成componet-a写法，因为html对大小写不敏感，componenta与componentA对于它来说是一样的，不好区分，所以使用小写-小写这种写法）。而子组件componetA中，声明props参数’msgfromfa’之后，就可以收到父向子组件传的参数了。例子中将msgfromfa显示在<code>&lt;p&gt;</code>标签中。<br>App.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component-a</span> <span class="attr">msgfromfa</span>=<span class="string">"(Just Say U Love Me)"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br></pre></td></tr></table></figure></component-a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	    components: &#123;</span><br><span class="line">	      componentA</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>componentA.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msgfromfa &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	props: [<span class="string">'msgfromfa'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="父向子组件传参（-broadcast）"><a href="#父向子组件传参（-broadcast）" class="headerlink" title="父向子组件传参（.$broadcast）"></a>父向子组件传参（.$broadcast）</h3><p>　　用法：vm.$broadcast( event, […args] )广播事件，通知给当前实例的全部后代。因为后代有多个枝杈，事件将沿着各“路径”通知。<br>　　例子：父组件App.vue中<code>&lt;input&gt;</code>绑定了键盘事件，回车触发addNew方法，广播事件”onAddnew”，并传参this.items。子组件componentA中，注册”onAddnew”事件，打印收到的参数items。<br>App.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"newItem"</span> @<span class="attr">keyup.enter</span>=<span class="string">"addNew"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		methods: &#123;</span><br><span class="line">		  addNew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		    <span class="keyword">this</span>.$broadcast(<span class="string">'onAddnew'</span>, <span class="keyword">this</span>.items)</span><br><span class="line">		  &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>componentA.vue中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	events: &#123;</span><br><span class="line">	    <span class="string">'onAddnew'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">items</span>)</span>&#123;</span><br><span class="line">	      <span class="built_in">console</span>.log(items)</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="子组件向父传参（-emit）"><a href="#子组件向父传参（-emit）" class="headerlink" title="子组件向父传参（.$emit）"></a>子组件向父传参（.$emit）</h3><p>　　用法：vm.$emit( event, […args] )，触发当前实例上的事件。附加参数都会传给监听器回调。<br>　　例子：App.vue中component-a绑定了自定义事件”child-say”。子组件componentA中，单击按钮后触发”child-say”事件，并传参msg给父组件。父组件中listenToMyBoy方法把msg赋值给childWords，显示在<code>&lt;p&gt;</code>标签中。<br>App.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Do you like me? &#123;&#123;childWords&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component-a</span> <span class="attr">msgfromfa</span>=<span class="string">"(Just Say U Love Me)"</span> <span class="attr">v-on:child-say</span>=<span class="string">"listenToMyBoy"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		    <span class="keyword">return</span> &#123;</span><br><span class="line">		      childWords: <span class="string">""</span></span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		components: &#123;</span><br><span class="line">		  componentA</span><br><span class="line">		&#125;,</span><br><span class="line">	    methods: &#123;</span><br><span class="line">		    listenToMyBoy: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>)</span>&#123;</span><br><span class="line">		      <span class="keyword">this</span>.childWords = msg</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>componentA.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"onClickMe"</span>&gt;</span>like!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> &#123;</span><br><span class="line">	      msg: <span class="string">'I like you!'</span></span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onClickMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'child-say'</span>,<span class="keyword">this</span>.msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="子组件向父传参（-dispatch）"><a href="#子组件向父传参（-dispatch）" class="headerlink" title="子组件向父传参（.$dispatch）"></a>子组件向父传参（.$dispatch）</h3><p>　　用法：vm.$dispatch( event, […args] )，派发事件，首先在实例上触发它，然后沿着父链向上冒泡在触发一个监听器后停止。<br>　　例子：App.vue中events中注册”child-say”事件。子组件componentA中，单击按钮后触发”child-say”事件，并传参msg给父组件。父组件中”child-say”方法把msg赋值给childWords，显示在<code>&lt;p&gt;</code>标签中。<br>App.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Do you like me? &#123;&#123;childWords&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component-a</span> <span class="attr">msgfromfa</span>=<span class="string">"(Just Say U Love Me)"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		events: &#123;</span><br><span class="line">		    <span class="string">'child-say'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">		      <span class="keyword">this</span>.childWords = msg</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>componentA.vue中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"onClickMe"</span>&gt;</span>like!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> &#123;</span><br><span class="line">	      msg: <span class="string">'I like you!'</span></span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onClickMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$dispatch(<span class="string">'child-say'</span>,<span class="keyword">this</span>.msg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　这里只提及了一些指令，更多功能建议在官网上刷一遍<a href="http://vuejs.org.cn/api/#vm-emit" target="_blank" rel="noopener">API文档</a>。</p>
<h2 id="做一个todolist"><a href="#做一个todolist" class="headerlink" title="做一个todolist"></a>做一个todolist</h2><p>　　用以上的指令写一个简单的demo。实现添加事情，删除事情，点击事情表示事情已完成，点赞等功能。代码思路源自慕课网教程，我作了一些修改。<br>　　详细代码如下：</p>
<h3 id="src-App-vue"><a href="#src-App-vue" class="headerlink" title="src/App.vue"></a>src/App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"newItem"</span> @<span class="attr">keyup.enter</span>=<span class="string">"addNew"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;finished: item.isFinished&#125;"</span> <span class="attr">v-on:click</span>=<span class="string">"toggleFinish(item)"</span>&gt;</span></span><br><span class="line">        ❤ &#123;&#123;item.label&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-on:click</span>=<span class="string">"deleteThis(item)"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Do you like me? &#123;&#123;childWords&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component-a</span> <span class="attr">msgfromfa</span>=<span class="string">"(Just Say U Love Me)"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">'./store'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> componentA <span class="keyword">from</span> <span class="string">'./components/componentA'</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//相当于module.export</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  /*function data()&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>...</span></span><br><span class="line">  &#125;*/</span><br><span class="line"><span class="javascript">  <span class="comment">/*相当于var vue = new vue(&#123;data: function()&#123;&#125;&#125;)*/</span></span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      title: <span class="string">'TODO LIST'</span>,</span></span><br><span class="line">      items: Store.fetch() || [],</span><br><span class="line"><span class="javascript">      newItem: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">      childWords: <span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    componentA</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    items: &#123;</span><br><span class="line"><span class="javascript">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">items</span>)</span>&#123;</span></span><br><span class="line">        Store.save(items)</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      deep: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  events: &#123;</span><br><span class="line"><span class="javascript">    <span class="string">'child-say'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.childWords = msg</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    toggleFinish: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span></span><br><span class="line">      item.isFinished = !item.isFinished</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    addNew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.items.push(&#123;</span></span><br><span class="line"><span class="javascript">        label: <span class="keyword">this</span>.newItem,</span></span><br><span class="line"><span class="javascript">        isFinished: <span class="literal">false</span></span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.newItem = <span class="string">''</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$broadcast(<span class="string">'onAddnew'</span>, <span class="keyword">this</span>.items)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    listenToMyBoy: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.childWords = msg</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    deleteThis: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.items.splice(<span class="keyword">this</span>.items.indexOf(item), <span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">      Store.save(<span class="keyword">this</span>.items)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">*&#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">html &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">  font-family: Source Sans Pro, Helvetica, sans-serif;</span><br><span class="line">  text-align: center;</span><br><span class="line">  width: 60%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#42b983</span>;</span></span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#app</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span></span><br><span class="line">  line-height: 3;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 10%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#app</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">  width: 60%;</span><br><span class="line">  line-height: 24px;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 25%; left: 20%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 35%;</span><br><span class="line">  text-align: left;</span><br><span class="line">  width: 60%;</span><br><span class="line">  height: 45%;</span><br><span class="line">  overflow: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul li &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  line-height: 2;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">  padding: 2px 5px;</span><br><span class="line">  text-align: right;</span><br><span class="line">  background-color: red;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.finished</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">hr &#123;</span><br><span class="line"><span class="css">  ;<span class="selector-tag">border-top</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  text-align: left;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 10%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="src-components-componentA-vue"><a href="#src-components-componentA-vue" class="headerlink" title="src/components/componentA.vue"></a>src/components/componentA.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msgfromfa &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"onClickMe"</span>&gt;</span>like!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">'I like you!'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  props: [<span class="string">'msgfromfa'</span>],</span></span><br><span class="line">  events: &#123;</span><br><span class="line"><span class="javascript">    <span class="string">'onAddnew'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">items</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(items)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    onClickMe: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$dispatch(<span class="string">'child-say'</span>,<span class="keyword">this</span>.msg);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">h1 &#123;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#42b983</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">button &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 10%;</span><br><span class="line">  right: 20%;</span><br><span class="line">  width: 100px;</span><br><span class="line">  background-color: green;</span><br><span class="line">  font-size: 16px;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">  padding: 2px 5px;</span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.hello</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">  bottom: 5%;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="src-store-js"><a href="#src-store-js" class="headerlink" title="src/store.js"></a>src/store.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> STORAGE_KEY = <span class="string">'todos-vuejs'</span><span class="comment">//es6语法 const定义一个常量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	fetch () &#123;<span class="comment">//es6语法 相当于 fetch:function()&#123;&#125;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(STORAGE_KEY) || <span class="string">'[]'</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	save (items) &#123;</span><br><span class="line">		<span class="built_in">window</span>.localStorage.setItem(STORAGE_KEY, <span class="built_in">JSON</span>.stringify(items))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　　完成后如下图：<br><img src="/static/2016/08/todolist.png" alt="ToDoList"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.imooc.com/view/694" target="_blank" rel="noopener">vuejs入门基础（慕课网视频）</a></li>
<li><a href="https://segmentfault.com/a/1190000003968020" target="_blank" rel="noopener">Vue.js 快速入门</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="noopener">谈谈MVC模式</a></li>
<li><a href="http://zakwu.me/node/assets/ppts/tpls/bigFe.html" target="_blank" rel="noopener">大前端技术分享</a></li>
<li><a href="http://blog.csdn.net/napolunyishi/article/details/22722345" target="_blank" rel="noopener">对MVC、MVP、MVVM的理解</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记之对象及继承]]></title>
      <url>http://seminelee.github.io/2016/08/07/ob/</url>
      <content type="html"><![CDATA[<h2 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h2><p>　　ES5中有两种属性，数据属性和访问器属性。<br><a id="more"></a><br>　　数据属性包括[[writable]]（能否修改属性的值）、[[value]]等等；<br>　　访问器属性包括[[Configurable]]（能否通过delete删除属性、能否修改属性的特性）、[[Enumerable]]（能否通过for-in循环返回属性）、[[Get]]、[Set]]<br>　　要修改属性则使用Object.defineProperty()，这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中描述符对象的属性必须是：configurable、enumerable、writable和value。如下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">	configurable: <span class="literal">false</span>,</span><br><span class="line">	value: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(person.name); <span class="comment">//"Nicholas"</span></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line">alert(person.name); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure></p>
<p>　　也可以使用Object.defineProperties()定义多个属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book,&#123;</span><br><span class="line">	_year: &#123;</span><br><span class="line">		value: <span class="number">2004</span></span><br><span class="line">	&#125;,</span><br><span class="line">	edition: &#123;</span><br><span class="line">		value: <span class="number">1</span></span><br><span class="line">	&#125;,</span><br><span class="line">	year: &#123;</span><br><span class="line">		<span class="keyword">get</span>: function()&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="keyword">set</span>: function(newValue)&#123;</span><br><span class="line">			<span class="keyword">if</span>(newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>._year = newValue;</span><br><span class="line">				<span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">	o.name = name;</span><br><span class="line">	o.age = age;</span><br><span class="line">	o.job = job;</span><br><span class="line">	o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure>
<p>　　抽象了出案件具体对象的过程，每次调用函数会返回一个对象</p>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.age = age;</span><br><span class="line">	<span class="keyword">this</span>.job = job;</span><br><span class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br><span class="line"></span><br><span class="line">alert(person1.constructor == Person);<span class="comment">//true</span></span><br><span class="line">alert(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></span><br><span class="line">alert(person1 <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>　　构造函数没有显性地创建对象；直接将属性和方法赋给了this对象；没有return语句。<br>　　创建实例的步骤是这样的：创建一个新对象；将构造函数的作用于赋给新对象（this指向这个新对象）；执行构造函数中的代码；返回新对象。<br>　　我们也可以将构造函数当做函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br><span class="line"><span class="built_in">window</span>.sayName(); <span class="comment">//"Greg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在另一个对象的作用域中调用</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Person.call(o, <span class="string">"Kristen"</span>, <span class="number">25</span>, <span class="string">"Nurse"</span>);</span><br><span class="line">o.sayName();</span><br></pre></td></tr></table></figure>
<p>　　而构造函数的主要问题就是，每个方法都要在每个实例上重新创建一遍，不同实例上的同名函数是不相等的。</p>
<h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>　　原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。即不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。<br>看下面的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">	name : <span class="string">"Nicholas"</span>,</span><br><span class="line">	age : <span class="number">29</span>,</span><br><span class="line">	job : <span class="string">"Software Engineer"</span>,</span><br><span class="line">	sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> Person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//false</span></span><br><span class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> Person1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">"Greg"</span>;</span><br><span class="line">alert(person1.name);<span class="comment">//"Greg"  ——来自实例</span></span><br><span class="line">alert(hasPrototypeProperty(person, <span class="string">"name"</span>));<span class="comment">//false</span></span><br><span class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//true</span></span><br><span class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> Person1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">alert(person2.name);<span class="comment">//"Nicholas"  ——来自原型</span></span><br><span class="line">alert(person2.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//false</span></span><br><span class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> Person1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person1.name;</span><br><span class="line">alert(person1.name);<span class="comment">//"Nicholas"  ——来自原型</span></span><br><span class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>));<span class="comment">//false</span></span><br><span class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> Person1);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>　　当然原型对象也有缺点：所有实例在默认情况下都取得相同的属性值，即共享性。这个问题尤其对于包含引用类型值的属性来说更为突出。<br>　　所以，组合使用构造函数模式与原型模式是更好的选择。即在构造函数中定义实例属性，而所有实例共享的属性在原型中定义。</p>
<h2 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h2><p>　　JavaScript主要是依靠原型链实现继承。<br>　　什么是原型链？我们来看看构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.property;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.subProperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承了SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance.getSuperValue()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>　　instance.getSuperValue()调用时会经历三个步骤：</p>
<ul>
<li>搜索实例；</li>
<li>搜索SubType.prototype；</li>
<li>搜索SuperType.prototype，最后一步才找到方法。</li>
</ul>
<p>　　而所有函数的默认原型都是Object的实例，所以完整的原型链如下图：<br><img src="http://img.blog.csdn.net/20160807001109843" alt="来自《JavaScript高级程序设计（第3版）》"><br>　　即<code>instance.__proto__</code>（instance的原型）指向SubType.prototype，<code>SubType.prototype.__proto__</code>指向SuperType.prototype，而<code>SuperType.prototype.__proto__</code>指向Object.prototype，最后<code>Object.prototype.__proto__</code>指向null。<br>　　果然对象搞到头还是空啊！（开个玩笑==）</p>
<h2 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h2><p>　　原型链可以用来实现继承，但它也存在一些问题。<br>　　最主要的问题就是在创建原型对象中提及的，包含引用类型值的原型属性会被所有实例共享。</p>
<h2 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h2><p>　　鉴于上面的问题，我们可以通过使用apply()和call()在新创建的对象上执行构造函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	SuperType.call(<span class="keyword">this</span>);<span class="comment">//继承SuperType</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">alert(instance1.colors); <span class="comment">//"red,blue,green,black"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance2.colors); <span class="comment">//"red,blue,green"</span></span><br></pre></td></tr></table></figure></p>
<p>　　实际上，我们在新创建的SubType实例的环境下调用了SuperType构造函数。这样，SubType的每个实例就都会有自己的colors属性的副本了。</p>
<p>　　此外，还有组合继承，原型式继承，寄生式继承等。脑袋内存有限，这里不再作探究。<br>本文主要参考《JavaScript高级程序设计（第3版）》。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《JavaScript高级程序设计（第3版）》</p>
<h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p><a href="http://blog.csdn.net/SemineLee/article/details/52140233" target="_blank" rel="noopener">前端重点知识整理（JavaScript）四：对象及继承</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript学习笔记之闭包]]></title>
      <url>http://seminelee.github.io/2016/08/06/bibao/</url>
      <content type="html"><![CDATA[<h2 id="作用域相关定义"><a href="#作用域相关定义" class="headerlink" title="作用域相关定义"></a>作用域相关定义</h2><p>&emsp;&emsp;在说闭包之前，我们首先说一下作用域。<br>&emsp;&emsp;JavaScript中有全局作用域，函数作用域。看下面的代码<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;<span class="comment">//全局作用域中定义变量</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> b = <span class="number">20</span>;<span class="comment">//函数作用域中定义变量</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//可以访问全局变量</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//error, b is not defined</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;JavaScript是没有块级作用域的。看下面的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">//没有块级作用域，可以访问item</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里顺带一提，ES6提出了块级作用域及新变量声明（let）。<br>&emsp;&emsp;JS使用var声明变量，以function来划分作用域，大括号“{}” 却限定不了var的作用域。用var声明的变量具有变量提升（declaration hoisting，即先试用后声明不报错）的效果。<br>&emsp;&emsp;ES6里增加了一个let，可以在{}， if， for里声明。用法同var，但作用域限定在块级，let声明的变量不存在变量提升。</p>
<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>维基百科是这样说的：</p>
<blockquote>
<p>在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。<br>闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。</p>
</blockquote>
<p>&emsp;&emsp;JavaScript之所以有闭包，是因为它是一个第一类函数特性的语言，即可用把函数当做对象去传递作为返回值。<br>&emsp;&emsp;看下面的函数，对于这种函数，当调用函数outer()之后，局部变量localVal就可以被释放了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> localVal = <span class="number">30</span>;</span><br><span class="line">	<span class="keyword">return</span> localVal;</span><br><span class="line">&#125;</span><br><span class="line">outer();<span class="comment">//30</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在JavaScript中，函数也是对象，并且函数也可以作为返回值也可以传参，函数里也可以套用别的函数。<br>&emsp;&emsp;对于下面的函数，调用函数outer()时，返回的是匿名函数，这个匿名函数里面依然可以访问外面的局部变量localVal。在调用outer()之后，调用func()，依然可以访问外部函数的局部变量localVal，localVal不会被释放。<br>&emsp;&emsp;这就是闭包。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> localVal = <span class="number">30</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> localVal;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = outer();</span><br><span class="line">func();<span class="comment">//30</span></span><br></pre></td></tr></table></figure></p>
<h2 id="闭包无处不在"><a href="#闭包无处不在" class="headerlink" title="闭包无处不在"></a>闭包无处不在</h2><p>&emsp;&emsp;如下面的函数，点击事件中依然可以访问外部函数的局部变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> localData = <span class="string">"localData here"</span>;</span><br><span class="line">	<span class="built_in">document</span>.addEvenetListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(localData);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;再如下面的异步请求，jquery的$.ajax方法，在整个函数调用结束之后，回调函数依然可以访问到url，localData这些局部变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> localData = <span class="string">"localData here"</span>;</span><br><span class="line">	<span class="keyword">var</span> url = <span class="string">"http://www.qq.com/"</span>;</span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">		url: url,</span><br><span class="line">		success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(localData);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="闭包的坑"><a href="#闭包的坑" class="headerlink" title="闭包的坑"></a>闭包的坑</h2><p>&emsp;&emsp;看下面的函数，输出结果是什么？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML = <span class="string">"&lt;div id='div1'&gt;aaa&lt;/div&gt;"</span> + <span class="string">"&lt;div id='div2'&gt;bbb&lt;/div&gt;"</span> + <span class="string">"&lt;div id='div3'&gt;ccc&lt;/div&gt;"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">	<span class="built_in">document</span>.getElementById(<span class="string">'div'</span> + i)</span><br><span class="line">		.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			alert(i);<span class="comment">//all are 4!</span></span><br><span class="line">		&#125;</span><br><span class="line">	);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;实际上，点击任何一个div输出结果都是4。<br>&emsp;&emsp;在点击某个div的时候，执行回调函数，这个时候函数才会动态地拿到i的值。这一切是在整个过程初始化之后的，在初始化之后i的值就已经是4了。<br>&emsp;&emsp;那怎么样才能达到想要的效果呢？看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML = <span class="string">"&lt;div id='div1'&gt;aaa&lt;/div&gt;"</span> +</span><br><span class="line">	<span class="string">"&lt;div id='div2'&gt;bbb&lt;/div&gt;"</span> + <span class="string">"&lt;div id='div3'&gt;ccc&lt;/div&gt;"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">	!<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">document</span>.getElementById(<span class="string">'div'</span> + i)</span><br><span class="line">			.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				alert(i);<span class="comment">//1,2,3</span></span><br><span class="line">			&#125;</span><br><span class="line">		);</span><br><span class="line">	&#125;(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里每一层循环的时候，用了立即执行的匿名函数把点击事件函数包装起来，并传参i，即1,2,3。那么每一次点击div，alert(i)里面的i就会取每一个闭包环境下的i，而这个i来自于每一次循环的i，所以点击每一个div的时候就会弹出相应的值了</p>
<h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>&emsp;&emsp;闭包可以用于封装一些变量，看下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _userId = <span class="number">23492</span>;</span><br><span class="line">	<span class="keyword">var</span> _typeId = <span class="string">'item'</span>;</span><br><span class="line">	<span class="keyword">var</span> <span class="keyword">export</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">converter</span>(<span class="params">userId</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> +userId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">export</span>.getUserId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> converter(_userId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">export</span>.getTypeId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> converter(_typeId);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">window</span>.export = <span class="keyword">export</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>.getUserId(); <span class="comment">//23492</span></span><br><span class="line"><span class="keyword">export</span>.getTypeId(); <span class="comment">//item</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>._UserId; <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">export</span>._TypeId; <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">export</span>.converter; <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这里定义了_userId等一些外部无法直接访问的局部变量，并通过window.export = export把对象export输出出去。在外部使用export的时候，只能通过export的一些方法来访问到函数的局部变量，而无法直接访问这些变量和方法。<br>&emsp;&emsp;这利用了闭包的特性，比如export.getUserId()函数，在整个匿名函数初始化之后，它依然能够访问到局部变量_userId。<br>&emsp;&emsp;同时，闭包也会带来一些问题，比如局部变量没有被释放掉造成空间浪费；内存泄露；性能消耗等。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.imooc.com/learn/277" target="_blank" rel="noopener">JavaScript深入浅出</a></p>
<p>友情链接：<a href="http://blog.csdn.net/seminelee/article/details/52131659" target="_blank" rel="noopener">前端重点知识整理（JavaScript）三：闭包</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三小时建成github pages + hexo博客]]></title>
      <url>http://seminelee.github.io/2016/07/24/set-up-a-blog/</url>
      <content type="html"><![CDATA[<p>因为受到了<a href="https://woohoodai.github.io/" target="_blank" rel="noopener">戴老板</a>的激励和羡慕身边大神都有个炫酷的博客，所以下午的时候花时间建立起这个博客。得益于网络教程，发现原来并不难。以下是这一过程的记录，顺便练练markdown。<br><a id="more"></a></p>
<h2 id="为什么要建立这个博客"><a href="#为什么要建立这个博客" class="headerlink" title="为什么要建立这个博客"></a>为什么要建立这个博客</h2><h3 id="为什么选择GitHub-Pages"><a href="#为什么选择GitHub-Pages" class="headerlink" title="为什么选择GitHub Pages"></a>为什么选择GitHub Pages</h3><ul>
<li>域名是github的二级域名，不用给空间付费，不用给域名付费</li>
<li>流行又简洁的MarkDown写作语法</li>
<li>支持本地编写、本地预览</li>
<li>seo优化上，github在google上权重高</li>
</ul>
<h3 id="为什么我要写博客"><a href="#为什么我要写博客" class="headerlink" title="为什么我要写博客"></a>为什么我要写博客</h3><ul>
<li>本人表达能力不佳，把脑里的东西写下来能让我印象更深刻，提高我将事情讲清楚的能力和逻辑思维能力</li>
<li>有利于我积累更多的知识，并享受分享带来的连锁反应</li>
<li>用markdown写东西觉得自己很geek</li>
</ul>
<h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><ol>
<li>安装<a href="https://nodejs.org/" target="_blank" rel="noopener">node.js</a></li>
<li>安装<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></li>
<li>注册<a href="http://www.github.com/" target="_blank" rel="noopener">github</a></li>
</ol>
<h2 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h2><h3 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h3><p>建立博客之前要先用SSH keys让我们的本地git项目与远程的github建立联系。<br>首先我们需要检查你电脑上现有的ssh key。右键打开Git Bash，输入：<br>（如果提示：No such file or directory 说明你是第一次使用git。）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh</span><br></pre></td></tr></table></figure></p>
<p>生成新的SSH Key<br>（此处的邮箱地址请输入你自己的邮箱地址）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></span><br></pre></td></tr></table></figure></p>
<p>然后回车</p>
<p>然后系统会要你输入密码。这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。<br>（输入密码的时候没有*字样的，你直接输入就可以了）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;输入加密串&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure></p>
<p>看到这样的界面就成功设置ssh key了。<br><img src="/static/2016/07/1.png" alt="成功设置 ssh key"></p>
<p>注意：如果你使用的是mac，需要在命令前加上sudo，详细可以看这篇文章<a href="http://idealife.github.io/2015/10/02/Hexo%E9%83%A8%E7%BD%B2%E6%97%B6%E6%8F%90%E7%A4%BAfatal-Could-not-read-from-remote-repository%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/" target="_blank" rel="noopener">Hexo部署时提示Fatal： Could not read from remote repository的问题处理</a></p>
<h3 id="将SSH-Key添加到Github上"><a href="#将SSH-Key添加到Github上" class="headerlink" title="将SSH Key添加到Github上"></a>将SSH Key添加到Github上</h3><ol>
<li>打开本地C:\Documents and Settings\Administrator.ssh\id_rsa.pub文件。路径也有可能是C:\Users\Administrator.ssh，你可以直接在C盘中查找id_rsa.pub文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。打开，准确的复制这个文件的内容。</li>
<li>登陆github系统。点击右上角的图像—&gt;Settings —&gt; SSH and GPG keys。<br><img src="/static/2016/07/2.png" alt="将SSH Key添加到Github上"></li>
<li>点击右上角New SSH key，把你刚刚复制的本地生成的密钥文件内容黏贴到里面（Key文本框中）， 点击Add SSH key就ok了<br><img src="/static/2016/07/3.png" alt="将SSH Key添加到Github上"></li>
</ol>
<h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>的部分不要修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>
<p>然后输入yes<br>然后就会看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi seminelee! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p>
<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。<br>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"seminelee"</span>//用户名</span><br><span class="line">$ git config --global user.email  <span class="string">"may.air@qq.com"</span>//填写自己的邮箱</span><br></pre></td></tr></table></figure></p>
<p>完成以上步骤后本机就已成功连接到github</p>
<h2 id="开始建立博客"><a href="#开始建立博客" class="headerlink" title="开始建立博客"></a>开始建立博客</h2><p>与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>想建立个人博客是用的第一种，形如seminelee.github.io这样的可访问的站，每个用户名下面只能建立一个。</p>
<h3 id="Github上建立仓库"><a href="#Github上建立仓库" class="headerlink" title="Github上建立仓库"></a>Github上建立仓库</h3><p>登陆Github，建立一个名为seminelee.github.io的仓库。<br>注意！Github Pages的Repository名字是特定的，比如我Github账号是seminelee，那么我Github Pages Repository名字就是seminelee.github.io。<br>详细建立仓库过程略过。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。<br>打开Git Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure></p>
<p>安装完毕后，在我的电脑某个位置中建立一个名字叫hexo的文件夹，然后在此文件夹中右键打开Git Bash。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p>
<p>Hexo随后会自动在目标文件夹建立网站所需要的所有文件。<br>现在我们已经搭建起本地的hexo博客了。<br>在hexo目录下输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p>
<p>然后到浏览器输入localhost:4000看看，可以看到默认主题下的博客，这就实现了本地预览了。</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>每次更换主题前清空一下database<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p>
<p>通过git clone克隆主题，这里用的是next主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next.git</span><br></pre></td></tr></table></figure></p>
<p>更多主题可以参考<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有哪些好看的 Hexo 主题? - GitHub - 知乎</a></p>
<p>启用主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: hexo-theme-next</span><br></pre></td></tr></table></figure></p>
<p>修改hexo目录下的config.yml配置文件中的theme属性，将其设置为hexo-theme-next。<br>（注意：Hexo有两个config.yml文件，一个在根目录，一个在theme下，此时修改的是在根目录下的。）</p>
<p>更新主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/hexo-theme-next</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure></p>
<p>然后可以本地预览一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment">#generate生成</span></span><br><span class="line">$ hexo s <span class="comment">#server测试环境，启动本地服务，进行文章预览调试</span></span><br></pre></td></tr></table></figure></p>
<h3 id="上传到Github仓库"><a href="#上传到Github仓库" class="headerlink" title="上传到Github仓库"></a>上传到Github仓库</h3><p>打开hexo目录下的_config.yml，拉到最下面<br>配置为这样子,只需要把seminelee改为你自己的github用户名就可以了。（注意格式，冒号后要有空格，你可以直接复制以下代码再作修改）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/seminelee/seminelee.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>然后执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment">#generate生成</span></span><br><span class="line">$ hexo d <span class="comment">#deploy开发环境</span></span><br></pre></td></tr></table></figure></p>
<p>如果看到结果最后一行是INFO Deploy done:git则没有问题。否则，则可以把上面的配置改为下面这种使用SSH方式的提交，把用户名改为你自己的用户名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:seminelee/seminelee.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>再次执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment">#generate生成</span></span><br><span class="line">$ hexo d <span class="comment">#deploy开发环境</span></span><br></pre></td></tr></table></figure></p>
<p>如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，网上说是hexo 更新到3.0之后的一个坑，则需要安装hexo-deployer-git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>再次执行命令之后，打开<a href="https://seminelee.github.io/">https://seminelee.github.io/</a>就能看到你建立好的博客了！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="http://www.jianshu.com/p/863f3f2d1733" target="_blank" rel="noopener">使用github+Hexo人人都能拥有一个美美的博客</a></li>
<li><a href="http://www.v2ex.com/t/175940" target="_blank" rel="noopener">搭建 hexo，在执行 hexo deploy 后,出现 error deployer not found:github 的错误</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
